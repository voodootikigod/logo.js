%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: iowajs.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Nathan Smith
%%CreationDate: 10/18/11
%%BoundingBox: 0 0 792 612
%%HiResBoundingBox: 0 0 791.9961 612
%%CropBox: 0 0 791.9961 612
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 16788 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD9AFFA7CFA8CFA8FFCAFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FD47FFA8FFFFFFA8FD1FFFC8C7CDC7CDC7C8%C7CDC8CDC8CEC8CEC8CEC8CEC8CEC8CEC9CFC9CEC9CFC9CFC9CFC9CFC9CF%C9CFC9CFCACFC9CFCACFC9CFCACFCACFCACFCACFCACFCACFCACFC9CFCACF%C9CFCACFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CEC9CEC8CEC8CEC8CEC8CE%FD1FFFA6C7C7C7A5CCC7C7A5CCC7C7A5CCC7C7A5CCC7C7A5CCC7C7A5C7C7%C7A5C7C7C7A5C7C7C7A5C7C7C7A5C7C7C7A5C7C7C7A5C7C7C7A5C8C7C7A5%C8C7C7A5C7C7C7A5C7C7C7A5C7C7C7A5C7C7C7A5C7C7C7A5C7C7C7A5C7C7%C7A5CCC7C7A5CCC7CCA5FD20FFA6CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7C7A7FD1FFFC9A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CCA5C9%FD1EFFCFA6CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CEFD1DFFA6C7C7CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7CCA5CEFD1CFFCFA5%C8C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CCA6FD1EFFA6C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CCA5CFFD1EFFC9C7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CEFD%1FFFA7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7C7C8CAFD1EFFCAC8C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CCA6FD1FFFC9A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C8A8%FD1EFFA6CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CFFD1EFFC8A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A7FD1DFFCFC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7C9FD1DFFA7C7C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CCA5C9FD1BFFCAC8C7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CC%A6FD1BFFC8A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C8FD1AFFCFC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CAFD19FFA8C8A5C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CCA5C9A8FD18FFCFC8C7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7C8C9CFCAFD16FFA7C7C7CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDFD06C7A6FD16FFC8%CCC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7C7A7FD15FFC9A5C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C8A8FD14FFC9C8C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDA5FD16FF%CAC8C7CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C8A7FD16FFC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CCA6FD14FFA7C7C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C79FCF%FD12FFCFC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7FD12FFCBC8C7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5C7A7FD12FFCACDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CEFD12FFCFA5CCC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CCC7CCC7CCC7CCC7C8C7C7A5CDC7C7A5CDC7C7C7CCC7CC%C7CCC7CCA5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5C9A8FD10FFC9CCC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7A07BA67BA07BA6C7CDC7CDC7CDC7CDC7CDC7A67B7C517C517C9FCD%CCCDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7C8%C9FD10FFA5CCC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7C7A6FD06%2751CCC7C7A5CDC7C7C7CC7B512727052700FD0427A0C7CCA5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A6FD0FFFCFA5CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD9FFD062752C7CDC7CDC7CD%C7CD51FD0C2776C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7C7CAFD0EFFA7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7A5FD062751CCA5CDC7C7A5C8FD0E27F851C7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CCA5CAFD0FFFA6C7C7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD9F2DFD052752C7CDC7CDC7CD51FD%10277CC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CCC8FD0FFFCFA6C8C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7A6FD06%2751CCA5CDC7CC9FFD072700FD0A27A6C7CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C9FD11FFA6CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CD9FFD062776C7CDC7CDCC7CFD0727767BA051FD06277CC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CCC9FD10%FFA8C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7C7A6FD06274BCCC7C7%A5CCFD0627F87CC7CCC7CC7B27F82751C7C7CCC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CEFD11FFA6CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CD9FFD062776CCCDC7CDC751FD052752C7CDC7CDC7%CC75527BCDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDCFFD11FFCFA5CCC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7C7A6%FD062751CCC7C7C7CDFD0727CCC7C7A5CDC7C7A5CCC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A6FD13FFC9C7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CD9FFD062752C7CDC7CDC752FD06279FCD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC9FD13FFCFA5C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%A5FD062751CCA5CDC7CCFD08279FCCC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A6FD14FFC9C8C7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CD9F2DFD052752C7CDC7CDC77CFD082751C8%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CEFD14FFC9C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7A6FD06%2751CCA5CDC7CC9FFD0A27517BCCC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A7FD14FFA7CCC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CD9FFD062776C7CDC7CDC7CC51FD0C27A0C7CCC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CFFD14FFCAA5CC%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7C7A6FD06274BCCC7C7A5CDC7C7FD%0C27F8517BCCA5C8C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CCC7C7%A5C9CFFD14FFCAC8C8CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD9FFD0627%76CCCDC7CDC7CDC7CD51FD0D2751CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7C8A6CFFD17FFA8C8C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%C7A6FD062751CCC7C7A5CDC7C7C7CC7527F8FD0B274BCCC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CCC7C7A5C9FD1BFFCAC9C7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CD9FFD062752C7CDC7CDC7CDC7CDC7CDA576FD0C2751CDC7CDC7CD%C7CDC7CDC7CDC7CCC7C8A7CEC9CFFD1DFFA7C7C7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7A5FD062751CCA5CDC7C7A5CDC7C7A5CCC7A5514B05FD09277BCC%C7C7A5CDC7C7A5CDA5C8A7C9A8FFA8FD1FFFCFC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CD9F2DFD052752C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7A0FD0927%76CCCDC7CDC7CDC7CDC7CCCAFD24FFA6C8C7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7A6FD062751CCA5CDC7C7A5CDC7C7A5CDC7C7A5CDC7CC75FD0827C8C7%C7A5CDC7C7A5CCA5FD25FFCFA0CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD9FFD%062776C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CC9FFD07279FCDC7CDC7%CDC7CDC7CDFD25FFA7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7C7CCC7C7A5CDC7C7C7A6FD06274B%CCC7C7A5CDC7CC9F7CC7C7A5CDC7C7A5CDC7CC51FD06277BC7CDC7C7A5CD%C7C7A7FD25FFCFC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7C8517CC7CDC7CDC7CD9FFD062776CCCD%C7CDCCCD7B5227A0CCCDC7CDC7CDC7CDCC7CFD06277BCDC7CDC7CDC7CDC7%CDFD25FFCAC9A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7%A5CDC7C7A5CDC7C7A5CCC77C272727A6C7CDC7C7C77CFD062751CCC7C7C7%A62727052727A0C7CDC7C7A5CDC7CCFD0727A0C7CDC7C7A5CDC7C7A5C8A8%FD24FFC9C7C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CD9F52FD0527A6C7CDCCA6FD07277CC7CDC776FD07277CA5%CDCCCCC7C851FD062751A5CDC7CDC7CDC7CDC7CDC7C8CFFD23FFCFA5C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CC9F%27F8FD0627515151FD062705279FCCA5CC51FD072700274B765151FD0927%CCC7C7A5CDC7C7A5CDC7C7A4C9FD23FFC9CCC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD4BFD112751CDC7CDC7CD%4BFD1427A6CCCDC7CDC7CDC7CDC7CDC7CCC9FD23FFCFA5C7A5CDC7C7A5CD%C7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7A6FD1127A6%C7C7A5CDC7C7FD12270051C7CDC7C7A5CDC7C7A5CDC7C7A5C9FD23FFCAC8%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDCCA6FD0F277CC7CDC7CDC7CDC7C8FD10270552C7CDC7CDC7CDC7CDC7%CDC7CDC7C7A7FD24FFA6CCC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7A5272705FD0A277CC7C7A5CDC7C7A5C8%C7C75127002705FD0727F8272751A5CCA5C7A5CDC7C7A5CDC7C7A5CCA5CA%FD24FFCEC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CD7B52FD07274B51C8CCCDC7CDC7CDC7CDC7CDC7CD%A57C272DFD07275251A6C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CEFD24FFCF%A5CCC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CD%C7C7A5CDC7C7C7CCC7A6757C517575A0A5CCC7CDC7C7A5CDC7C7A5CDC7C7%A5CCC7C79F7C7575517C7BA0A5CCC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5C9%FD26FFC8C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CCC7CDCCCCC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDCCCCC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7C8CFFD25FFCFA5C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CCA5FD26FFC8CCC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7%CDC7CDC7CDC7CDC7CEFD26FFCFA5C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5%CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7C7A5CDC7%C7A5CDC7C7A5CDC7C7C7CCA6FD27FFCFC7CCC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CD%C7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CDC7CC%C7CDC7CDC7CDC7CDC7CCC7C8A6FD29FFC9A5C7A5C7A5C7A4C7A5C7A5CCC7%C7A5CCC7C7A5CCC7C7A5CCC7C7A5CCC7C7A5CCC7C7A5CCC7C7A5CCC7C7A5%CCC7C7A5CCC7C7A5CCC7C7A5CCA5C7A4C7A5C7A5C7A5C7A5C7A5C7A5C8A5%C8A6C8C7C7A5CDC7C7A6CFFD2BFFCACFC9CFC9CFC9CFC9CEC8CEC8CEC8CE%C8CDC8CDC8C8C7CDC7C8C7CDC7C8C7CDC7C8C7CDC7C8A6CDC8CDC8CDC8CD%C8CDC8CEC8CEC8CEC8CEC8CEC9CFC9CFC9CFC9CFC9CFCACFCFFD05FFC9C7%C7CDC7CCA6FD40FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%FFFFCAFFFFFFCAFD1DFFA7C7C7CDC7C9FD7BFFC9C7C7CDC7CFFD7BFFA6C7%A5C8CAFD7CFFA6CCC7FD7DFFCFA7CFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FD2DFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2011-10-18T16:46:10-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2011-10-18T16:46:10-05:00</xmp:ModifyDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:MetadataDate>2011-10-18T16:46:10-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqpy3NvCVE&#xA;0qRlq8ebBa060rkZTjHmaSIk8nRXNvKSIpUkI3IVg1PuxjOJ5FTEjmqZJDsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSfzLatJbR3SsK2xNUau4eg&#xA;2p+1WlM0nb2k8XBxXXBu5WknUq72OvHG9OahqdKiuefgkOzWiCAbiNf+BGETkOqtiKMdEX7hkxmm&#xA;OUj80U2EQGoUV+WSGpyj+KXzK0G6Dww/m8v8+XzK8IXLLOgpHNLGvXikjoK/JSBk46/PEUJy+ZYn&#xA;HE9Au+sXf/LTP/yOk/5qyX8pan/VJ/Mr4Ue4fJv61ef8tM3/ACNk/rkv5U1P+qS+aPCh3B31q8/5&#xA;aZ/+Rsn/ADVj/Kmp/wBUl818KHcG/rl7/wAtM3/Ix/65L+V9V/PkjwYdwd9cvf8Alpm/5GP/AFx/&#xA;lfVfz5L4MO4O+uXv/LTN/wAjH/rh/lfVfzyvgw7g39evv+WiX/g2/rh/lnVfzz9i+BDud9evv+Wi&#xA;X/g2/rj/ACzqv55+xfAh3O+vXv8Ay0y/8jG/rj/LOq/nn7F8CHc19cvf+Wmb/kY/9cj/ACvqv58l&#xA;8GHcHfXL3/lpm/5GP/XH+V9V/Pkvgw7g43d4RT6zN/yMf+uP8rar+fJPgw7g19avP+Wmb/kbJ/XI&#xA;/wAqan/VJfNfCh3B31q8/wCWmb/kbJ/XH+VNT/qkvmvhQ7g19Yu/+Wmf/kdJ/wA1ZH+UtT/qk/8A&#xA;TFPhR7h8lryTOKSTSyAbhXkdxXxoxORlr88tjOXzKjHEdAtoPDIfm8v8+XzLLhCvprrBqNrIqj+8&#xA;CUG1fUBT8OVc2fYuqmNTEEmV7c2nPG4FmWegupdirsVdirsVdirsVSnzFaX1zBCtqrSASfvoVYLV&#xA;aVDVZlB4so2zVdr6bNmxcOI79fMORppxjK5McVuShqUqK0OedTiYkg8w7VvIq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWmVWUqwDKeoO4wg0rIfLUty9tKj1a3jYCCRjXxD&#xA;IPZaD9XbO/7Ay5Z4P3nK/Se8Os1cYiWycZvHFdirsVdirsVdiqldXMVrbvcTEiOMVYgEmnyGV5co&#xA;xxMpcgyjEyNBhS9KheAJJCVrxBNQtanp0zy7U5BPJKURQJd1EUF2UJdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdiqyVuMTsDSik1+QyUADIAqze2t47e3jgjHwRqFWvXbufc56&#xA;tixiERGPIOklIk2VTLGLsVdirsVdirsVSjzPNw04Q0r9ZkWM+wALk7EfyU/r0zUdt5/D00v6Wzk6&#xA;WNz9zHs86do7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWU6FcpPp&#xA;kIFecCiGUHrzRQPxG+em9m6mObBGQN0KPvDqM8DGZR+Z7S7FXYq7FXYq7FWIaxK02sTmUANABHEh&#xA;oSqEBuXf7Z/CnhnBe0Oecs/Cdox5O10sQIbdUNmgch2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KphoV/BaXckc54R3AXjIfsh1qKN4cg3X2zqfZzWwgZY5GuLk4mrxmQ&#xA;BHRlGdm612KuxV2KuxV2KpP5lsVltBdqP31qeRYAkmI7OuxGw+136Zp+29IMuAmvVHdydLkqVdCx&#xA;/PO3aOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVogEUO4PUYqvgl&#xA;ntwBbyvCoNVVGIQH/U+x+GZ2HtLUYvpma+f3sJY4y5hkehajJdwPHM3K4hPxtQDkrVKtQUHYj6M7&#xA;jsftD8ziuX1x5/odbqMXBLbkUzzbOO7FXYq7FVO4t4biB4JlDxSDi6nw+jpkMmOM4mMhYKYyINhh&#xA;1ysCXdwkAKwpIURSxYjh8Lbmp+0D3zzftWGOGolHGOGI2+LuMRJiCeazNc2OxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kq9hfS2M7TRosgdQroftUUk/A3Ymv07Zt+&#xA;ye1PysjYuMufe05sPGGVWV9bXsPqwNUA8WUghlbrQg532n1MM0eKBsOrnjMTRV8vYOxV2KuxViet&#xA;W0dtqTqhFLgGfgDUqSaNUdgzVI8d/DOE9otJHHmExXr6eff8XaaWZlHfog855yXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqjdFu4bXUC0z+nFLGULk0UMCCvIk&#xA;08af250fs5qoY8koyNcQ27nF1UDKO3RlasGAZTVTuCOhGdyC6x2KuxV2KpD5mtVHpXgej7QmMioY&#xA;VLDf9nj8R985r2j0kZY/FJqUdve5ujyG+FJc4h2DsVdirsVdirsVdirsVdirsVdirsVQ9+7x2Ny6&#xA;Hi6ROysOxCkg5ZiFzAPeEHk+Vv8AlZfn3/q+3f8Aweek/wAl6b/U4/J1Hjz72d/kz5y806v5xNpq&#xA;epz3dt9Vlf0pWqvJStD+Oabt3Q4cen4oRETxDk5GmyylKiXu2cW7Bjfnfz3o/lHTRdXpMtzLUWlk&#xA;hAklYdev2VHdv47ZsOz+zsmqnUdojme5qy5RAbvBNf8Azk886tK3pXp022JqkFn+7IHasn94T9NP&#xA;bO003YemxDePEe+W/wBnJ109TM9aY8POHm0TGYa3f+sdjL9am5dKfa5VzO/JYKrghX9UNfiS7yyL&#xA;y/8AnL540mZPWvDqdqD8dvd/GSPaX+8B+mntmDqew9NlG0eA98f1cmyGpmPN775K876P5t0v67YM&#xA;Y5oyFu7Nz+8ic+Pip/ZYdfnUZxWv7PyaafDLl0Pe7LFlExYZDmA2OxV2KuxV2KuxVFaRdy2l3EkR&#xA;CwSusbxGvH42A5KKgBvfOg7C7QyRzDHdxl39Pc4+pxgxJ6hl2d46p2KuxVRvLSK7tZbWavpzKUan&#xA;Wh8K13yGTGJxMTyLKMjE2GH3EAt7ue3V/USFgqsQQfsht6k1pWmecdq6aGHOYQ5O3xTMoglbmtbH&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FUNqf/HNu/wDjDJ/xE5bg+uPvCJcnxjnq7o3pH5B/8p4f+YOb9aZo&#xA;faP/ABb/ADg5Ok+t9H5wLtHyd+Y/mWfzB5vv7xnLW8UjW9mvZYYiVWg7ct2Puc9M7M0owYIx61Z9&#xA;5/FOnzT4pEpHpmmX2qX8Gn2ERnu7lwkMS0qSfc7ADqSemZmXLHHEykaiGuMSTQejH/nHvzj9U9UX&#xA;dkbjjy+r85K1/l5cONfw980P+iXT8VVKu+h+tyvycq6POtU0vUNKv5tP1CBre8t24yxP1B+Y2IPU&#xA;EbHN7hzRyREom4lxZRINF6r+S3kbzjbaxD5geunaYVKyRzA87mNh0Ee1FrQhm+iuc5292hgOM4vq&#xA;n5fwn3/oczS4pA8XIPd84t2DsVdirsVdirsVXRLzuIEPR5olNPAyKDmd2bHi1EB/SDDIaifczbPT&#xA;nSuxV2KuxVjPmOOFNQRkNJZUrKlOy7K9a9T06dvbOP8AafFAGMv4z93e7HRyNEdEtzk3MdirsVdi&#xA;rsVdirsVdirsVdirsVQ2p/8AHNu/+MMn/ETluD64+8IlyfGOerujekfkH/ynh/5g5v1pmh9o/wDF&#xA;v84OTpPrfR+cC7R8X38bxX1xFIOLpK6sp7EMQRnrMDcQXRHmyb8rNe07Q/O1hfaiwjtKSRPMRX0z&#xA;KhQP8qnc+Ga/tfTzzaeUYfVt9hbtPMRmCX1PFLFLGssTrJG4DI6kFSD0II655vKJBo83bpXfeU/L&#xA;t/rFvrF7YxXGoWqenDNIOQArUfCfhJU/ZJG3bMnHrcsMZxxkREsDjiTZG6b5is3Yq7FXYq7FXYq7&#xA;FU00TSpppIr12CQxuTGlOTOVqprXZQD8/ozruwuySDHPI+4OFqc43iGSZ1zr3Yq7FXYqxfzEG/Sw&#xA;5c+Pogx8iSteRD8R26LXOM9p+LxI8+GvhbstH9JS/OWct2KuxV2KuxV2KuxV2KuxV2KuxVDan/xz&#xA;bv8A4wyf8ROW4Prj7wiXJ8Y56u6N6R+Qf/KeH/mDm/WmaH2j/wAW/wA4OTpPrfR+cC7R82fnT5Mu&#xA;NF8zTarChOmas5mWQdEnbeVG+Zqw9j7HO/7B1wzYRA/XDb4dC6vVYuGV9C87zeuMyPyx+YPmvy0Q&#xA;umXrC1Bq1nL+8gPj8B+zXuVocwNX2bh1H1x37+rZjzSjyL1/yn+fehagyW2vQnS7lqD6ytZLdj7/&#xA;ALcf01Hic5fW+zmSG+I8Y7uv6j9jm49WD9Wz1GCeCeFJoJFlhkAaOVCGVlPQqw2IznJRMTRFFzAb&#xA;VMirsVdirsVdirW5ZVVSzsaKigsxNK7AVJ2GW4sM8kuGAuSCQNyzDTYTBp9tEU4Mkah12qGp8Vad&#xA;69c9R02PgxxjVUA6bJK5EonLmDsVdirsVSzWtFj1CPmlFuVHFWJIUitaNSvTqp7H7s1+v7PjnF7c&#xA;YBq/Pvb8OYw9zGmSRHeOQAPGzI3EkrVTQ0JCn8M871WnOHIYE2Yu0jKxbsx2TsVdirsVdirsVdir&#xA;sVdirsVQ2p/8c27/AOMMn/ETluD64+8IlyfGOerujekfkH/ynh/5g5v1pmh9o/8AFv8AODk6T630&#xA;fnAu0QmqaVp2q2MthqNulzaTDjJDIKg+47gjsRuMtw5p4pCUDUgiUQRReHecfyD1W0d7ry1J9ete&#xA;v1KVgs6eysaI4H0H552Gh9o4S2zDhl39P2OvyaQj6Xll/p1/p9y1rf28lrcp9qGZCjD6GAzo8eSM&#xA;xcSCPJxDEjmh8sQzf8tvzL1HypfxwTu0+hTNS5tTv6dessXgw7j9r7iNR2p2VDUxsbZByP6D+Nm/&#xA;BnMD5Pp2GaKeGOaFxJFKoeN1NQysKgg+BGeeSiYkg8w7YFfkVa8NiSSAAASSSaAADqTkoQMiIxFk&#xA;qSiINP1Cd+EdtIppUtKrRKPpYD8Bm1wdh6nIa4eH3tMtRAdUXb+Xb6WRfX4wwV+MBqyEdwOOwr48&#xA;s2ek9mp8QOUjh7h1aZ6uNbc07tNJsLSX1YIuMnHjyLM5oaVA5E+GdRg0OHCbhERLhTyykKJReZTW&#xA;7FXYq7FXYq7FWDy81vLqNiXKSuDIy8CzFiW2qfvzzbtfGI55b2bN7U7nEbiHZrGx2KuxV2KuxV2K&#xA;uxV2KuxV2KobU/8Ajm3f/GGT/iJy3B9cfeES5PjHPV3RvSPyD/5Tw/8AMHN+tM0PtH/i3+cHJ0n1&#xA;vo/OBdoo3V5aWcJmu547eEEAyysqLVjQDkxA3OThjlM1EEnyQSBzVsglLta8v6JrlqbXVrOK8hPQ&#xA;SD4l90cUZT7qRl+n1WTDLihIxLGUBIUXz3+a/wCWcflKaC90+RpdJvGMarJu8UoHLgWp8QYVKnrs&#xA;a+J7nsbtb8yDGQqcftDrdRg4Nxyee5vHGfT/AOTOpyX/AOX2n+qS0loZLYsf5Y3PAfQhUZ5529iE&#xA;NVKv4qP4+LtdNK4BnGaZyEVpMPrapboV5KhMrjwCDY/Q5XN32Bg49SDW0d/1fa0amVQLLs9BdS7F&#xA;XYq7FXYq7FXYq7FXYqxHWbUwatJxcmOVBKVahPJ2au9AaDjQDOE9osEYZrHOe/N2mlncPchc55yX&#xA;Yq7FXYq7FXYq7FUs8xeYdL8vaVLqmpuyWsNAeCl2LNsqgDuTtvtmRpdLPPMQhzLCcxEWXgHnf86P&#xA;MGv+pZ6aW0vSmqpSNv38inb95IOgP8q/I1zt+z+wsWCpS9c/sHuH4+DrsuqlLYbBl/5V/m/pSaRD&#xA;ovmO5+rXFoojtb2SpSSIfZV2FeLINqnYj3zV9sdiTOQ5MQsS5jzbtPqRVSZB56/NjypY6Bew6dqE&#xA;V/qVxE8NtHbN6gVnUrzZ1qoC1r1qcwuzuxs88sTOJjAGzf3U25dRERNGy+a8751b1X/nHjTnm80X&#xA;9+VJitLQx8uwkmkXj/wsbZzftNlrBGPWUvuH9jl6OPqJeqfmT54uPKGipewWLXks7mGNyaQxvSoM&#xA;lPi37AdfEZzfZXZ41WQxMuEDfzPuczPl4BdPm/zN5v8AMHmW7+s6vdtNxJMUA+GKMHsiDYfPqe5z&#xA;vdLosWCNYxX3n3l1c8kpHd6l+XH53WsFlDpPmh3UwgR2+pgFwUAoFmAq1R05AGvfxPO9qdgGUjkw&#xA;9ecf1fqcvDqhVSel/wDKw/Iv1b6x+nrH0wK8fXTn/wAi68/wzn/5L1PFXhy+X6eTleNDvDxn85Pz&#xA;K0zzKttpGjlpbC1lM810ylRJKFKLwU0biqs25619t+r7D7Knp7nk+oiq7g4OpziWw5PL86JxX07+&#xA;SunSWX5fWBkBDXby3HE9ldyF+9VBzz3t/KJ6qVfwgB2uljUAzrNK5DcckkUqTRHjLGeSN29waEbH&#xA;ocydJqp4MgnHmPtYziJCiyrSNQa+tTI4CyxsY5QoIXkAGqK16qwz0Ts3WjU4hOqPI+91ObFwSpG5&#xA;ntTsVdirsVdirsVdirsVY15khCahFKKfv4ipHesTdfuk/DOP9qMO8J/B2GjlsQlmcm5rsVdirsVd&#xA;irsVdiqD1jSbHV9MudMvo/UtLtDHKveh6EHsVO4PY5bgzyxTE4/VFjKIkKL5Z88eQ9Z8p6i0F3G0&#xA;li7H6pfqD6ci9QCf2Xp1X+G+ej6DtHHqYXH6uo6j9jqcuEwO7Gs2DU7FURYWF7qF5FZ2UL3F1MwW&#xA;KGMcmYnIZMkYRMpGgEgEmg+ofyz8kr5T8urazcX1K5b1r+RdxzpRUU/yoNvnU98867W7Q/M5bH0D&#xA;Yfr+LtsGLgjXVkOs6RYaxplxpmoRCW0ukKSJ39iD2ZTuD45g4M8sUxOJqQbJREhRfM3n38s9c8qX&#xA;TyFGutHZv3F+gqAD0WUD7Dfge2eg9ndq49THun1H6u91WbAYe5h2bVpdirsVZp+Xf5a6r5rv45ZI&#xA;3g0SJx9avCKcgOscVftMfHovfsDqe0+1YaaNc8h5D9J8vvb8OAzPk+n7e3htreK3gQRwQoscUa9F&#xA;RRRQPkBnnc5GRJPMu1ApUyKXYqnvlZawXMldjLwp2+FFNfn8VPozu/ZqFacnvl+p12sPqHuTvOhc&#xA;N2KuxV2KuxV2KuxV2Ksc8zyhru2iDhuCu7xgj4WNApIG+4J65yftPl2hEHvsfjdz9FHmUqzj3Odi&#xA;rsVdirsVdirsVdiqjd2dpeW7213ClxbyCkkMqh0Ye6tUHJwySgbiaPkggHmwTUvyM8g3sjSRQT2J&#xA;bqttLRa+wlEoH0ZucXtDqYCiRL3j9VOPLSQKEt/+cfvI8Thnnv5x/JJLGB/wkSH8ctl7S6g9ID4H&#xA;9aBo4ebM/L3k/wAteXoymkWEdqzCjyirysPBpHLOR7VzU6rXZs5/eSJ+75N8McY8gnOYjN2KrXRJ&#xA;EZHUOjgqysKgg7EEHCCQbCsN1j8n/IOqO0jad9Umc1Mloxh/4QVj/wCFzbYO3NVj24uIf0t/t5/a&#xA;0S00D0SQ/wDOPXknny+t6iBX7Hqw0/5M1/HMv/RNqO6HyP8AxTX+Th5pvpH5M+QNNkEn1Br2VSCr&#xA;XbtINv8AIHGM/SuY2ft7VZBXFw+78WzjpoDozWKKKKNYokWONAFRFACgDoAB0zTykSbPNyF+BXYq&#xA;vtrc3N1DbcuHrMVL9wApY096Lmf2ZpRnzxgeX6mvLPhiSzKCCKCFIYVCRRgKijsBnpcICIAGwDpy&#xA;STZX5JDsVdirsVdirsVdirsVY/5g0xleTUYqFKA3KGtfhovMdei/a9hXOZ7e7K8QHNHmBuO9ztLn&#xA;r0lJ84lz3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVjTRIaM6qfAkDCIkq4Sxno6/eO+T&#xA;OKdXRr3La/K1bRJJJBHEjSyEVCIKmnv2A9ztmRptJkzGsY4mMpiIspxpGkX0d6lxOghSKpCkqzMS&#xA;pX9moA38c6zsXsfLgy+JkobVXNwtRqIyjQT/ADqHBdirsVdirsVdirsVdirsVWyRRyoY5EDo32lY&#xA;Ag/MHBKIIopBpQOmaaetpCf+eaf0yk6bEecY/IMvEl3lo6TpRNTZwE/8Yk/pkTosJ5wj/pQnxZ95&#xA;U20TSiSfq6rXshZF/wCBUgZVLszTE2ccfkkZ597X6B0r/fJ/5GSf81ZD+SdL/qcU/mJ97X+H9J/3&#xA;y3/IyT/mrI/yNpf5g+1P5nJ3rf8ADukf76f/AJGy/wDNWR/kTSfzPtP61/NZO/7nf4d0j/fT/wDI&#xA;2X/mrH+Q9J/M+2X60/msnf8Ac7/Dukf76f8A5Gy/81Y/yHpP5n2y/Wv5rJ3/AHO/w7pH++n/AORs&#xA;v/NWP8h6T+Z9sv1r+ayd/wBzY8vaSP8AdTf8jZT/AMbYR2LpP5g+39aPzOTvb/w/pP8Avlv+Rkn/&#xA;ADVh/kbS/wAwfb+tfzOTva/w/pP++W/5GS/81Y/yNpf5g+39a/mcneu/QOlf75P/AAcn/NWS/knS&#xA;/wCpxR+Yn3t/oPS/98/8O/8AzVkv5K03+px+S/mJ968aPpQFPqcJ92jVifmSCTlg0GACuCH+lDHx&#xA;p95b/RWl0p9Tgp/xjT+mT/KYv5kfkEeLLvK4adp4NRaw1/4xr/TJjBjH8I+S+JLvKtFDFEvGJFjX&#xA;rxUACv0ZZGIHJiSS1PBFPC8Mq8o5AVZT4HBOAkCDyKgkGwxPVLB9PuOJ5NbyECGU7703ViqqoNen&#xA;jnA9sdknTy4oD9393vdrgzcY35o/yuxE12nEEERuX7gnkAte42J9t/HNv7MTJhMVsCN3H1o5FkGd&#xA;S4LsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVU&#xA;b2zgvLZ7ecExvToSCCDUEEdwRlWfDHLAwkLiWUJmJsKGm6TBYeoY5JJGlChmkK1otafZVR+1mNou&#xA;z8WmBEL9Xezy5jPmjczmp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:F77F11740720681183EAF7C875A3B1CF</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F77F11740720681183EAF7C875A3B1CF</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:81841ea2-8387-4583-b564-43118320968e</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:81841ea2-8387-4583-b564-43118320968e</stRef:instanceID>
            <stRef:documentID>uuid:81841ea2-8387-4583-b564-43118320968e</stRef:documentID>
            <stRef:originalDocumentID>uuid:81841ea2-8387-4583-b564-43118320968e</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681183EAF7C875A3B1CF</stEvt:instanceID>
                  <stEvt:when>2011-10-18T16:46:10-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1297.000000</stDim:w>
            <stDim:h>1296.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 612 li
791.996 612 li
791.996 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
6.72021 604.894 mo
6.72021 9.12109 li
786.236 9.12109 li
786.236 604.894 li
6.72021 604.894 li
cp
clp
42.2397 110.177 mo
42 110.417 li
41.7598 110.417 li
41.2798 110.177 li
40.7998 109.697 li
39.8398 108.977 li
39.3599 108.977 li
39.1201 108.737 li
38.8799 108.017 li
39.3599 107.537 li
39.3599 107.777 li
39.6001 107.777 li
39.8398 107.297 li
39.8398 105.376 li
39.8398 104.896 li
39.8398 104.656 li
39.6001 104.656 li
39.6001 104.416 li
39.6001 104.176 li
40.5596 104.176 li
40.5596 104.416 li
40.7998 104.416 li
40.7998 104.656 li
41.04 104.656 li
41.04 104.896 li
41.52 104.896 li
42.4795 104.896 li
42.7197 105.136 li
42.9595 105.136 li
43.1997 105.136 li
44.1597 104.896 li
45.1201 104.176 li
45.3599 104.176 li
45.6001 103.456 li
45.6001 103.216 li
45.6001 102.976 li
45.8398 102.736 li
45.8398 102.256 li
45.6001 101.776 li
45.1201 99.8555 li
44.8799 98.6553 li
45.3599 98.415 li
45.6001 97.6953 li
45.8398 97.4551 li
46.0796 97.2148 li
46.0796 96.9751 li
46.3198 96.9751 li
46.0796 96.9751 li
46.0796 96.2549 li
46.0796 94.8145 li
46.0796 93.8545 li
46.5596 93.3745 li
46.5596 93.1343 li
46.7998 92.8945 li
46.7998 92.6543 li
46.7998 91.2144 li
46.5596 90.9741 li
46.5596 90.4941 li
46.5596 89.7739 li
46.3198 89.5337 li
45.8398 89.2939 li
45.8398 89.5337 li
45.6001 89.5337 li
45.1201 89.7739 li
43.4395 88.334 li
43.1997 88.334 li
42.9595 87.8535 li
42.7197 87.8535 li
42.2397 86.8936 li
41.7598 86.1733 li
41.04 85.9336 li
41.52 85.2134 li
41.52 84.9731 li
41.52 84.7334 li
41.52 84.4932 li
41.52 84.2529 li
41.04 84.0132 li
40.7998 84.0132 li
40.3198 83.7729 li
40.0796 83.7729 li
39.6001 84.0132 li
39.3599 83.7729 li
39.1201 83.7729 li
38.8799 83.5332 li
38.1597 81.3726 li
38.1597 81.1328 li
37.9199 80.8926 li
38.3999 79.9326 li
39.6001 78.9722 li
39.8398 78.7324 li
40.0796 78.252 li
40.0796 78.0122 li
40.0796 76.812 li
40.5596 76.332 li
40.3198 75.1318 li
40.0796 74.8916 li
39.6001 74.4116 li
39.1201 74.4116 li
38.8799 74.1714 li
38.6401 74.1714 li
38.6401 73.4512 li
39.6001 73.4512 li
46.3198 73.6914 li
54.9595 73.9316 li
55.6797 73.9316 li
66.2397 74.4116 li
68.3999 74.4116 li
68.6396 74.4116 li
72.7197 74.6514 li
74.8794 74.6514 li
77.2793 74.6514 li
81.5996 74.8916 li
82.0796 74.8916 li
83.0396 74.8916 li
83.2793 74.8916 li
86.1597 74.8916 li
94.5596 75.1318 li
99.3594 75.3716 li
103.2 75.6118 li
105.6 75.6118 li
107.52 75.6118 li
112.56 75.8516 li
120.72 76.0918 li
123.6 76.0918 li
125.039 76.0918 li
125.759 76.0918 li
133.919 76.332 li
139.199 76.5718 li
140.159 76.5718 li
144.239 76.5718 li
144.719 76.5718 li
147.12 76.812 li
152.399 76.812 li
159.119 77.0518 li
160.079 77.0518 li
162.239 77.0518 li
163.439 77.0518 li
165.839 77.0518 li
168 77.0518 li
173.279 77.292 li
174.479 77.292 li
174.719 77.292 li
179.039 77.292 li
180.239 77.292 li
186.479 77.5322 li
188.399 77.5322 li
189.119 77.5322 li
192.479 77.5322 li
196.079 77.772 li
196.319 77.772 li
197.519 77.772 li
197.759 77.772 li
198.959 77.772 li
199.439 77.772 li
202.559 77.772 li
203.519 77.772 li
205.919 77.772 li
210.239 78.0122 li
212.399 78.0122 li
212.639 78.0122 li
214.559 78.0122 li
216.959 78.0122 li
219.119 78.0122 li
221.279 78.252 li
223.439 78.252 li
225.599 78.252 li
225.839 78.252 li
228.719 78.252 li
230.159 78.252 li
230.399 78.252 li
231.839 78.252 li
232.079 78.252 li
232.319 78.252 li
233.519 78.252 li
233.999 78.252 li
238.799 78.4922 li
245.759 78.4922 li
250.319 78.4922 li
251.999 78.4922 li
258.959 78.7324 li
259.199 78.7324 li
264.479 78.7324 li
264.959 78.7324 li
272.639 78.9722 li
275.039 78.9722 li
277.679 78.9722 li
278.159 78.9722 li
283.918 78.9722 li
285.358 78.9722 li
286.319 78.9722 li
291.358 79.2124 li
299.759 79.2124 li
304.318 79.2124 li
310.798 79.2124 li
313.199 79.2124 li
315.119 79.2124 li
315.358 79.2124 li
316.318 79.2124 li
316.798 79.2124 li
317.039 79.2124 li
317.519 79.2124 li
318.718 79.4521 li
319.679 79.4521 li
326.398 79.4521 li
330.479 79.4521 li
339.599 79.4521 li
343.678 79.6924 li
349.918 79.6924 li
350.158 79.6924 li
353.038 79.6924 li
356.878 79.6924 li
358.798 79.6924 li
359.758 79.6924 li
359.998 79.6924 li
360.718 79.6924 li
366.238 79.6924 li
369.838 79.6924 li
374.398 79.6924 li
376.318 79.6924 li
379.198 79.6924 li
379.678 79.6924 li
383.038 79.6924 li
384.238 79.6924 li
384.718 79.6924 li
385.198 79.6924 li
385.918 79.6924 li
386.398 79.6924 li
390.718 79.6924 li
392.878 79.6924 li
394.078 79.6924 li
396.238 79.6924 li
399.118 79.6924 li
405.118 79.6924 li
406.318 79.6924 li
408.238 79.6924 li
409.438 79.6924 li
413.038 79.6924 li
413.277 79.6924 li
415.918 79.6924 li
419.519 79.6924 li
421.678 79.4521 li
422.639 79.4521 li
427.198 79.4521 li
432.958 79.4521 li
435.598 79.4521 li
437.519 79.4521 li
440.638 79.4521 li
443.998 79.4521 li
446.157 79.4521 li
447.357 79.4521 li
448.798 79.4521 li
449.038 79.4521 li
450.479 79.4521 li
452.878 79.4521 li
457.198 79.4521 li
459.357 79.4521 li
459.598 79.4521 li
461.758 79.2124 li
465.838 79.2124 li
470.878 79.2124 li
472.558 79.2124 li
472.798 79.2124 li
474.718 79.2124 li
476.878 79.2124 li
477.357 79.2124 li
486.238 78.9722 li
487.918 78.9722 li
489.598 78.9722 li
497.758 78.7324 li
499.438 78.7324 li
501.117 78.7324 li
503.998 78.7324 li
504.238 78.7324 li
506.397 78.7324 li
507.598 78.7324 li
508.317 78.7324 li
509.998 78.7324 li
512.638 78.7324 li
512.877 78.7324 li
514.317 78.7324 li
515.037 78.4922 li
518.397 78.4922 li
518.638 78.4922 li
526.077 78.4922 li
527.277 78.4922 li
529.438 78.252 li
537.838 78.252 li
539.518 78.252 li
540.478 78.252 li
548.397 78.0122 li
551.998 78.0122 li
552.717 78.0122 li
552.957 78.0122 li
554.877 78.0122 li
555.838 78.0122 li
563.757 77.772 li
565.918 77.772 li
566.157 77.772 li
568.797 77.772 li
570.717 77.772 li
570.957 77.5322 li
572.637 77.5322 li
573.838 77.5322 li
574.077 77.5322 li
575.997 77.5322 li
578.397 77.5322 li
578.637 77.5322 li
579.117 77.5322 li
579.357 77.5322 li
582.717 77.5322 li
585.838 77.292 li
587.277 77.292 li
587.997 77.292 li
588.717 77.292 li
589.438 77.292 li
589.917 77.292 li
590.877 77.292 li
591.598 77.292 li
591.838 77.292 li
592.077 77.292 li
592.557 77.292 li
594.717 77.292 li
599.277 77.0518 li
600.237 77.0518 li
601.197 77.0518 li
605.997 76.812 li
608.877 76.812 li
609.117 76.812 li
611.037 76.812 li
611.277 76.812 li
616.316 76.5718 li
618.478 76.5718 li
619.197 76.5718 li
619.438 76.5718 li
628.077 76.332 li
629.037 76.332 li
631.438 76.332 li
632.157 76.332 li
633.117 76.332 li
636.236 76.0918 li
636.236 76.5718 li
636.236 77.0518 li
636.236 77.5322 li
636.478 78.4922 li
636.478 79.2124 li
635.997 80.6523 li
635.518 81.6128 li
635.037 82.0928 li
635.037 82.333 li
634.797 82.333 li
634.797 82.813 li
634.797 83.0527 li
634.797 83.7729 li
635.277 84.4932 li
636.957 86.6533 li
637.438 87.3735 li
637.677 87.6138 li
637.917 87.8535 li
637.917 88.0938 li
638.157 88.334 li
638.397 89.0537 li
638.637 89.5337 li
638.637 90.2539 li
638.637 90.9741 li
638.877 91.4541 li
638.877 92.1743 li
638.877 92.8945 li
638.637 93.6143 li
638.157 94.5747 li
638.157 95.2949 li
637.917 95.5347 li
637.438 96.0146 li
637.197 96.0146 li
637.197 96.2549 li
637.197 96.4951 li
637.197 96.7349 li
637.677 97.9351 li
638.157 98.6553 li
638.397 99.1353 li
638.637 99.1353 li
639.356 99.3755 li
640.077 99.3755 li
640.316 99.3755 li
641.037 99.6152 li
641.997 100.335 li
643.917 101.296 li
645.837 102.016 li
646.316 102.256 li
646.797 102.496 li
647.757 103.216 li
647.997 103.456 li
648.236 103.456 li
649.197 104.416 li
651.837 107.537 li
652.557 108.977 li
653.277 110.177 li
653.518 110.657 li
653.518 111.137 li
653.277 111.857 li
653.277 112.097 li
653.518 112.337 li
653.757 112.337 li
654.478 112.337 li
654.717 112.578 li
654.957 112.817 li
654.957 113.058 li
654.957 113.297 li
654.957 114.018 li
654.717 114.738 li
654.478 114.978 li
654.236 115.458 li
653.518 116.178 li
652.797 117.378 li
651.837 118.338 li
649.677 120.739 li
649.438 120.739 li
648.957 121.219 li
648.478 121.699 li
648.236 122.179 li
647.997 122.659 li
647.997 123.619 li
646.797 125.779 li
646.316 126.26 li
646.077 127.46 li
645.837 128.42 li
645.597 128.9 li
645.597 129.14 li
644.637 130.58 li
644.156 130.82 li
642.957 131.3 li
642.478 131.78 li
642.236 132.261 li
642.236 132.741 li
642.236 133.221 li
642.236 134.181 li
642.478 136.581 li
642.478 140.182 li
642.478 141.142 li
642.236 141.622 li
642.236 142.102 li
642.478 142.582 li
642.478 142.822 li
642.717 144.502 li
642.717 144.982 li
642.717 145.703 li
642.957 146.423 li
642.957 146.663 li
643.197 147.863 li
643.677 149.303 li
643.677 149.543 li
645.117 153.624 li
645.117 154.104 li
645.117 155.544 li
645.356 156.024 li
645.837 156.744 li
646.316 157.464 li
646.316 157.705 li
646.316 157.944 li
646.316 158.185 li
646.557 158.425 li
646.557 158.665 li
646.557 158.905 li
646.077 160.345 li
646.077 161.065 li
646.077 161.305 li
646.557 162.745 li
646.557 162.985 li
646.797 163.465 li
646.797 163.945 li
646.797 164.425 li
646.557 165.146 li
646.557 165.625 li
646.557 166.106 li
646.797 166.346 li
646.797 166.586 li
647.037 166.826 li
647.518 166.826 li
648.478 167.306 li
649.917 168.026 li
650.156 168.266 li
650.637 168.746 li
651.356 169.466 li
651.837 169.946 li
652.077 171.146 li
652.077 172.827 li
652.316 173.547 li
652.557 174.267 li
653.037 174.747 li
653.037 174.987 li
653.037 175.227 li
652.797 175.947 li
652.557 177.388 li
652.797 177.868 li
653.037 178.107 li
653.277 178.107 li
653.997 178.107 li
654.478 178.348 li
654.478 179.548 li
654.717 181.468 li
654.717 181.708 li
654.957 183.148 li
655.438 184.349 li
655.677 185.069 li
655.677 186.269 li
655.677 186.989 li
655.917 187.229 li
656.156 187.469 li
656.637 187.949 li
656.877 188.429 li
656.877 188.669 li
656.877 188.909 li
656.637 189.149 li
656.397 189.149 li
656.397 189.629 li
656.397 189.87 li
656.397 190.109 li
656.877 190.109 li
657.117 190.35 li
657.356 190.589 li
657.597 190.83 li
657.597 191.55 li
657.837 192.03 li
658.076 192.03 li
658.316 192.03 li
658.557 192.03 li
658.797 191.79 li
659.277 191.79 li
659.517 191.79 li
659.517 192.03 li
659.757 192.03 li
659.997 192.03 li
659.997 192.27 li
660.236 192.51 li
660.236 192.75 li
660.236 193.23 li
660.478 193.47 li
660.717 193.95 li
661.917 194.67 li
662.156 194.67 li
662.877 194.43 li
663.837 195.15 li
664.316 195.39 li
665.277 196.11 li
666.236 197.791 li
666.477 198.031 li
666.957 198.271 li
667.917 198.511 li
669.117 199.231 li
669.356 199.471 li
669.597 199.711 li
670.557 199.951 li
671.036 199.951 li
671.997 199.711 li
672.477 199.471 li
672.957 199.471 li
673.677 199.951 li
675.117 200.911 li
675.356 200.911 li
675.597 200.911 li
676.076 201.151 li
676.797 201.391 li
677.277 201.391 li
677.517 201.631 li
678.957 201.871 li
680.637 202.352 li
681.597 202.591 li
683.036 202.832 li
685.917 203.552 li
686.877 203.552 li
688.076 203.792 li
688.797 204.032 li
689.036 204.032 li
689.996 204.271 li
690.956 204.512 li
691.197 204.512 li
692.156 204.752 li
693.117 204.992 li
694.316 205.232 li
695.757 205.712 li
696.956 206.192 li
696.956 206.432 li
697.197 206.672 li
697.677 207.152 li
697.916 207.872 li
697.916 208.353 li
698.637 209.553 li
698.877 210.272 li
699.117 210.513 li
699.597 211.953 li
699.597 212.673 li
699.597 212.913 li
699.837 213.393 li
700.557 214.593 li
700.797 214.833 li
701.036 215.073 li
701.277 215.313 li
702.717 216.514 li
702.956 217.954 li
703.677 219.154 li
704.637 220.114 li
704.877 220.594 li
705.117 221.794 li
705.117 222.035 li
705.117 222.515 li
705.356 222.995 li
705.597 223.955 li
705.597 224.675 li
705.356 225.635 li
704.396 227.075 li
703.677 228.035 li
703.677 228.516 li
703.677 229.476 li
703.916 230.196 li
704.877 231.156 li
705.356 231.636 li
705.597 231.636 li
707.276 233.076 li
709.437 234.036 li
711.356 234.517 li
711.836 234.997 li
712.316 234.997 li
713.517 235.477 li
713.757 235.717 li
714.236 235.957 li
714.717 236.677 li
714.956 237.397 li
714.956 238.597 li
715.197 238.837 li
715.437 239.317 li
716.156 239.797 li
719.757 241.237 li
720.956 241.717 li
721.197 241.958 li
721.437 241.958 li
721.677 242.198 li
722.156 242.678 li
722.877 243.398 li
723.356 243.638 li
723.597 243.878 li
724.076 243.878 li
724.316 243.878 li
724.797 244.118 li
724.797 244.358 li
725.276 244.598 li
725.276 245.078 li
725.517 245.318 li
725.756 246.038 li
725.996 246.038 li
725.996 246.278 li
726.477 246.758 li
727.196 247.479 li
727.916 247.958 li
728.156 247.958 li
728.396 248.199 li
728.637 248.679 li
729.836 250.839 li
730.076 251.079 li
730.557 251.559 li
731.036 251.799 li
731.276 252.039 li
731.517 252.519 li
731.517 252.999 li
731.517 253.239 li
731.517 253.479 li
731.276 253.719 li
731.036 253.959 li
731.276 254.68 li
731.276 255.64 li
731.036 256.6 li
730.797 257.32 li
730.797 257.56 li
730.557 257.8 li
730.316 258.52 li
730.076 258.76 li
730.076 259 li
730.076 259.72 li
730.797 261.161 li
731.036 261.641 li
731.276 262.361 li
731.276 262.601 li
731.517 263.321 li
731.756 263.321 li
731.756 263.561 li
731.996 263.801 li
732.717 264.281 li
733.916 265.721 li
734.396 266.441 li
734.396 267.162 li
734.637 267.162 li
734.877 267.642 li
736.797 269.322 li
737.996 269.802 li
738.477 270.282 li
738.956 270.522 li
741.116 270.762 li
742.316 271.242 li
743.517 272.202 li
743.756 272.202 li
744.717 272.682 li
745.196 272.922 li
745.676 273.163 li
745.916 273.163 li
747.597 274.363 li
749.036 274.843 li
750.717 275.323 li
751.196 275.323 li
752.877 276.283 li
754.316 277.003 li
755.276 277.483 li
755.996 277.963 li
756.236 278.443 li
756.236 279.163 li
756.477 280.124 li
756.956 281.324 li
757.437 281.804 li
757.676 281.804 li
758.156 282.044 li
758.636 282.044 li
760.557 282.044 li
760.797 282.524 li
761.036 282.524 li
761.517 283.244 li
761.517 283.724 li
761.517 284.444 li
761.756 284.684 li
761.756 284.924 li
761.756 285.404 li
761.756 285.645 li
761.756 285.884 li
761.756 286.125 li
761.517 286.604 li
761.517 286.845 li
761.517 287.325 li
761.517 287.564 li
761.517 287.805 li
761.036 289.485 li
761.036 289.725 li
761.517 291.405 li
761.517 291.646 li
761.517 292.845 li
761.517 293.326 li
761.756 294.766 li
761.756 295.006 li
762.236 295.246 li
762.956 295.966 li
763.196 296.446 li
763.437 296.926 li
763.437 297.646 li
763.676 297.646 li
763.676 297.886 li
763.676 298.126 li
763.916 298.366 li
764.156 298.606 li
764.396 299.086 li
764.636 299.566 li
764.636 300.527 li
764.636 301.487 li
764.156 302.687 li
764.156 303.887 li
763.916 304.367 li
763.196 304.847 li
763.196 305.087 li
762.956 306.047 li
762.477 307.008 li
762.236 307.728 li
762.236 308.928 li
762.236 309.408 li
762.717 310.128 li
763.196 310.368 li
763.437 310.848 li
763.676 311.328 li
763.916 311.568 li
763.676 311.809 li
763.676 313.969 li
763.676 314.689 li
763.676 314.929 li
763.676 315.169 li
763.676 315.409 li
763.437 316.609 li
762.477 318.77 li
762.477 319.01 li
762.236 319.729 li
761.996 319.97 li
761.996 320.689 li
761.756 320.93 li
761.756 321.17 li
761.756 321.41 li
761.756 321.65 li
761.756 322.85 li
761.517 323.33 li
761.276 324.051 li
761.276 324.29 li
761.036 324.53 li
760.797 324.771 li
760.797 325.011 li
760.797 325.251 li
760.797 325.971 li
760.797 326.21 li
760.797 326.691 li
760.797 327.171 li
761.036 328.131 li
761.276 329.811 li
761.276 330.291 li
761.036 330.531 li
760.316 331.252 li
758.636 331.972 li
758.396 331.972 li
758.156 331.972 li
757.916 332.211 li
757.196 332.452 li
756.477 332.932 li
754.316 334.372 li
753.597 334.853 li
753.597 335.092 li
752.396 335.812 li
751.916 336.292 li
750.236 337.012 li
749.996 337.252 li
747.597 339.652 li
746.877 340.853 li
746.637 341.093 li
746.396 342.293 li
746.156 343.014 li
746.156 343.973 li
746.156 344.693 li
746.637 345.894 li
746.637 346.134 li
746.637 346.373 li
746.637 346.854 li
746.637 347.094 li
746.637 347.573 li
746.637 347.814 li
746.637 348.055 li
746.637 348.294 li
746.396 348.294 li
746.396 348.534 li
746.396 348.773 li
746.156 348.773 li
745.916 349.015 li
744.956 349.975 li
744.717 350.215 li
744.477 350.215 li
744.477 350.455 li
744.477 350.694 li
744.236 351.174 li
744.236 351.895 li
744.236 352.854 li
743.996 354.055 li
743.996 354.295 li
743.517 355.495 li
743.517 355.735 li
743.517 355.975 li
743.517 356.455 li
743.996 359.336 li
743.996 360.536 li
743.996 361.016 li
744.236 362.937 li
744.236 363.177 li
744.236 363.896 li
743.996 364.137 li
743.996 364.617 li
743.036 365.097 li
741.597 366.057 li
740.877 366.057 li
739.916 366.297 li
739.676 366.537 li
737.756 367.257 li
736.797 367.736 li
736.076 368.218 li
736.076 368.457 li
735.836 368.697 li
735.356 369.657 li
735.117 370.137 li
734.877 370.137 li
734.637 370.377 li
734.396 370.377 li
733.916 370.857 li
733.677 371.098 li
733.196 371.577 li
732.717 372.538 li
732.477 373.019 li
732.236 373.258 li
731.996 373.258 li
731.756 373.738 li
730.797 374.938 li
729.356 375.419 li
728.877 375.658 li
727.437 375.898 li
726.477 375.898 li
726.236 375.898 li
725.996 375.898 li
724.797 375.658 li
722.637 374.938 li
722.156 374.938 li
721.677 374.698 li
721.197 374.938 li
719.996 375.178 li
719.757 375.419 li
719.517 375.419 li
718.797 376.139 li
718.557 376.139 li
718.316 376.378 li
718.076 376.378 li
717.597 376.619 li
717.117 376.619 li
716.877 376.619 li
716.637 376.858 li
716.156 376.858 li
715.916 377.099 li
715.437 377.339 li
714.717 378.059 li
714.477 379.499 li
714.236 379.979 li
713.996 380.219 li
713.036 381.419 li
711.597 382.14 li
711.597 382.38 li
711.356 382.38 li
710.637 383.34 li
709.437 384.54 li
708.717 385.02 li
707.517 385.26 li
707.276 385.26 li
706.316 385.26 li
704.877 385.98 li
703.677 386.22 li
701.036 386.7 li
699.597 387.181 li
698.156 387.181 li
695.517 387.181 li
694.797 387.181 li
694.557 386.939 li
694.316 386.939 li
693.837 386.939 li
691.437 386.7 li
689.517 386.7 li
688.076 386.7 li
687.597 386.7 li
687.117 386.7 li
686.877 386.7 li
686.156 386.939 li
685.677 387.181 li
685.437 387.42 li
685.197 387.42 li
684.717 387.9 li
684.236 388.14 li
683.996 388.381 li
683.277 389.101 li
682.076 389.82 li
681.837 390.061 li
681.117 390.54 li
680.877 390.54 li
680.156 391.021 li
678.717 391.501 li
678.236 391.981 li
677.996 391.981 li
677.757 392.221 li
677.517 392.221 li
675.356 391.74 li
674.877 391.74 li
673.438 391.021 li
672.477 390.54 li
672.236 390.301 li
671.997 390.301 li
671.757 390.301 li
671.517 390.301 li
671.277 390.54 li
671.036 390.54 li
670.797 390.781 li
670.557 390.781 li
668.877 391.74 li
668.397 391.74 li
668.156 391.981 li
667.197 391.981 li
666.236 392.221 li
665.517 392.701 li
665.277 392.701 li
665.037 392.94 li
664.557 393.421 li
664.316 393.661 li
664.076 394.141 li
664.076 395.102 li
663.837 395.821 li
663.837 397.021 li
663.837 397.742 li
663.837 397.981 li
663.837 398.222 li
663.356 398.942 li
663.117 398.942 li
662.637 399.902 li
662.397 400.622 li
662.156 400.622 li
662.156 400.862 li
662.156 401.103 li
661.917 402.063 li
661.677 405.183 li
661.677 405.902 li
661.677 406.144 li
661.677 409.023 li
661.438 410.224 li
661.197 410.943 li
659.997 412.144 li
659.517 413.104 li
659.517 413.344 li
658.557 416.225 li
658.316 416.944 li
657.597 417.905 li
657.117 418.865 li
657.117 419.585 li
657.356 420.306 li
657.356 420.545 li
657.837 421.025 li
658.797 421.746 li
659.757 422.945 li
660.957 424.146 li
662.156 425.347 li
662.877 426.307 li
663.597 427.506 li
663.837 427.986 li
664.316 428.467 li
665.757 431.347 li
667.197 431.827 li
667.438 431.827 li
668.877 431.347 li
669.117 431.347 li
669.356 431.347 li
669.597 431.347 li
669.837 431.347 li
670.316 431.587 li
670.797 431.827 li
671.277 432.067 li
671.517 432.307 li
671.517 432.547 li
671.997 432.787 li
671.997 433.027 li
672.477 433.987 li
672.717 434.228 li
672.717 434.468 li
672.957 434.707 li
672.957 434.947 li
673.197 435.428 li
674.156 436.628 li
674.877 438.309 li
675.356 439.028 li
675.837 439.508 li
676.557 440.948 li
676.797 441.429 li
677.036 441.669 li
677.277 441.909 li
677.036 443.349 li
677.036 443.589 li
676.797 445.269 li
677.036 445.749 li
677.277 446.949 li
677.517 448.39 li
677.757 449.11 li
677.757 450.55 li
677.996 451.03 li
677.757 451.99 li
677.517 453.431 li
677.757 454.631 li
677.517 455.351 li
677.277 457.271 li
676.557 458.472 li
676.316 459.432 li
676.316 459.911 li
676.797 461.111 li
677.036 462.312 li
677.036 462.792 li
677.036 463.512 li
677.036 463.992 li
676.557 464.952 li
676.557 465.192 li
676.316 466.152 li
676.076 467.832 li
675.837 468.313 li
675.356 468.793 li
674.156 469.513 li
673.438 469.993 li
671.997 470.713 li
671.757 470.713 li
671.517 470.953 li
671.277 470.953 li
671.277 471.193 li
671.036 471.434 li
670.797 471.673 li
670.557 471.913 li
670.557 472.153 li
670.316 472.394 li
670.316 472.633 li
670.076 472.873 li
669.837 473.354 li
669.356 474.313 li
668.877 475.034 li
668.637 475.034 li
667.677 475.754 li
667.438 475.994 li
667.197 476.234 li
666.957 476.474 li
666.717 476.714 li
666.477 477.435 li
666.236 478.394 li
665.517 479.835 li
665.277 480.314 li
664.316 480.794 li
663.117 482.235 li
661.677 483.675 li
661.677 483.915 li
661.438 484.155 li
661.438 484.395 li
661.197 485.355 li
660.957 485.595 li
660.957 485.835 li
660.957 486.075 li
660.957 486.556 li
660.957 486.795 li
660.957 487.035 li
661.197 487.756 li
661.438 488.235 li
661.677 488.476 li
661.677 488.716 li
661.677 488.956 li
661.677 489.436 li
661.677 490.156 li
661.677 490.396 li
661.677 490.636 li
661.438 491.356 li
661.438 491.597 li
661.197 492.316 li
660.957 493.036 li
660.478 493.997 li
660.236 494.477 li
659.997 494.957 li
659.757 495.677 li
659.277 498.077 li
659.277 498.798 li
659.277 499.277 li
659.277 499.518 li
659.517 499.757 li
659.757 501.438 li
659.757 502.157 li
659.757 503.118 li
659.277 503.839 li
659.037 506.479 li
658.797 506.959 li
658.557 507.198 li
658.557 507.439 li
656.877 508.64 li
654.957 509.839 li
654.478 510.319 li
651.356 512.479 li
650.877 512.479 li
650.637 512.479 li
650.397 512.72 li
649.917 512.72 li
647.518 512.479 li
646.557 512.479 li
644.156 512.479 li
643.677 512.479 li
643.438 512.72 li
643.197 512.72 li
642.957 512.72 li
642.717 512.96 li
642.236 513.199 li
641.997 513.199 li
641.037 513.439 li
638.637 514.16 li
638.157 514.16 li
637.438 514.4 li
637.438 514.64 li
637.197 514.64 li
635.518 515.601 li
634.316 516.08 li
633.598 516.561 li
633.356 516.561 li
632.637 517.04 li
631.917 517.521 li
631.917 517.761 li
631.438 518.48 li
630.717 519.44 li
630.717 519.681 li
629.757 521.36 li
629.037 522.561 li
628.797 522.802 li
628.077 523.521 li
626.637 524.961 li
626.157 525.682 li
626.157 526.161 li
626.157 526.882 li
626.157 527.603 li
626.397 528.082 li
626.877 528.322 li
627.598 528.802 li
628.316 529.042 li
628.797 529.282 li
629.037 529.762 li
629.518 530.482 li
630.717 531.923 li
630.717 532.163 li
630.717 532.402 li
630.957 532.643 li
630.957 532.883 li
631.197 533.843 li
631.197 534.083 li
631.197 534.323 li
631.197 534.803 li
631.197 535.283 li
631.197 536.243 li
630.957 537.443 li
630.957 537.684 li
630.717 537.923 li
630.478 538.884 li
630.236 539.364 li
629.997 539.844 li
629.757 540.564 li
629.518 541.284 li
629.518 541.523 li
629.518 542.004 li
629.518 542.244 li
629.277 542.724 li
629.518 543.444 li
629.518 543.685 li
629.518 544.165 li
629.757 544.404 li
629.757 544.645 li
629.997 545.124 li
630.478 546.324 li
630.478 546.564 li
630.478 547.525 li
630.717 548.005 li
630.717 548.485 li
630.717 548.726 li
630.717 548.965 li
630.478 549.205 li
630.236 550.405 li
629.997 550.646 li
629.518 551.126 li
629.037 551.365 li
628.797 551.605 li
628.557 551.605 li
628.316 551.605 li
628.077 551.605 li
627.837 551.846 li
627.356 551.846 li
625.917 552.085 li
625.677 552.085 li
625.197 552.565 li
624.957 552.085 li
624.717 552.085 li
624.478 552.085 li
623.757 551.846 li
623.277 551.605 li
623.037 551.605 li
622.557 551.365 li
621.837 552.565 li
621.598 552.806 li
621.356 553.046 li
620.157 553.046 li
619.917 553.046 li
619.917 552.806 li
619.917 552.326 li
619.917 551.605 li
619.197 552.085 li
618.478 552.085 li
618.237 552.326 li
617.997 552.085 li
617.757 551.846 li
616.797 550.405 li
616.797 550.165 li
617.037 549.445 li
617.277 549.205 li
617.277 548.965 li
617.037 548.726 li
616.557 548.965 li
616.557 549.205 li
616.077 549.205 li
615.598 549.205 li
615.117 548.965 li
614.877 548.965 li
614.877 548.726 li
614.637 548.485 li
614.157 548.245 li
613.677 548.245 li
613.197 548.005 li
612.957 548.005 li
612.717 547.525 li
612.478 547.045 li
612.717 546.564 li
613.197 545.604 li
613.438 544.885 li
613.438 544.645 li
613.438 544.404 li
612.717 544.404 li
612.237 544.404 li
611.757 543.924 li
611.757 543.685 li
611.757 543.444 li
611.997 542.965 li
612.478 542.484 li
612.717 542.244 li
612.957 542.004 li
612.957 541.765 li
612.957 541.523 li
612.717 541.044 li
612.717 540.804 li
612.478 540.564 li
612.237 540.564 li
611.997 540.564 li
611.518 540.564 li
610.557 540.804 li
609.356 540.804 li
608.157 540.323 li
607.677 540.084 li
606.957 539.604 li
606.237 538.884 li
605.997 538.644 li
605.997 538.403 li
605.757 537.684 li
605.277 536.483 li
605.037 535.764 li
604.797 535.764 li
604.557 535.283 li
603.837 535.043 li
603.598 534.803 li
602.877 534.563 li
602.397 534.323 li
601.917 533.843 li
601.438 533.603 li
601.197 533.123 li
601.197 532.402 li
601.197 531.923 li
601.438 530.482 li
601.677 529.282 li
601.438 528.562 li
601.438 528.322 li
601.197 528.082 li
600.957 528.082 li
600.717 528.082 li
600.717 527.842 li
599.277 527.603 li
597.357 527.122 li
595.438 526.882 li
594.237 526.642 li
593.277 525.922 li
593.037 525.682 li
593.037 525.202 li
593.037 524.961 li
593.518 523.041 li
593.518 522.802 li
593.518 522.32 li
593.277 522.081 li
592.317 521.36 li
590.397 520.401 li
589.917 519.921 li
589.438 519.44 li
588.478 517.521 li
581.757 518.001 li
580.797 518.001 li
580.317 518.001 li
578.637 518.24 li
577.438 518.24 li
576.478 518.24 li
576.478 518.48 li
572.397 518.721 li
563.997 519.201 li
563.518 519.201 li
563.037 519.201 li
560.397 519.44 li
557.277 519.44 li
553.677 519.681 li
550.797 519.921 li
550.077 519.921 li
549.598 519.921 li
549.357 519.921 li
549.117 519.921 li
548.877 519.921 li
547.438 519.921 li
546.237 520.16 li
545.757 520.16 li
536.157 520.401 li
534.237 520.641 li
533.518 520.641 li
531.838 520.641 li
529.678 520.641 li
528.478 520.641 li
522.957 520.881 li
522.237 520.881 li
518.638 521.121 li
516.237 521.36 li
512.877 521.36 li
509.518 521.602 li
507.357 521.602 li
504.238 521.602 li
503.518 521.602 li
502.077 521.841 li
501.117 521.841 li
500.877 521.841 li
496.317 522.081 li
491.998 522.32 li
489.598 522.32 li
482.878 522.561 li
477.357 522.802 li
476.878 522.802 li
473.998 522.802 li
470.878 523.041 li
470.157 523.041 li
469.438 523.041 li
469.198 523.041 li
460.798 523.041 li
460.077 523.281 li
457.438 523.281 li
456.958 523.281 li
456.718 523.281 li
456.238 523.281 li
455.038 523.281 li
453.598 523.281 li
452.157 523.281 li
447.598 523.281 li
447.357 523.281 li
445.918 523.521 li
443.758 523.521 li
443.038 523.521 li
431.038 524.002 li
430.558 524.002 li
429.598 524.002 li
429.357 524.002 li
425.038 524.241 li
417.118 524.481 li
416.158 524.481 li
410.639 524.481 li
403.918 524.722 li
402.719 524.722 li
400.798 524.722 li
397.438 524.722 li
389.518 524.722 li
386.878 524.722 li
386.638 524.722 li
383.998 524.722 li
381.358 524.722 li
380.398 524.722 li
380.158 524.722 li
379.918 524.722 li
379.678 524.722 li
379.438 524.722 li
379.198 524.722 li
378.958 524.722 li
377.278 524.722 li
376.558 524.722 li
376.318 524.722 li
376.078 524.722 li
375.838 524.722 li
375.358 524.722 li
375.118 524.722 li
371.518 524.722 li
368.398 524.961 li
364.558 524.961 li
364.318 524.961 li
364.078 524.961 li
363.118 524.961 li
362.878 524.961 li
362.158 524.961 li
360.718 524.961 li
356.878 525.202 li
356.398 525.202 li
355.198 525.202 li
354.718 525.202 li
353.999 524.961 li
353.758 524.961 li
351.358 524.961 li
350.878 524.961 li
349.438 525.202 li
346.078 525.202 li
345.838 525.202 li
343.198 525.202 li
341.758 525.202 li
337.678 525.202 li
336.479 525.202 li
336.238 525.202 li
334.798 525.202 li
332.158 525.441 li
331.918 525.441 li
331.678 525.441 li
329.039 525.441 li
327.358 525.441 li
326.158 525.441 li
324.238 525.441 li
323.039 525.441 li
320.878 525.441 li
315.358 525.682 li
314.398 525.682 li
314.159 525.682 li
311.039 525.682 li
310.798 525.682 li
309.599 525.682 li
298.318 525.682 li
298.079 525.682 li
297.838 525.682 li
297.358 525.682 li
296.398 525.682 li
291.358 525.682 li
290.398 525.682 li
288.719 525.682 li
287.039 525.682 li
285.599 525.682 li
284.398 525.682 li
283.199 525.682 li
279.599 525.682 li
277.918 525.441 li
274.799 525.441 li
271.199 525.441 li
269.999 525.441 li
267.839 525.441 li
262.799 525.441 li
262.319 525.441 li
262.079 525.441 li
261.839 525.441 li
261.119 525.441 li
256.559 525.441 li
255.599 525.441 li
251.279 525.202 li
245.519 524.961 li
244.799 524.961 li
244.319 524.961 li
243.599 524.961 li
241.679 524.961 li
241.439 524.961 li
238.079 524.961 li
234.719 524.722 li
231.839 524.722 li
231.599 524.722 li
230.399 524.481 li
229.439 524.481 li
228.959 524.481 li
220.559 524.241 li
220.079 524.241 li
218.399 524.241 li
213.839 524.002 li
212.399 524.002 li
210.719 524.002 li
209.519 524.002 li
205.919 523.761 li
205.439 523.761 li
204.959 523.761 li
203.999 523.761 li
200.639 523.521 li
199.199 523.521 li
197.279 523.521 li
196.079 523.521 li
195.839 523.521 li
195.599 523.521 li
194.639 523.281 li
191.759 523.281 li
190.559 523.281 li
189.599 523.281 li
185.039 523.041 li
184.079 523.041 li
183.839 523.041 li
183.359 523.041 li
183.119 523.041 li
182.879 523.041 li
181.679 523.041 li
179.279 522.802 li
178.559 522.802 li
169.679 522.561 li
167.039 522.32 li
165.119 522.32 li
160.319 522.081 li
158.399 522.081 li
154.079 521.841 li
151.919 521.841 li
147.6 521.602 li
147.359 521.602 li
146.639 521.602 li
145.199 521.602 li
144.239 521.602 li
141.839 521.36 li
137.52 521.36 li
134.399 521.121 li
133.919 521.121 li
133.679 521.121 li
132.72 521.121 li
128.64 520.881 li
121.919 520.641 li
119.759 520.641 li
120.479 519.921 li
121.2 519.44 li
121.439 518.721 li
121.679 518.24 li
121.679 518.001 li
121.679 517.761 li
121.679 517.521 li
121.679 517.28 li
121.439 517.04 li
121.2 516.801 li
120.72 516.32 li
120 515.601 li
119.759 515.36 li
119.52 515.12 li
119.279 514.64 li
119.279 513.439 li
119.279 512.96 li
119.279 512.72 li
119.279 512.479 li
119.279 512.239 li
119.279 511.999 li
119.04 511.76 li
119.04 511.52 li
118.799 511.52 li
118.799 511.039 li
118.079 510.079 li
117.839 509.839 li
117.6 509.599 li
117.12 509.119 li
116.399 508.64 li
115.439 508.159 li
114.239 508.159 li
113.52 507.919 li
113.279 507.919 li
113.279 507.679 li
112.56 507.439 li
112.32 507.198 li
111.839 506.959 li
111.839 506.719 li
111.6 506.719 li
111.12 506.239 li
110.879 505.758 li
110.639 505.519 li
110.639 505.278 li
110.639 504.318 li
110.639 503.839 li
110.639 503.598 li
110.399 503.118 li
110.159 502.397 li
109.919 502.397 li
109.439 501.678 li
109.2 501.438 li
108.959 501.198 li
108.239 500.957 li
108 500.718 li
107.52 500.478 li
107.279 500.478 li
106.56 499.998 li
106.32 499.518 li
106.08 497.838 li
106.08 497.117 li
106.32 496.157 li
106.56 495.437 li
107.04 494.717 li
107.279 494.717 li
107.279 494.477 li
107.759 493.997 li
108 493.997 li
108 493.757 li
108.239 493.757 li
108.959 493.276 li
109.2 493.276 li
109.679 493.036 li
109.919 492.797 li
110.399 492.797 li
110.879 492.557 li
110.879 492.316 li
111.12 492.316 li
111.359 492.076 li
111.839 491.356 li
112.08 491.116 li
112.32 490.876 li
112.56 490.156 li
112.56 489.436 li
112.32 488.956 li
111.6 487.035 li
111.359 486.075 li
111.359 485.835 li
111.359 485.355 li
111.6 484.875 li
112.08 483.675 li
112.32 482.955 li
112.32 482.235 li
112.32 481.994 li
111.839 480.555 li
111.359 479.354 li
111.12 478.635 li
111.12 478.394 li
111.12 478.154 li
111.359 477.674 li
111.359 477.435 li
111.839 476.954 li
112.08 476.714 li
112.32 476.714 li
112.32 476.474 li
112.56 476.474 li
114 476.234 li
114.479 475.754 li
114.72 475.754 li
114.959 475.754 li
114.959 475.514 li
115.2 475.273 li
115.439 475.034 li
115.439 474.794 li
115.679 474.554 li
115.919 473.834 li
115.919 473.354 li
115.679 473.113 li
115.679 472.873 li
115.439 472.153 li
115.2 471.913 li
114.72 471.434 li
113.52 469.993 li
113.279 469.753 li
112.8 469.032 li
112.8 468.553 li
112.56 468.073 li
112.56 467.353 li
112.56 466.152 li
112.8 464.712 li
113.279 463.512 li
113.759 462.552 li
114 461.352 li
114 460.872 li
113.759 460.392 li
113.52 459.911 li
113.52 459.672 li
113.279 459.672 li
113.04 459.432 li
112.8 459.191 li
112.56 458.951 li
112.32 458.711 li
112.08 458.711 li
111.839 458.472 li
111.359 458.231 li
110.879 458.231 li
110.639 457.991 li
110.399 457.751 li
110.159 457.751 li
110.159 457.511 li
109.919 457.511 li
109.919 457.271 li
109.679 457.031 li
109.679 456.791 li
109.439 456.07 li
109.439 455.591 li
109.439 455.11 li
109.919 454.391 li
110.639 453.19 li
110.639 452.23 li
110.639 451.511 li
110.639 451.27 li
110.399 451.03 li
109.439 450.069 li
108.959 449.59 li
108.479 448.869 li
108.239 448.39 li
108 447.91 li
108 447.669 li
108.239 447.43 li
108.239 447.189 li
108.239 446.949 li
108.72 446.469 li
109.2 445.989 li
109.439 445.51 li
109.679 445.269 li
110.159 444.789 li
110.159 444.549 li
110.399 444.31 li
110.399 444.068 li
110.399 443.589 li
110.399 442.869 li
110.159 441.669 li
110.159 439.028 li
109.919 438.068 li
108.72 435.907 li
108.479 434.947 li
108.239 433.987 li
108.239 433.268 li
108.479 433.268 li
108.72 432.547 li
109.2 431.827 li
109.679 431.347 li
109.919 431.347 li
110.159 431.347 li
110.639 431.587 li
111.839 431.827 li
112.8 431.587 li
113.279 431.106 li
113.279 430.387 li
113.04 429.666 li
112.32 428.947 li
111.6 428.467 li
110.639 428.467 li
109.679 428.467 li
105.359 428.706 li
104.879 428.706 li
104.399 428.467 li
104.159 428.227 li
103.919 427.747 li
103.679 427.026 li
103.439 426.065 li
103.919 424.626 li
105.12 422.945 li
105.359 422.226 li
105.6 421.506 li
105.6 421.265 li
105.6 420.545 li
105.12 419.825 li
104.879 419.105 li
104.879 418.865 li
104.399 417.425 li
104.399 417.185 li
104.399 416.465 li
104.639 415.984 li
104.879 415.744 li
105.359 415.505 li
104.879 415.024 li
104.159 414.544 li
103.919 414.305 li
103.679 414.064 li
103.679 413.344 li
103.679 412.624 li
103.679 412.384 li
103.919 411.424 li
104.399 411.184 li
104.639 410.943 li
106.32 411.184 li
106.56 411.184 li
106.56 411.664 li
106.56 412.144 li
105.84 413.584 li
105.6 414.305 li
106.56 415.265 li
108 414.544 li
108.959 414.064 li
109.679 413.584 li
110.159 412.864 li
110.399 411.904 li
109.919 410.224 li
109.679 409.503 li
109.2 408.783 li
108.479 408.303 li
107.279 408.063 li
105.84 408.063 li
105.6 408.063 li
104.639 407.823 li
104.159 407.823 li
104.159 407.583 li
102.72 406.623 li
102.239 406.144 li
101.759 405.902 li
101.04 404.943 li
100.8 404.223 li
100.8 403.502 li
101.04 403.263 li
101.279 403.022 li
102.72 402.302 li
103.2 401.822 li
103.679 401.343 li
104.159 400.382 li
103.919 399.662 li
103.439 398.222 li
103.2 397.021 li
103.2 396.541 li
103.919 394.861 li
104.159 394.141 li
104.159 393.661 li
103.919 392.94 li
103.919 392.461 li
103.919 392.221 li
103.919 391.501 li
103.919 391.021 li
104.159 390.781 li
104.879 389.82 li
105.12 389.581 li
105.359 389.101 li
105.359 388.62 li
105.359 388.14 li
105.12 387.42 li
104.879 386.939 li
103.919 386.22 li
103.439 385.98 li
103.2 385.739 li
102.959 385.739 li
102.479 385.739 li
101.279 386.22 li
100.56 386.22 li
100.32 386.22 li
99.3594 385.5 li
99.1196 385.5 li
98.1592 385.02 li
97.4395 385.02 li
95.7593 384.54 li
95.5195 384.54 li
95.2793 384.3 li
95.0396 384.06 li
94.5596 383.34 li
94.5596 383.1 li
94.0796 382.38 li
94.0796 382.14 li
94.3198 381.899 li
94.5596 381.419 li
95.5195 380.699 li
96.7197 379.739 li
96.9595 379.499 li
97.1997 379.019 li
97.4395 378.539 li
97.4395 378.299 li
97.4395 377.818 li
97.1997 376.858 li
97.1997 376.619 li
96.7197 374.458 li
96.4795 374.219 li
95.9995 373.738 li
95.5195 373.498 li
94.7998 373.258 li
94.3198 373.498 li
94.0796 373.498 li
93.5996 373.978 li
93.3594 374.219 li
93.1196 376.139 li
92.6396 378.299 li
92.3999 379.019 li
92.1597 379.019 li
91.9199 379.259 li
91.6792 379.259 li
91.1997 379.259 li
90.9595 379.259 li
90.7197 379.019 li
90.4795 379.019 li
90.2393 379.019 li
90.2393 378.779 li
89.9995 378.779 li
89.7593 378.539 li
89.2793 377.818 li
89.2793 377.578 li
89.0396 377.578 li
88.7998 377.099 li
88.3198 376.378 li
88.0796 376.378 li
87.8398 376.139 li
87.3594 375.898 li
86.3999 375.419 li
86.3999 375.178 li
85.9199 374.219 li
85.6797 373.019 li
85.6797 372.298 li
85.9199 371.577 li
85.9199 371.338 li
86.1597 370.857 li
86.6396 370.377 li
87.1196 369.897 li
87.3594 369.418 li
87.5996 368.937 li
87.5996 368.457 li
87.3594 367.978 li
87.3594 367.497 li
87.1196 367.018 li
86.6396 366.777 li
85.1997 366.057 li
84.9595 365.817 li
84.4795 365.577 li
84.4795 365.337 li
83.9995 364.377 li
83.7593 364.137 li
83.7593 363.896 li
83.5195 363.177 li
83.5195 362.696 li
83.5195 362.217 li
83.7593 361.496 li
83.9995 361.256 li
85.4395 359.336 li
85.9199 358.855 li
86.1597 357.655 li
86.1597 357.176 li
86.1597 356.936 li
86.1597 356.695 li
86.1597 356.455 li
85.9199 355.975 li
85.6797 355.495 li
84.7197 354.535 li
84.4795 354.295 li
83.9995 354.055 li
83.7593 353.574 li
83.5195 352.854 li
83.2793 352.135 li
83.5195 351.415 li
83.5195 351.174 li
83.5195 350.935 li
83.7593 350.455 li
84.4795 349.975 li
84.7197 349.734 li
85.4395 349.734 li
86.8794 349.975 li
87.8398 349.975 li
88.3198 349.734 li
88.5596 349.494 li
89.0396 349.015 li
89.0396 348.773 li
89.0396 348.294 li
89.0396 348.055 li
88.7998 347.573 li
88.3198 346.854 li
87.3594 346.373 li
86.6396 345.894 li
85.6797 345.414 li
85.4395 344.693 li
85.4395 344.453 li
85.4395 343.733 li
85.6797 342.773 li
85.9199 342.533 li
86.3999 342.293 li
86.3999 342.053 li
86.6396 342.053 li
87.1196 342.053 li
87.8398 341.573 li
88.5596 340.853 li
88.5596 340.373 li
88.5596 340.133 li
88.5596 338.933 li
88.7998 337.973 li
88.7998 337.732 li
89.2793 337.012 li
89.9995 336.292 li
90.2393 336.292 li
90.2393 336.052 li
90.4795 335.572 li
90.2393 335.092 li
90.2393 334.372 li
89.9995 334.372 li
89.7593 333.892 li
89.2793 333.172 li
88.5596 332.932 li
87.1196 332.452 li
86.6396 332.211 li
86.1597 331.731 li
85.9199 331.731 li
85.6797 331.491 li
85.6797 331.252 li
85.6797 331.011 li
85.4395 330.771 li
85.1997 330.052 li
85.1997 329.811 li
85.1997 329.571 li
85.6797 328.371 li
85.6797 328.131 li
85.6797 327.651 li
85.4395 326.931 li
85.1997 326.451 li
84.9595 326.21 li
84.7197 325.971 li
84.4795 325.73 li
83.9995 325.49 li
83.2793 325.011 li
83.0396 324.771 li
82.5596 324.771 li
82.3198 324.29 li
82.0796 323.811 li
81.8398 323.811 li
81.8398 323.57 li
81.5996 323.33 li
81.3594 322.85 li
81.3594 322.37 li
81.3594 321.41 li
81.1196 320.689 li
80.8794 320.21 li
80.1597 319.489 li
80.1597 319.25 li
80.1597 319.01 li
79.9199 318.77 li
79.9199 318.29 li
79.6797 318.049 li
79.9199 318.049 li
79.9199 317.81 li
80.1597 317.329 li
80.6396 317.09 li
81.8398 316.609 li
82.0796 316.609 li
82.3198 316.369 li
82.7998 315.89 li
82.7998 315.409 li
82.7998 315.169 li
82.7998 314.929 li
82.7998 314.689 li
82.0796 313.248 li
81.8398 312.769 li
82.0796 312.289 li
82.0796 312.048 li
82.7998 311.328 li
83.0396 311.089 li
83.2793 310.608 li
83.5195 310.128 li
83.7593 309.168 li
83.7593 308.448 li
83.7593 308.208 li
83.5195 307.728 li
83.0396 307.488 li
82.5596 307.008 li
82.3198 307.008 li
80.8794 306.768 li
80.6396 306.768 li
80.3999 306.768 li
79.4395 306.768 li
78.7197 307.248 li
78.4795 307.248 li
78.2397 307.248 li
77.5195 307.248 li
77.2793 307.008 li
77.0396 306.768 li
76.7998 306.527 li
76.7998 306.287 li
76.7998 306.047 li
76.7998 305.808 li
76.7998 305.567 li
77.0396 305.327 li
77.5195 304.367 li
77.7593 303.887 li
77.7593 303.647 li
77.7593 303.167 li
77.2793 302.687 li
76.5596 302.207 li
75.3594 302.207 li
74.1597 302.447 li
73.9199 302.927 li
73.6797 303.647 li
73.4395 303.887 li
73.1997 304.127 li
72.9595 304.367 li
72.7197 304.367 li
72.4795 304.367 li
71.7598 304.127 li
71.7598 303.887 li
71.52 303.647 li
71.2798 303.647 li
71.2798 303.407 li
71.0396 303.167 li
71.0396 302.927 li
71.2798 302.447 li
71.52 301.487 li
71.7598 301.487 li
72.9595 300.527 li
73.4395 300.046 li
73.4395 299.807 li
73.6797 299.566 li
73.6797 299.086 li
73.4395 298.366 li
73.1997 298.126 li
72.9595 297.886 li
72.4795 297.406 li
71.7598 297.166 li
70.7998 297.166 li
69.8398 297.406 li
69.8398 297.646 li
69.1196 297.406 li
68.8794 297.166 li
68.3999 296.926 li
67.9199 296.446 li
67.9199 296.206 li
67.6797 295.486 li
67.1997 294.045 li
67.1997 292.845 li
67.1997 292.605 li
67.1997 292.125 li
67.6797 290.925 li
67.6797 290.685 li
67.9199 290.445 li
67.9199 290.205 li
68.1597 289.725 li
68.6396 288.765 li
68.8794 287.564 li
68.8794 286.604 li
68.6396 286.125 li
68.3999 285.645 li
68.3999 285.164 li
67.9199 284.924 li
67.4395 284.444 li
66.7197 284.204 li
65.2798 283.724 li
65.04 283.724 li
64.5596 283.484 li
64.3198 283.244 li
64.0796 283.004 li
63.5996 282.284 li
63.3594 281.324 li
63.1196 280.844 li
62.6396 280.124 li
62.3999 280.124 li
62.3999 279.883 li
61.9199 279.644 li
60.9595 279.163 li
60.7197 278.683 li
60.4795 278.683 li
60.4795 278.443 li
60 277.723 li
59.7598 277.003 li
59.7598 276.763 li
59.7598 276.043 li
59.7598 275.803 li
59.7598 275.563 li
60 274.603 li
60.2397 274.603 li
60 274.123 li
60 273.882 li
60 273.643 li
60 273.402 li
60 273.163 li
60 272.922 li
59.7598 272.682 li
59.7598 272.442 li
59.04 271.482 li
58.7998 271.242 li
58.7998 271.002 li
59.04 270.282 li
59.2798 270.282 li
60.4795 269.802 li
60.7197 269.802 li
61.1997 269.802 li
61.4395 269.802 li
61.9199 269.322 li
62.1597 269.082 li
62.8794 268.122 li
63.1196 267.881 li
63.1196 267.642 li
62.8794 267.162 li
62.6396 266.921 li
62.3999 266.441 li
62.3999 266.201 li
62.3999 265.961 li
62.6396 265.001 li
62.6396 264.281 li
62.3999 263.561 li
61.6797 262.841 li
61.1997 262.121 li
59.52 260.92 li
59.04 260.44 li
58.5596 259.48 li
58.3198 258.52 li
58.3198 257.08 li
58.3198 256.6 li
58.3198 255.88 li
58.0796 255.64 li
58.0796 255.16 li
57.5996 254.439 li
56.6396 253.239 li
55.1997 252.519 li
54.4795 251.799 li
54 251.319 li
53.52 250.839 li
53.2798 250.359 li
53.2798 249.879 li
53.04 249.159 li
53.04 248.679 li
53.04 248.199 li
53.04 247.718 li
53.2798 247.238 li
53.52 246.999 li
53.7598 246.518 li
54.2397 245.558 li
54.2397 245.318 li
54.2397 245.078 li
54 244.838 li
54 244.598 li
54 244.358 li
53.7598 243.878 li
53.52 242.917 li
53.52 241.717 li
53.7598 240.757 li
54 240.277 li
55.4395 238.357 li
56.8794 236.917 li
57.1196 236.197 li
57.5996 234.997 li
57.8398 234.036 li
57.5996 232.596 li
57.3594 230.916 li
57.1196 230.676 li
56.3999 229.476 li
56.1597 228.996 li
54.7197 228.516 li
54.2397 228.516 li
53.2798 228.275 li
53.04 228.275 li
52.5596 228.275 li
51.1201 228.035 li
50.8799 228.035 li
49.4395 227.555 li
48.7197 227.795 li
47.2798 227.555 li
47.04 227.315 li
47.04 227.075 li
47.04 226.595 li
47.2798 226.355 li
47.52 225.875 li
47.04 224.915 li
46.7998 224.675 li
46.3198 224.675 li
45.6001 224.435 li
45.3599 223.715 li
45.6001 223.234 li
46.7998 222.754 li
47.04 222.274 li
46.7998 221.794 li
47.04 220.834 li
47.2798 219.394 li
47.2798 217.714 li
45.3599 217.714 li
44.8799 217.474 li
44.8799 216.994 li
44.8799 216.273 li
44.8799 216.034 li
44.8799 215.553 li
45.1201 215.313 li
45.6001 215.553 li
46.0796 215.553 li
46.3198 215.313 li
46.3198 215.073 li
46.5596 214.833 li
46.3198 214.833 li
46.0796 214.593 li
45.8398 214.593 li
45.3599 214.113 li
45.3599 213.873 li
45.3599 213.633 li
45.6001 213.393 li
45.6001 213.153 li
45.3599 212.913 li
44.8799 212.673 li
44.8799 212.433 li
44.8799 212.193 li
44.8799 211.953 li
44.6401 210.513 li
44.3999 210.272 li
44.1597 209.313 li
43.9199 209.072 li
43.6797 208.833 li
43.1997 208.592 li
42.9595 208.833 li
42.4795 209.072 li
42.2397 209.553 li
42 209.553 li
41.7598 209.553 li
41.7598 209.313 li
41.52 209.072 li
41.52 208.833 li
41.52 208.592 li
41.52 208.353 li
41.7598 208.353 li
42 208.112 li
42.4795 208.112 li
42.7197 208.112 li
42.9595 207.872 li
43.1997 207.632 li
43.4395 207.152 li
43.4395 206.912 li
43.4395 206.672 li
43.1997 206.432 li
42.2397 204.752 li
41.7598 204.512 li
41.52 204.271 li
41.2798 204.271 li
41.2798 204.032 li
41.04 203.792 li
41.04 203.552 li
40.7998 203.552 li
41.04 203.312 li
41.04 202.832 li
41.04 202.352 li
40.5596 201.631 li
40.3198 201.391 li
40.0796 201.391 li
38.8799 201.871 li
38.6401 201.871 li
38.6401 201.151 li
38.8799 201.151 li
39.1201 200.911 li
38.6401 200.191 li
37.9199 199.231 li
37.6797 199.231 li
37.4399 199.471 li
37.4399 199.711 li
37.4399 199.951 li
37.1997 199.951 li
36.7197 199.951 li
36.4795 199.711 li
36.9595 199.231 li
36.9595 198.991 li
36.9595 198.751 li
36.9595 198.271 li
36.9595 198.031 li
35.7598 197.311 li
35.04 197.311 li
34.5596 197.071 li
34.7998 196.831 li
34.5596 196.11 li
34.3198 195.871 li
34.0796 195.63 li
34.0796 195.871 li
33.6001 196.11 li
33.1201 196.11 li
32.8799 196.11 li
32.8799 195.871 li
32.8799 195.63 li
32.6401 195.63 li
32.1597 195.39 li
30.96 194.43 li
30.96 193.95 li
31.2002 193.71 li
31.6797 193.23 li
31.6797 191.31 li
31.4399 191.31 li
30.7202 191.55 li
30.2397 189.87 li
30 189.87 li
30 189.629 li
30.2397 189.149 li
30.48 188.909 li
30.96 188.429 li
31.2002 187.709 li
31.6797 187.229 li
32.1597 187.229 li
32.3999 186.989 li
32.3999 186.509 li
32.1597 186.509 li
31.9199 186.509 li
31.4399 186.509 li
30.96 185.789 li
30.96 184.829 li
30.96 184.589 li
31.2002 184.589 li
31.4399 184.349 li
31.6797 184.108 li
32.1597 183.148 li
32.6401 182.428 li
32.8799 182.428 li
33.1201 182.428 li
34.0796 182.668 li
34.3198 182.668 li
34.5596 181.948 li
35.2798 181.228 li
35.7598 180.028 li
35.7598 179.548 li
35.7598 179.308 li
36 178.828 li
35.7598 178.588 li
35.2798 178.588 li
35.2798 177.868 li
35.52 177.868 li
36 177.868 li
36.4795 177.388 li
36.7197 177.388 li
36.9595 176.907 li
37.4399 175.947 li
36.9595 174.987 li
37.1997 174.507 li
38.1597 174.507 li
38.6401 175.467 li
38.8799 175.707 li
39.1201 175.467 li
39.1201 174.747 li
39.3599 174.507 li
39.3599 174.267 li
39.6001 174.267 li
39.8398 174.507 li
39.8398 174.747 li
40.0796 174.747 li
40.3198 174.747 li
40.5596 174.747 li
40.5596 174.507 li
40.7998 174.507 li
40.7998 174.267 li
40.5596 174.267 li
40.3198 174.027 li
40.0796 173.787 li
40.0796 173.307 li
40.3198 173.067 li
40.5596 173.067 li
41.2798 172.827 li
41.2798 172.587 li
41.7598 171.626 li
41.7598 171.387 li
41.52 171.387 li
41.2798 171.626 li
41.04 171.626 li
40.7998 170.667 li
40.7998 169.707 li
41.04 169.226 li
41.2798 168.986 li
41.52 168.986 li
42.2397 168.506 li
42.2397 167.306 li
42 166.826 li
42.7197 166.586 li
43.4395 166.586 li
43.6797 166.346 li
43.4395 166.106 li
43.1997 165.625 li
42.4795 165.146 li
42.2397 165.146 li
41.7598 164.666 li
41.7598 164.425 li
42.2397 164.425 li
42.4795 164.425 li
42.4795 163.706 li
42.4795 163.465 li
42.2397 162.265 li
42 162.025 li
42 161.785 li
42 161.305 li
43.9199 159.865 li
44.1597 159.865 li
44.3999 159.865 li
44.3999 160.345 li
44.6401 160.345 li
44.8799 160.345 li
44.8799 160.105 li
44.8799 159.865 li
44.3999 159.385 li
44.6401 159.145 li
45.1201 158.665 li
45.6001 158.425 li
45.8398 158.425 li
45.8398 157.944 li
46.3198 156.984 li
46.7998 156.264 li
46.5596 154.824 li
46.3198 154.584 li
46.3198 154.344 li
45.8398 154.344 li
45.1201 154.104 li
44.6401 153.384 li
44.6401 152.904 li
45.1201 152.904 li
45.6001 152.184 li
45.6001 151.704 li
45.6001 151.224 li
45.8398 150.743 li
46.3198 150.503 li
46.7998 150.503 li
47.04 150.503 li
47.2798 150.263 li
47.52 150.263 li
47.7598 149.783 li
48 149.303 li
48 149.063 li
48 148.583 li
47.7598 147.863 li
47.7598 147.623 li
47.2798 147.143 li
47.04 147.143 li
46.7998 147.143 li
46.0796 146.423 li
46.0796 146.183 li
45.8398 146.183 li
45.8398 145.942 li
45.8398 145.703 li
45.8398 145.462 li
46.0796 145.223 li
46.3198 144.502 li
46.3198 144.262 li
46.0796 144.022 li
45.8398 144.022 li
45.6001 144.022 li
45.3599 143.782 li
45.3599 143.542 li
46.3198 142.342 li
46.7998 142.582 li
47.04 142.582 li
48.4795 142.342 li
48.7197 142.342 li
48.7197 141.862 li
48.9595 141.622 li
49.9199 140.662 li
50.3999 140.422 li
50.8799 140.662 li
51.6001 140.662 li
51.8398 140.422 li
52.0796 139.942 li
52.5596 138.981 li
52.5596 138.742 li
52.5596 137.542 li
52.5596 137.301 li
52.5596 137.062 li
52.5596 136.821 li
51.8398 136.581 li
51.8398 136.341 li
51.6001 136.341 li
51.8398 136.341 li
52.0796 135.861 li
53.04 134.901 li
53.52 134.421 li
54.4795 132.98 li
54.7197 131.78 li
54.4795 131.78 li
54.2397 131.541 li
54.2397 131.3 li
54.2397 130.58 li
54 129.86 li
53.2798 128.66 li
52.7998 128.18 li
52.3198 128.42 li
51.8398 127.7 li
51.6001 127.22 li
51.6001 125.779 li
51.6001 125.299 li
51.6001 124.579 li
51.8398 124.099 li
51.8398 123.619 li
51.8398 123.139 li
51.8398 122.659 li
52.0796 122.419 li
51.8398 122.419 li
51.8398 122.179 li
51.6001 121.939 li
51.1201 121.939 li
51.1201 121.219 li
51.1201 119.779 li
51.3599 118.818 li
51.3599 118.579 li
51.3599 118.338 li
51.1201 117.138 li
50.8799 116.418 li
49.9199 115.938 li
48.9595 115.938 li
48.7197 115.938 li
48.2397 116.418 li
48 116.418 li
47.2798 116.658 li
46.7998 116.658 li
46.0796 116.898 li
45.8398 116.658 li
45.8398 116.418 li
45.3599 115.698 li
44.3999 115.218 li
43.9199 115.458 li
43.1997 115.458 li
42.9595 115.218 li
42.2397 115.218 li
42 115.458 li
42 115.698 li
41.7598 115.698 li
41.52 115.698 li
40.5596 114.498 li
40.5596 114.258 li
40.5596 113.538 li
40.3198 113.297 li
41.04 112.578 li
41.7598 112.578 li
42.4795 112.097 li
42.7197 111.617 li
42.4795 110.657 li
42.4795 110.417 li
42.2397 110.177 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0323491 .0805982 .896971 3.05175e-05 cmyk
f
.72 lw
1 lc
1 lj
3.85001 ml
[] 0 dsh
true sadj
42.2397 110.177 mo
42 110.417 li
41.7598 110.417 li
41.2798 110.177 li
40.7998 109.697 li
39.8398 108.977 li
39.3599 108.977 li
39.1201 108.737 li
38.8799 108.017 li
39.3599 107.537 li
39.3599 107.777 li
39.6001 107.777 li
39.8398 107.297 li
39.8398 105.376 li
39.8398 104.896 li
39.8398 104.656 li
39.6001 104.656 li
39.6001 104.416 li
39.6001 104.176 li
40.5596 104.176 li
40.5596 104.416 li
40.7998 104.416 li
40.7998 104.656 li
41.04 104.656 li
41.04 104.896 li
41.52 104.896 li
42.4795 104.896 li
42.7197 105.136 li
42.9595 105.136 li
43.1997 105.136 li
44.1597 104.896 li
45.1201 104.176 li
45.3599 104.176 li
45.6001 103.456 li
45.6001 103.216 li
45.6001 102.976 li
45.8398 102.736 li
45.8398 102.256 li
45.6001 101.776 li
45.1201 99.8555 li
44.8799 98.6553 li
45.3599 98.415 li
45.6001 97.6953 li
45.8398 97.4551 li
46.0796 97.2148 li
46.0796 96.9751 li
46.3198 96.9751 li
46.0796 96.9751 li
46.0796 96.2549 li
46.0796 94.8145 li
46.0796 93.8545 li
46.5596 93.3745 li
46.5596 93.1343 li
46.7998 92.8945 li
46.7998 92.6543 li
46.7998 91.2144 li
46.5596 90.9741 li
46.5596 90.4941 li
46.5596 89.7739 li
46.3198 89.5337 li
45.8398 89.2939 li
45.8398 89.5337 li
45.6001 89.5337 li
45.1201 89.7739 li
43.4395 88.334 li
43.1997 88.334 li
42.9595 87.8535 li
42.7197 87.8535 li
42.2397 86.8936 li
41.7598 86.1733 li
41.04 85.9336 li
41.52 85.2134 li
41.52 84.9731 li
41.52 84.7334 li
41.52 84.4932 li
41.52 84.2529 li
41.04 84.0132 li
40.7998 84.0132 li
40.3198 83.7729 li
40.0796 83.7729 li
39.6001 84.0132 li
39.3599 83.7729 li
39.1201 83.7729 li
38.8799 83.5332 li
38.1597 81.3726 li
38.1597 81.1328 li
37.9199 80.8926 li
38.3999 79.9326 li
39.6001 78.9722 li
39.8398 78.7324 li
40.0796 78.252 li
40.0796 78.0122 li
40.0796 76.812 li
40.5596 76.332 li
40.3198 75.1318 li
40.0796 74.8916 li
39.6001 74.4116 li
39.1201 74.4116 li
38.8799 74.1714 li
38.6401 74.1714 li
38.6401 73.4512 li
39.6001 73.4512 li
46.3198 73.6914 li
54.9595 73.9316 li
55.6797 73.9316 li
66.2397 74.4116 li
68.3999 74.4116 li
68.6396 74.4116 li
72.7197 74.6514 li
74.8794 74.6514 li
77.2793 74.6514 li
81.5996 74.8916 li
82.0796 74.8916 li
83.0396 74.8916 li
83.2793 74.8916 li
86.1597 74.8916 li
94.5596 75.1318 li
99.3594 75.3716 li
103.2 75.6118 li
105.6 75.6118 li
107.52 75.6118 li
112.56 75.8516 li
120.72 76.0918 li
123.6 76.0918 li
125.039 76.0918 li
125.759 76.0918 li
133.919 76.332 li
139.199 76.5718 li
140.159 76.5718 li
144.239 76.5718 li
144.719 76.5718 li
147.12 76.812 li
152.399 76.812 li
159.119 77.0518 li
160.079 77.0518 li
162.239 77.0518 li
163.439 77.0518 li
165.839 77.0518 li
168 77.0518 li
173.279 77.292 li
174.479 77.292 li
174.719 77.292 li
179.039 77.292 li
180.239 77.292 li
186.479 77.5322 li
188.399 77.5322 li
189.119 77.5322 li
192.479 77.5322 li
196.079 77.772 li
196.319 77.772 li
197.519 77.772 li
197.759 77.772 li
198.959 77.772 li
199.439 77.772 li
202.559 77.772 li
203.519 77.772 li
205.919 77.772 li
210.239 78.0122 li
212.399 78.0122 li
212.639 78.0122 li
214.559 78.0122 li
216.959 78.0122 li
219.119 78.0122 li
221.279 78.252 li
223.439 78.252 li
225.599 78.252 li
225.839 78.252 li
228.719 78.252 li
230.159 78.252 li
230.399 78.252 li
231.839 78.252 li
232.079 78.252 li
232.319 78.252 li
233.519 78.252 li
233.999 78.252 li
238.799 78.4922 li
245.759 78.4922 li
250.319 78.4922 li
251.999 78.4922 li
258.959 78.7324 li
259.199 78.7324 li
264.479 78.7324 li
264.959 78.7324 li
272.639 78.9722 li
275.039 78.9722 li
277.679 78.9722 li
278.159 78.9722 li
283.918 78.9722 li
285.358 78.9722 li
286.319 78.9722 li
291.358 79.2124 li
299.759 79.2124 li
304.318 79.2124 li
310.798 79.2124 li
313.199 79.2124 li
315.119 79.2124 li
315.358 79.2124 li
316.318 79.2124 li
316.798 79.2124 li
317.039 79.2124 li
317.519 79.2124 li
318.718 79.4521 li
319.679 79.4521 li
326.398 79.4521 li
330.479 79.4521 li
339.599 79.4521 li
343.678 79.6924 li
349.918 79.6924 li
350.158 79.6924 li
353.038 79.6924 li
356.878 79.6924 li
358.798 79.6924 li
359.758 79.6924 li
359.998 79.6924 li
360.718 79.6924 li
366.238 79.6924 li
369.838 79.6924 li
374.398 79.6924 li
376.318 79.6924 li
379.198 79.6924 li
379.678 79.6924 li
383.038 79.6924 li
384.238 79.6924 li
384.718 79.6924 li
385.198 79.6924 li
385.918 79.6924 li
386.398 79.6924 li
390.718 79.6924 li
392.878 79.6924 li
394.078 79.6924 li
396.238 79.6924 li
399.118 79.6924 li
405.118 79.6924 li
406.318 79.6924 li
408.238 79.6924 li
409.438 79.6924 li
413.038 79.6924 li
413.277 79.6924 li
415.918 79.6924 li
419.519 79.6924 li
421.678 79.4521 li
422.639 79.4521 li
427.198 79.4521 li
432.958 79.4521 li
435.598 79.4521 li
437.519 79.4521 li
440.638 79.4521 li
443.998 79.4521 li
446.157 79.4521 li
447.357 79.4521 li
448.798 79.4521 li
449.038 79.4521 li
450.479 79.4521 li
452.878 79.4521 li
457.198 79.4521 li
459.357 79.4521 li
459.598 79.4521 li
461.758 79.2124 li
465.838 79.2124 li
470.878 79.2124 li
472.558 79.2124 li
472.798 79.2124 li
474.718 79.2124 li
476.878 79.2124 li
477.357 79.2124 li
486.238 78.9722 li
487.918 78.9722 li
489.598 78.9722 li
497.758 78.7324 li
499.438 78.7324 li
501.117 78.7324 li
503.998 78.7324 li
504.238 78.7324 li
506.397 78.7324 li
507.598 78.7324 li
508.317 78.7324 li
509.998 78.7324 li
512.638 78.7324 li
512.877 78.7324 li
514.317 78.7324 li
515.037 78.4922 li
518.397 78.4922 li
518.638 78.4922 li
526.077 78.4922 li
527.277 78.4922 li
529.438 78.252 li
537.838 78.252 li
539.518 78.252 li
540.478 78.252 li
548.397 78.0122 li
551.998 78.0122 li
552.717 78.0122 li
552.957 78.0122 li
554.877 78.0122 li
555.838 78.0122 li
563.757 77.772 li
565.918 77.772 li
566.157 77.772 li
568.797 77.772 li
570.717 77.772 li
570.957 77.5322 li
572.637 77.5322 li
573.838 77.5322 li
574.077 77.5322 li
575.997 77.5322 li
578.397 77.5322 li
578.637 77.5322 li
579.117 77.5322 li
579.357 77.5322 li
582.717 77.5322 li
585.838 77.292 li
587.277 77.292 li
587.997 77.292 li
588.717 77.292 li
589.438 77.292 li
589.917 77.292 li
590.877 77.292 li
591.598 77.292 li
591.838 77.292 li
592.077 77.292 li
592.557 77.292 li
594.717 77.292 li
599.277 77.0518 li
600.237 77.0518 li
601.197 77.0518 li
605.997 76.812 li
608.877 76.812 li
609.117 76.812 li
611.037 76.812 li
611.277 76.812 li
616.316 76.5718 li
618.478 76.5718 li
619.197 76.5718 li
619.438 76.5718 li
628.077 76.332 li
629.037 76.332 li
631.438 76.332 li
632.157 76.332 li
633.117 76.332 li
636.236 76.0918 li
636.236 76.5718 li
636.236 77.0518 li
636.236 77.5322 li
636.478 78.4922 li
636.478 79.2124 li
635.997 80.6523 li
635.518 81.6128 li
635.037 82.0928 li
635.037 82.333 li
634.797 82.333 li
634.797 82.813 li
634.797 83.0527 li
634.797 83.7729 li
635.277 84.4932 li
636.957 86.6533 li
637.438 87.3735 li
637.677 87.6138 li
637.917 87.8535 li
637.917 88.0938 li
638.157 88.334 li
638.397 89.0537 li
638.637 89.5337 li
638.637 90.2539 li
638.637 90.9741 li
638.877 91.4541 li
638.877 92.1743 li
638.877 92.8945 li
638.637 93.6143 li
638.157 94.5747 li
638.157 95.2949 li
637.917 95.5347 li
637.438 96.0146 li
637.197 96.0146 li
637.197 96.2549 li
637.197 96.4951 li
637.197 96.7349 li
637.677 97.9351 li
638.157 98.6553 li
638.397 99.1353 li
638.637 99.1353 li
639.356 99.3755 li
640.077 99.3755 li
640.316 99.3755 li
641.037 99.6152 li
641.997 100.335 li
643.917 101.296 li
645.837 102.016 li
646.316 102.256 li
646.797 102.496 li
647.757 103.216 li
647.997 103.456 li
648.236 103.456 li
649.197 104.416 li
651.837 107.537 li
652.557 108.977 li
653.277 110.177 li
653.518 110.657 li
653.518 111.137 li
653.277 111.857 li
653.277 112.097 li
653.518 112.337 li
653.757 112.337 li
654.478 112.337 li
654.717 112.578 li
654.957 112.817 li
654.957 113.058 li
654.957 113.297 li
654.957 114.018 li
654.717 114.738 li
654.478 114.978 li
654.236 115.458 li
653.518 116.178 li
652.797 117.378 li
651.837 118.338 li
649.677 120.739 li
649.438 120.739 li
648.957 121.219 li
648.478 121.699 li
648.236 122.179 li
647.997 122.659 li
647.997 123.619 li
646.797 125.779 li
646.316 126.26 li
646.077 127.46 li
645.837 128.42 li
645.597 128.9 li
645.597 129.14 li
644.637 130.58 li
644.156 130.82 li
642.957 131.3 li
642.478 131.78 li
642.236 132.261 li
642.236 132.741 li
642.236 133.221 li
642.236 134.181 li
642.478 136.581 li
642.478 140.182 li
642.478 141.142 li
642.236 141.622 li
642.236 142.102 li
642.478 142.582 li
642.478 142.822 li
642.717 144.502 li
642.717 144.982 li
642.717 145.703 li
642.957 146.423 li
642.957 146.663 li
643.197 147.863 li
643.677 149.303 li
643.677 149.543 li
645.117 153.624 li
645.117 154.104 li
645.117 155.544 li
645.356 156.024 li
645.837 156.744 li
646.316 157.464 li
646.316 157.705 li
646.316 157.944 li
646.316 158.185 li
646.557 158.425 li
646.557 158.665 li
646.557 158.905 li
646.077 160.345 li
646.077 161.065 li
646.077 161.305 li
646.557 162.745 li
646.557 162.985 li
646.797 163.465 li
646.797 163.945 li
646.797 164.425 li
646.557 165.146 li
646.557 165.625 li
646.557 166.106 li
646.797 166.346 li
646.797 166.586 li
647.037 166.826 li
647.518 166.826 li
648.478 167.306 li
649.917 168.026 li
650.156 168.266 li
650.637 168.746 li
651.356 169.466 li
651.837 169.946 li
652.077 171.146 li
652.077 172.827 li
652.316 173.547 li
652.557 174.267 li
653.037 174.747 li
653.037 174.987 li
653.037 175.227 li
652.797 175.947 li
652.557 177.388 li
652.797 177.868 li
653.037 178.107 li
653.277 178.107 li
653.997 178.107 li
654.478 178.348 li
654.478 179.548 li
654.717 181.468 li
654.717 181.708 li
654.957 183.148 li
655.438 184.349 li
655.677 185.069 li
655.677 186.269 li
655.677 186.989 li
655.917 187.229 li
656.156 187.469 li
656.637 187.949 li
656.877 188.429 li
656.877 188.669 li
656.877 188.909 li
656.637 189.149 li
656.397 189.149 li
656.397 189.629 li
656.397 189.87 li
656.397 190.109 li
656.877 190.109 li
657.117 190.35 li
657.356 190.589 li
657.597 190.83 li
657.597 191.55 li
657.837 192.03 li
658.076 192.03 li
658.316 192.03 li
658.557 192.03 li
658.797 191.79 li
659.277 191.79 li
659.517 191.79 li
659.517 192.03 li
659.757 192.03 li
659.997 192.03 li
659.997 192.27 li
660.236 192.51 li
660.236 192.75 li
660.236 193.23 li
660.478 193.47 li
660.717 193.95 li
661.917 194.67 li
662.156 194.67 li
662.877 194.43 li
663.837 195.15 li
664.316 195.39 li
665.277 196.11 li
666.236 197.791 li
666.477 198.031 li
666.957 198.271 li
667.917 198.511 li
669.117 199.231 li
669.356 199.471 li
669.597 199.711 li
670.557 199.951 li
671.036 199.951 li
671.997 199.711 li
672.477 199.471 li
672.957 199.471 li
673.677 199.951 li
675.117 200.911 li
675.356 200.911 li
675.597 200.911 li
676.076 201.151 li
676.797 201.391 li
677.277 201.391 li
677.517 201.631 li
678.957 201.871 li
680.637 202.352 li
681.597 202.591 li
683.036 202.832 li
685.917 203.552 li
686.877 203.552 li
688.076 203.792 li
688.797 204.032 li
689.036 204.032 li
689.996 204.271 li
690.956 204.512 li
691.197 204.512 li
692.156 204.752 li
693.117 204.992 li
694.316 205.232 li
695.757 205.712 li
696.956 206.192 li
696.956 206.432 li
697.197 206.672 li
697.677 207.152 li
697.916 207.872 li
697.916 208.353 li
698.637 209.553 li
698.877 210.272 li
699.117 210.513 li
699.597 211.953 li
699.597 212.673 li
699.597 212.913 li
699.837 213.393 li
700.557 214.593 li
700.797 214.833 li
701.036 215.073 li
701.277 215.313 li
702.717 216.514 li
702.956 217.954 li
703.677 219.154 li
704.637 220.114 li
704.877 220.594 li
705.117 221.794 li
705.117 222.035 li
705.117 222.515 li
705.356 222.995 li
705.597 223.955 li
705.597 224.675 li
705.356 225.635 li
704.396 227.075 li
703.677 228.035 li
703.677 228.516 li
703.677 229.476 li
703.916 230.196 li
704.877 231.156 li
705.356 231.636 li
705.597 231.636 li
707.276 233.076 li
709.437 234.036 li
711.356 234.517 li
711.836 234.997 li
712.316 234.997 li
713.517 235.477 li
713.757 235.717 li
714.236 235.957 li
714.717 236.677 li
714.956 237.397 li
714.956 238.597 li
715.197 238.837 li
715.437 239.317 li
716.156 239.797 li
719.757 241.237 li
720.956 241.717 li
721.197 241.958 li
721.437 241.958 li
721.677 242.198 li
722.156 242.678 li
722.877 243.398 li
723.356 243.638 li
723.597 243.878 li
724.076 243.878 li
724.316 243.878 li
724.797 244.118 li
724.797 244.358 li
725.276 244.598 li
725.276 245.078 li
725.517 245.318 li
725.756 246.038 li
725.996 246.038 li
725.996 246.278 li
726.477 246.758 li
727.196 247.479 li
727.916 247.958 li
728.156 247.958 li
728.396 248.199 li
728.637 248.679 li
729.836 250.839 li
730.076 251.079 li
730.557 251.559 li
731.036 251.799 li
731.276 252.039 li
731.517 252.519 li
731.517 252.999 li
731.517 253.239 li
731.517 253.479 li
731.276 253.719 li
731.036 253.959 li
731.276 254.68 li
731.276 255.64 li
731.036 256.6 li
730.797 257.32 li
730.797 257.56 li
730.557 257.8 li
730.316 258.52 li
730.076 258.76 li
730.076 259 li
730.076 259.72 li
730.797 261.161 li
731.036 261.641 li
731.276 262.361 li
731.276 262.601 li
731.517 263.321 li
731.756 263.321 li
731.756 263.561 li
731.996 263.801 li
732.717 264.281 li
733.916 265.721 li
734.396 266.441 li
734.396 267.162 li
734.637 267.162 li
734.877 267.642 li
736.797 269.322 li
737.996 269.802 li
738.477 270.282 li
738.956 270.522 li
741.116 270.762 li
742.316 271.242 li
743.517 272.202 li
743.756 272.202 li
744.717 272.682 li
745.196 272.922 li
745.676 273.163 li
745.916 273.163 li
747.597 274.363 li
749.036 274.843 li
750.717 275.323 li
751.196 275.323 li
752.877 276.283 li
754.316 277.003 li
755.276 277.483 li
755.996 277.963 li
756.236 278.443 li
756.236 279.163 li
756.477 280.124 li
756.956 281.324 li
757.437 281.804 li
757.676 281.804 li
758.156 282.044 li
758.636 282.044 li
760.557 282.044 li
760.797 282.524 li
761.036 282.524 li
761.517 283.244 li
761.517 283.724 li
761.517 284.444 li
761.756 284.684 li
761.756 284.924 li
761.756 285.404 li
761.756 285.645 li
761.756 285.884 li
761.756 286.125 li
761.517 286.604 li
761.517 286.845 li
761.517 287.325 li
761.517 287.564 li
761.517 287.805 li
761.036 289.485 li
761.036 289.725 li
761.517 291.405 li
761.517 291.646 li
761.517 292.845 li
761.517 293.326 li
761.756 294.766 li
761.756 295.006 li
762.236 295.246 li
762.956 295.966 li
763.196 296.446 li
763.437 296.926 li
763.437 297.646 li
763.676 297.646 li
763.676 297.886 li
763.676 298.126 li
763.916 298.366 li
764.156 298.606 li
764.396 299.086 li
764.636 299.566 li
764.636 300.527 li
764.636 301.487 li
764.156 302.687 li
764.156 303.887 li
763.916 304.367 li
763.196 304.847 li
763.196 305.087 li
762.956 306.047 li
762.477 307.008 li
762.236 307.728 li
762.236 308.928 li
762.236 309.408 li
762.717 310.128 li
763.196 310.368 li
763.437 310.848 li
763.676 311.328 li
763.916 311.568 li
763.676 311.809 li
763.676 313.969 li
763.676 314.689 li
763.676 314.929 li
763.676 315.169 li
763.676 315.409 li
763.437 316.609 li
762.477 318.77 li
762.477 319.01 li
762.236 319.729 li
761.996 319.97 li
761.996 320.689 li
761.756 320.93 li
761.756 321.17 li
761.756 321.41 li
761.756 321.65 li
761.756 322.85 li
761.517 323.33 li
761.276 324.051 li
761.276 324.29 li
761.036 324.53 li
760.797 324.771 li
760.797 325.011 li
760.797 325.251 li
760.797 325.971 li
760.797 326.21 li
760.797 326.691 li
760.797 327.171 li
761.036 328.131 li
761.276 329.811 li
761.276 330.291 li
761.036 330.531 li
760.316 331.252 li
758.636 331.972 li
758.396 331.972 li
758.156 331.972 li
757.916 332.211 li
757.196 332.452 li
756.477 332.932 li
754.316 334.372 li
753.597 334.853 li
753.597 335.092 li
752.396 335.812 li
751.916 336.292 li
750.236 337.012 li
749.996 337.252 li
747.597 339.652 li
746.877 340.853 li
746.637 341.093 li
746.396 342.293 li
746.156 343.014 li
746.156 343.973 li
746.156 344.693 li
746.637 345.894 li
746.637 346.134 li
746.637 346.373 li
746.637 346.854 li
746.637 347.094 li
746.637 347.573 li
746.637 347.814 li
746.637 348.055 li
746.637 348.294 li
746.396 348.294 li
746.396 348.534 li
746.396 348.773 li
746.156 348.773 li
745.916 349.015 li
744.956 349.975 li
744.717 350.215 li
744.477 350.215 li
744.477 350.455 li
744.477 350.694 li
744.236 351.174 li
744.236 351.895 li
744.236 352.854 li
743.996 354.055 li
743.996 354.295 li
743.517 355.495 li
743.517 355.735 li
743.517 355.975 li
743.517 356.455 li
743.996 359.336 li
743.996 360.536 li
743.996 361.016 li
744.236 362.937 li
744.236 363.177 li
744.236 363.896 li
743.996 364.137 li
743.996 364.617 li
743.036 365.097 li
741.597 366.057 li
740.877 366.057 li
739.916 366.297 li
739.676 366.537 li
737.756 367.257 li
736.797 367.736 li
736.076 368.218 li
736.076 368.457 li
735.836 368.697 li
735.356 369.657 li
735.117 370.137 li
734.877 370.137 li
734.637 370.377 li
734.396 370.377 li
733.916 370.857 li
733.677 371.098 li
733.196 371.577 li
732.717 372.538 li
732.477 373.019 li
732.236 373.258 li
731.996 373.258 li
731.756 373.738 li
730.797 374.938 li
729.356 375.419 li
728.877 375.658 li
727.437 375.898 li
726.477 375.898 li
726.236 375.898 li
725.996 375.898 li
724.797 375.658 li
722.637 374.938 li
722.156 374.938 li
721.677 374.698 li
721.197 374.938 li
719.996 375.178 li
719.757 375.419 li
719.517 375.419 li
718.797 376.139 li
718.557 376.139 li
718.316 376.378 li
718.076 376.378 li
717.597 376.619 li
717.117 376.619 li
716.877 376.619 li
716.637 376.858 li
716.156 376.858 li
715.916 377.099 li
715.437 377.339 li
714.717 378.059 li
714.477 379.499 li
714.236 379.979 li
713.996 380.219 li
713.036 381.419 li
711.597 382.14 li
711.597 382.38 li
711.356 382.38 li
710.637 383.34 li
709.437 384.54 li
708.717 385.02 li
707.517 385.26 li
707.276 385.26 li
706.316 385.26 li
704.877 385.98 li
703.677 386.22 li
701.036 386.7 li
699.597 387.181 li
698.156 387.181 li
695.517 387.181 li
694.797 387.181 li
694.557 386.939 li
694.316 386.939 li
693.837 386.939 li
691.437 386.7 li
689.517 386.7 li
688.076 386.7 li
687.597 386.7 li
687.117 386.7 li
686.877 386.7 li
686.156 386.939 li
685.677 387.181 li
685.437 387.42 li
685.197 387.42 li
684.717 387.9 li
684.236 388.14 li
683.996 388.381 li
683.277 389.101 li
682.076 389.82 li
681.837 390.061 li
681.117 390.54 li
680.877 390.54 li
680.156 391.021 li
678.717 391.501 li
678.236 391.981 li
677.996 391.981 li
677.757 392.221 li
677.517 392.221 li
675.356 391.74 li
674.877 391.74 li
673.438 391.021 li
672.477 390.54 li
672.236 390.301 li
671.997 390.301 li
671.757 390.301 li
671.517 390.301 li
671.277 390.54 li
671.036 390.54 li
670.797 390.781 li
670.557 390.781 li
668.877 391.74 li
668.397 391.74 li
668.156 391.981 li
667.197 391.981 li
666.236 392.221 li
665.517 392.701 li
665.277 392.701 li
665.037 392.94 li
664.557 393.421 li
664.316 393.661 li
664.076 394.141 li
664.076 395.102 li
663.837 395.821 li
663.837 397.021 li
663.837 397.742 li
663.837 397.981 li
663.837 398.222 li
663.356 398.942 li
663.117 398.942 li
662.637 399.902 li
662.397 400.622 li
662.156 400.622 li
662.156 400.862 li
662.156 401.103 li
661.917 402.063 li
661.677 405.183 li
661.677 405.902 li
661.677 406.144 li
661.677 409.023 li
661.438 410.224 li
661.197 410.943 li
659.997 412.144 li
659.517 413.104 li
659.517 413.344 li
658.557 416.225 li
658.316 416.944 li
657.597 417.905 li
657.117 418.865 li
657.117 419.585 li
657.356 420.306 li
657.356 420.545 li
657.837 421.025 li
658.797 421.746 li
659.757 422.945 li
660.957 424.146 li
662.156 425.347 li
662.877 426.307 li
663.597 427.506 li
663.837 427.986 li
664.316 428.467 li
665.757 431.347 li
667.197 431.827 li
667.438 431.827 li
668.877 431.347 li
.3412 .56081 1 0 cmyk
@
668.877 431.347 mo
669.117 431.347 li
669.356 431.347 li
669.597 431.347 li
669.837 431.347 li
670.316 431.587 li
670.797 431.827 li
671.277 432.067 li
671.517 432.307 li
671.517 432.547 li
671.997 432.787 li
671.997 433.027 li
672.477 433.987 li
672.717 434.228 li
672.717 434.468 li
672.957 434.707 li
672.957 434.947 li
673.197 435.428 li
674.156 436.628 li
674.877 438.309 li
675.356 439.028 li
675.837 439.508 li
676.557 440.948 li
676.797 441.429 li
677.036 441.669 li
677.277 441.909 li
677.036 443.349 li
677.036 443.589 li
676.797 445.269 li
677.036 445.749 li
677.277 446.949 li
677.517 448.39 li
677.757 449.11 li
677.757 450.55 li
677.996 451.03 li
677.757 451.99 li
677.517 453.431 li
677.757 454.631 li
677.517 455.351 li
677.277 457.271 li
676.557 458.472 li
676.316 459.432 li
676.316 459.911 li
676.797 461.111 li
677.036 462.312 li
677.036 462.792 li
677.036 463.512 li
677.036 463.992 li
676.557 464.952 li
676.557 465.192 li
676.316 466.152 li
676.076 467.832 li
675.837 468.313 li
675.356 468.793 li
674.156 469.513 li
673.438 469.993 li
671.997 470.713 li
671.757 470.713 li
671.517 470.953 li
671.277 470.953 li
671.277 471.193 li
671.036 471.434 li
670.797 471.673 li
670.557 471.913 li
670.557 472.153 li
670.316 472.394 li
670.316 472.633 li
670.076 472.873 li
669.837 473.354 li
669.356 474.313 li
668.877 475.034 li
668.637 475.034 li
667.677 475.754 li
667.438 475.994 li
667.197 476.234 li
666.957 476.474 li
666.717 476.714 li
666.477 477.435 li
666.236 478.394 li
665.517 479.835 li
665.277 480.314 li
664.316 480.794 li
663.117 482.235 li
661.677 483.675 li
661.677 483.915 li
661.438 484.155 li
661.438 484.395 li
661.197 485.355 li
660.957 485.595 li
660.957 485.835 li
660.957 486.075 li
660.957 486.556 li
660.957 486.795 li
660.957 487.035 li
661.197 487.756 li
661.438 488.235 li
661.677 488.476 li
661.677 488.716 li
661.677 488.956 li
661.677 489.436 li
661.677 490.156 li
661.677 490.396 li
661.677 490.636 li
661.438 491.356 li
661.438 491.597 li
661.197 492.316 li
660.957 493.036 li
660.478 493.997 li
660.236 494.477 li
659.997 494.957 li
659.757 495.677 li
659.277 498.077 li
659.277 498.798 li
659.277 499.277 li
659.277 499.518 li
659.517 499.757 li
659.757 501.438 li
659.757 502.157 li
659.757 503.118 li
659.277 503.839 li
659.037 506.479 li
658.797 506.959 li
658.557 507.198 li
658.557 507.439 li
656.877 508.64 li
654.957 509.839 li
654.478 510.319 li
651.356 512.479 li
650.877 512.479 li
650.637 512.479 li
650.397 512.72 li
649.917 512.72 li
647.518 512.479 li
646.557 512.479 li
644.156 512.479 li
643.677 512.479 li
643.438 512.72 li
643.197 512.72 li
642.957 512.72 li
642.717 512.96 li
642.236 513.199 li
641.997 513.199 li
641.037 513.439 li
638.637 514.16 li
638.157 514.16 li
637.438 514.4 li
637.438 514.64 li
637.197 514.64 li
635.518 515.601 li
634.316 516.08 li
633.598 516.561 li
633.356 516.561 li
632.637 517.04 li
631.917 517.521 li
631.917 517.761 li
631.438 518.48 li
630.717 519.44 li
630.717 519.681 li
629.757 521.36 li
629.037 522.561 li
628.797 522.802 li
628.077 523.521 li
626.637 524.961 li
626.157 525.682 li
626.157 526.161 li
626.157 526.882 li
626.157 527.603 li
626.397 528.082 li
626.877 528.322 li
627.598 528.802 li
628.316 529.042 li
628.797 529.282 li
629.037 529.762 li
629.518 530.482 li
630.717 531.923 li
630.717 532.163 li
630.717 532.402 li
630.957 532.643 li
630.957 532.883 li
631.197 533.843 li
631.197 534.083 li
631.197 534.323 li
631.197 534.803 li
631.197 535.283 li
631.197 536.243 li
630.957 537.443 li
630.957 537.684 li
630.717 537.923 li
630.478 538.884 li
630.236 539.364 li
629.997 539.844 li
629.757 540.564 li
629.518 541.284 li
629.518 541.523 li
629.518 542.004 li
629.518 542.244 li
629.277 542.724 li
629.518 543.444 li
629.518 543.685 li
629.518 544.165 li
629.757 544.404 li
629.757 544.645 li
629.997 545.124 li
630.478 546.324 li
630.478 546.564 li
630.478 547.525 li
630.717 548.005 li
630.717 548.485 li
630.717 548.726 li
630.717 548.965 li
630.478 549.205 li
630.236 550.405 li
629.997 550.646 li
629.518 551.126 li
629.037 551.365 li
628.797 551.605 li
628.557 551.605 li
628.316 551.605 li
628.077 551.605 li
627.837 551.846 li
627.356 551.846 li
625.917 552.085 li
625.677 552.085 li
625.197 552.565 li
624.957 552.085 li
624.717 552.085 li
624.478 552.085 li
623.757 551.846 li
623.277 551.605 li
623.037 551.605 li
622.557 551.365 li
621.837 552.565 li
621.598 552.806 li
621.356 553.046 li
620.157 553.046 li
619.917 553.046 li
619.917 552.806 li
619.917 552.326 li
619.917 551.605 li
619.197 552.085 li
618.478 552.085 li
618.237 552.326 li
617.997 552.085 li
617.757 551.846 li
616.797 550.405 li
616.797 550.165 li
617.037 549.445 li
617.277 549.205 li
617.277 548.965 li
617.037 548.726 li
616.557 548.965 li
616.557 549.205 li
616.077 549.205 li
615.598 549.205 li
615.117 548.965 li
614.877 548.965 li
614.877 548.726 li
614.637 548.485 li
614.157 548.245 li
613.677 548.245 li
613.197 548.005 li
612.957 548.005 li
612.717 547.525 li
612.478 547.045 li
612.717 546.564 li
613.197 545.604 li
613.438 544.885 li
613.438 544.645 li
613.438 544.404 li
612.717 544.404 li
612.237 544.404 li
611.757 543.924 li
611.757 543.685 li
611.757 543.444 li
611.997 542.965 li
612.478 542.484 li
612.717 542.244 li
612.957 542.004 li
612.957 541.765 li
612.957 541.523 li
612.717 541.044 li
612.717 540.804 li
612.478 540.564 li
612.237 540.564 li
611.997 540.564 li
611.518 540.564 li
610.557 540.804 li
609.356 540.804 li
608.157 540.323 li
607.677 540.084 li
606.957 539.604 li
606.237 538.884 li
605.997 538.644 li
605.997 538.403 li
605.757 537.684 li
605.277 536.483 li
605.037 535.764 li
604.797 535.764 li
604.557 535.283 li
603.837 535.043 li
603.598 534.803 li
602.877 534.563 li
602.397 534.323 li
601.917 533.843 li
601.438 533.603 li
601.197 533.123 li
601.197 532.402 li
601.197 531.923 li
601.438 530.482 li
601.677 529.282 li
601.438 528.562 li
601.438 528.322 li
601.197 528.082 li
600.957 528.082 li
600.717 528.082 li
600.717 527.842 li
599.277 527.603 li
597.357 527.122 li
595.438 526.882 li
594.237 526.642 li
593.277 525.922 li
593.037 525.682 li
593.037 525.202 li
593.037 524.961 li
593.518 523.041 li
593.518 522.802 li
593.518 522.32 li
593.277 522.081 li
592.317 521.36 li
590.397 520.401 li
589.917 519.921 li
589.438 519.44 li
588.478 517.521 li
581.757 518.001 li
580.797 518.001 li
580.317 518.001 li
578.637 518.24 li
577.438 518.24 li
576.478 518.24 li
576.478 518.48 li
572.397 518.721 li
563.997 519.201 li
563.518 519.201 li
563.037 519.201 li
560.397 519.44 li
557.277 519.44 li
553.677 519.681 li
550.797 519.921 li
550.077 519.921 li
549.598 519.921 li
549.357 519.921 li
549.117 519.921 li
548.877 519.921 li
547.438 519.921 li
546.237 520.16 li
545.757 520.16 li
536.157 520.401 li
534.237 520.641 li
533.518 520.641 li
531.838 520.641 li
529.678 520.641 li
528.478 520.641 li
522.957 520.881 li
522.237 520.881 li
518.638 521.121 li
516.237 521.36 li
512.877 521.36 li
509.518 521.602 li
507.357 521.602 li
504.238 521.602 li
503.518 521.602 li
502.077 521.841 li
501.117 521.841 li
500.877 521.841 li
496.317 522.081 li
491.998 522.32 li
489.598 522.32 li
482.878 522.561 li
477.357 522.802 li
476.878 522.802 li
473.998 522.802 li
470.878 523.041 li
470.157 523.041 li
469.438 523.041 li
469.198 523.041 li
460.798 523.041 li
460.077 523.281 li
457.438 523.281 li
456.958 523.281 li
456.718 523.281 li
456.238 523.281 li
455.038 523.281 li
453.598 523.281 li
452.157 523.281 li
447.598 523.281 li
447.357 523.281 li
445.918 523.521 li
443.758 523.521 li
443.038 523.521 li
431.038 524.002 li
430.558 524.002 li
429.598 524.002 li
429.357 524.002 li
425.038 524.241 li
417.118 524.481 li
416.158 524.481 li
410.639 524.481 li
403.918 524.722 li
402.719 524.722 li
400.798 524.722 li
397.438 524.722 li
389.518 524.722 li
386.878 524.722 li
386.638 524.722 li
383.998 524.722 li
381.358 524.722 li
380.398 524.722 li
380.158 524.722 li
379.918 524.722 li
379.678 524.722 li
379.438 524.722 li
379.198 524.722 li
378.958 524.722 li
377.278 524.722 li
376.558 524.722 li
376.318 524.722 li
376.078 524.722 li
375.838 524.722 li
375.358 524.722 li
375.118 524.722 li
371.518 524.722 li
368.398 524.961 li
364.558 524.961 li
364.318 524.961 li
364.078 524.961 li
363.118 524.961 li
362.878 524.961 li
362.158 524.961 li
360.718 524.961 li
356.878 525.202 li
356.398 525.202 li
355.198 525.202 li
354.718 525.202 li
353.999 524.961 li
353.758 524.961 li
351.358 524.961 li
350.878 524.961 li
349.438 525.202 li
346.078 525.202 li
345.838 525.202 li
343.198 525.202 li
341.758 525.202 li
337.678 525.202 li
336.479 525.202 li
336.238 525.202 li
334.798 525.202 li
332.158 525.441 li
331.918 525.441 li
331.678 525.441 li
329.039 525.441 li
327.358 525.441 li
326.158 525.441 li
324.238 525.441 li
323.039 525.441 li
320.878 525.441 li
315.358 525.682 li
314.398 525.682 li
314.159 525.682 li
311.039 525.682 li
310.798 525.682 li
309.599 525.682 li
298.318 525.682 li
298.079 525.682 li
297.838 525.682 li
297.358 525.682 li
296.398 525.682 li
291.358 525.682 li
290.398 525.682 li
288.719 525.682 li
287.039 525.682 li
285.599 525.682 li
284.398 525.682 li
283.199 525.682 li
279.599 525.682 li
277.918 525.441 li
274.799 525.441 li
271.199 525.441 li
269.999 525.441 li
267.839 525.441 li
262.799 525.441 li
262.319 525.441 li
262.079 525.441 li
261.839 525.441 li
261.119 525.441 li
256.559 525.441 li
255.599 525.441 li
251.279 525.202 li
245.519 524.961 li
244.799 524.961 li
244.319 524.961 li
243.599 524.961 li
241.679 524.961 li
241.439 524.961 li
238.079 524.961 li
234.719 524.722 li
231.839 524.722 li
231.599 524.722 li
230.399 524.481 li
229.439 524.481 li
228.959 524.481 li
220.559 524.241 li
220.079 524.241 li
218.399 524.241 li
213.839 524.002 li
212.399 524.002 li
210.719 524.002 li
209.519 524.002 li
205.919 523.761 li
205.439 523.761 li
204.959 523.761 li
203.999 523.761 li
200.639 523.521 li
199.199 523.521 li
197.279 523.521 li
196.079 523.521 li
195.839 523.521 li
195.599 523.521 li
194.639 523.281 li
191.759 523.281 li
190.559 523.281 li
189.599 523.281 li
185.039 523.041 li
184.079 523.041 li
183.839 523.041 li
183.359 523.041 li
183.119 523.041 li
182.879 523.041 li
181.679 523.041 li
179.279 522.802 li
178.559 522.802 li
169.679 522.561 li
167.039 522.32 li
165.119 522.32 li
160.319 522.081 li
158.399 522.081 li
154.079 521.841 li
151.919 521.841 li
147.6 521.602 li
147.359 521.602 li
146.639 521.602 li
145.199 521.602 li
144.239 521.602 li
141.839 521.36 li
137.52 521.36 li
134.399 521.121 li
133.919 521.121 li
133.679 521.121 li
132.72 521.121 li
128.64 520.881 li
121.919 520.641 li
119.759 520.641 li
120.479 519.921 li
121.2 519.44 li
121.439 518.721 li
121.679 518.24 li
121.679 518.001 li
121.679 517.761 li
121.679 517.521 li
121.679 517.28 li
121.439 517.04 li
121.2 516.801 li
120.72 516.32 li
120 515.601 li
119.759 515.36 li
119.52 515.12 li
119.279 514.64 li
119.279 513.439 li
119.279 512.96 li
119.279 512.72 li
119.279 512.479 li
119.279 512.239 li
119.279 511.999 li
119.04 511.76 li
119.04 511.52 li
118.799 511.52 li
118.799 511.039 li
118.079 510.079 li
117.839 509.839 li
117.6 509.599 li
117.12 509.119 li
116.399 508.64 li
115.439 508.159 li
114.239 508.159 li
113.52 507.919 li
113.279 507.919 li
113.279 507.679 li
112.56 507.439 li
112.32 507.198 li
111.839 506.959 li
111.839 506.719 li
111.6 506.719 li
111.12 506.239 li
110.879 505.758 li
110.639 505.519 li
110.639 505.278 li
110.639 504.318 li
110.639 503.839 li
110.639 503.598 li
110.399 503.118 li
110.159 502.397 li
109.919 502.397 li
109.439 501.678 li
109.2 501.438 li
108.959 501.198 li
108.239 500.957 li
108 500.718 li
107.52 500.478 li
107.279 500.478 li
106.56 499.998 li
106.32 499.518 li
106.08 497.838 li
106.08 497.117 li
106.32 496.157 li
106.56 495.437 li
107.04 494.717 li
107.279 494.717 li
107.279 494.477 li
107.759 493.997 li
108 493.997 li
108 493.757 li
108.239 493.757 li
108.959 493.276 li
109.2 493.276 li
109.679 493.036 li
109.919 492.797 li
110.399 492.797 li
110.879 492.557 li
110.879 492.316 li
111.12 492.316 li
111.359 492.076 li
111.839 491.356 li
112.08 491.116 li
112.32 490.876 li
112.56 490.156 li
112.56 489.436 li
112.32 488.956 li
111.6 487.035 li
111.359 486.075 li
111.359 485.835 li
111.359 485.355 li
111.6 484.875 li
112.08 483.675 li
112.32 482.955 li
112.32 482.235 li
112.32 481.994 li
111.839 480.555 li
111.359 479.354 li
111.12 478.635 li
111.12 478.394 li
111.12 478.154 li
111.359 477.674 li
111.359 477.435 li
111.839 476.954 li
112.08 476.714 li
112.32 476.714 li
112.32 476.474 li
112.56 476.474 li
114 476.234 li
114.479 475.754 li
114.72 475.754 li
114.959 475.754 li
114.959 475.514 li
115.2 475.273 li
115.439 475.034 li
115.439 474.794 li
115.679 474.554 li
115.919 473.834 li
115.919 473.354 li
115.679 473.113 li
115.679 472.873 li
115.439 472.153 li
115.2 471.913 li
114.72 471.434 li
113.52 469.993 li
113.279 469.753 li
112.8 469.032 li
112.8 468.553 li
112.56 468.073 li
112.56 467.353 li
112.56 466.152 li
112.8 464.712 li
113.279 463.512 li
113.759 462.552 li
114 461.352 li
114 460.872 li
113.759 460.392 li
113.52 459.911 li
113.52 459.672 li
113.279 459.672 li
113.04 459.432 li
112.8 459.191 li
112.56 458.951 li
112.32 458.711 li
112.08 458.711 li
111.839 458.472 li
111.359 458.231 li
110.879 458.231 li
110.639 457.991 li
110.399 457.751 li
110.159 457.751 li
110.159 457.511 li
109.919 457.511 li
109.919 457.271 li
109.679 457.031 li
109.679 456.791 li
109.439 456.07 li
109.439 455.591 li
109.439 455.11 li
109.919 454.391 li
110.639 453.19 li
110.639 452.23 li
110.639 451.511 li
110.639 451.27 li
110.399 451.03 li
109.439 450.069 li
108.959 449.59 li
108.479 448.869 li
108.239 448.39 li
108 447.91 li
108 447.669 li
108.239 447.43 li
108.239 447.189 li
108.239 446.949 li
108.72 446.469 li
109.2 445.989 li
109.439 445.51 li
109.679 445.269 li
110.159 444.789 li
110.159 444.549 li
110.399 444.31 li
110.399 444.068 li
110.399 443.589 li
110.399 442.869 li
110.159 441.669 li
110.159 439.028 li
109.919 438.068 li
108.72 435.907 li
108.479 434.947 li
108.239 433.987 li
108.239 433.268 li
108.479 433.268 li
108.72 432.547 li
109.2 431.827 li
109.679 431.347 li
109.919 431.347 li
110.159 431.347 li
110.639 431.587 li
111.839 431.827 li
112.8 431.587 li
113.279 431.106 li
113.279 430.387 li
113.04 429.666 li
112.32 428.947 li
111.6 428.467 li
110.639 428.467 li
109.679 428.467 li
105.359 428.706 li
104.879 428.706 li
104.399 428.467 li
104.159 428.227 li
103.919 427.747 li
103.679 427.026 li
103.439 426.065 li
103.919 424.626 li
105.12 422.945 li
105.359 422.226 li
105.6 421.506 li
105.6 421.265 li
105.6 420.545 li
105.12 419.825 li
104.879 419.105 li
104.879 418.865 li
104.399 417.425 li
104.399 417.185 li
104.399 416.465 li
104.639 415.984 li
104.879 415.744 li
105.359 415.505 li
104.879 415.024 li
104.159 414.544 li
103.919 414.305 li
103.679 414.064 li
103.679 413.344 li
103.679 412.624 li
103.679 412.384 li
103.919 411.424 li
104.399 411.184 li
104.639 410.943 li
106.32 411.184 li
106.56 411.184 li
106.56 411.664 li
106.56 412.144 li
105.84 413.584 li
105.6 414.305 li
106.56 415.265 li
108 414.544 li
108.959 414.064 li
109.679 413.584 li
110.159 412.864 li
110.399 411.904 li
109.919 410.224 li
109.679 409.503 li
109.2 408.783 li
108.479 408.303 li
107.279 408.063 li
105.84 408.063 li
105.6 408.063 li
104.639 407.823 li
104.159 407.823 li
104.159 407.583 li
102.72 406.623 li
102.239 406.144 li
101.759 405.902 li
101.04 404.943 li
100.8 404.223 li
100.8 403.502 li
101.04 403.263 li
101.279 403.022 li
102.72 402.302 li
103.2 401.822 li
103.679 401.343 li
104.159 400.382 li
103.919 399.662 li
103.439 398.222 li
103.2 397.021 li
103.2 396.541 li
103.919 394.861 li
104.159 394.141 li
104.159 393.661 li
103.919 392.94 li
103.919 392.461 li
103.919 392.221 li
103.919 391.501 li
103.919 391.021 li
104.159 390.781 li
104.879 389.82 li
105.12 389.581 li
105.359 389.101 li
105.359 388.62 li
105.359 388.14 li
105.12 387.42 li
104.879 386.939 li
103.919 386.22 li
103.439 385.98 li
103.2 385.739 li
102.959 385.739 li
102.479 385.739 li
101.279 386.22 li
100.56 386.22 li
100.32 386.22 li
99.3594 385.5 li
99.1196 385.5 li
98.1592 385.02 li
97.4395 385.02 li
95.7593 384.54 li
95.5195 384.54 li
95.2793 384.3 li
95.0396 384.06 li
94.5596 383.34 li
94.5596 383.1 li
94.0796 382.38 li
94.0796 382.14 li
94.3198 381.899 li
94.5596 381.419 li
95.5195 380.699 li
96.7197 379.739 li
96.9595 379.499 li
97.1997 379.019 li
97.4395 378.539 li
97.4395 378.299 li
97.4395 377.818 li
97.1997 376.858 li
97.1997 376.619 li
96.7197 374.458 li
96.4795 374.219 li
95.9995 373.738 li
95.5195 373.498 li
94.7998 373.258 li
94.3198 373.498 li
94.0796 373.498 li
93.5996 373.978 li
93.3594 374.219 li
93.1196 376.139 li
92.6396 378.299 li
92.3999 379.019 li
92.1597 379.019 li
91.9199 379.259 li
91.6792 379.259 li
91.1997 379.259 li
90.9595 379.259 li
90.7197 379.019 li
90.4795 379.019 li
90.2393 379.019 li
90.2393 378.779 li
89.9995 378.779 li
89.7593 378.539 li
89.2793 377.818 li
89.2793 377.578 li
89.0396 377.578 li
88.7998 377.099 li
88.3198 376.378 li
88.0796 376.378 li
87.8398 376.139 li
87.3594 375.898 li
86.3999 375.419 li
86.3999 375.178 li
85.9199 374.219 li
85.6797 373.019 li
85.6797 372.298 li
85.9199 371.577 li
85.9199 371.338 li
86.1597 370.857 li
86.6396 370.377 li
87.1196 369.897 li
87.3594 369.418 li
87.5996 368.937 li
87.5996 368.457 li
87.3594 367.978 li
87.3594 367.497 li
87.1196 367.018 li
86.6396 366.777 li
85.1997 366.057 li
84.9595 365.817 li
84.4795 365.577 li
84.4795 365.337 li
83.9995 364.377 li
83.7593 364.137 li
83.7593 363.896 li
83.5195 363.177 li
83.5195 362.696 li
83.5195 362.217 li
83.7593 361.496 li
83.9995 361.256 li
85.4395 359.336 li
85.9199 358.855 li
86.1597 357.655 li
86.1597 357.176 li
86.1597 356.936 li
86.1597 356.695 li
86.1597 356.455 li
85.9199 355.975 li
85.6797 355.495 li
84.7197 354.535 li
84.4795 354.295 li
83.9995 354.055 li
83.7593 353.574 li
83.5195 352.854 li
83.2793 352.135 li
83.5195 351.415 li
83.5195 351.174 li
83.5195 350.935 li
83.7593 350.455 li
84.4795 349.975 li
84.7197 349.734 li
85.4395 349.734 li
86.8794 349.975 li
87.8398 349.975 li
88.3198 349.734 li
88.5596 349.494 li
89.0396 349.015 li
89.0396 348.773 li
89.0396 348.294 li
89.0396 348.055 li
88.7998 347.573 li
88.3198 346.854 li
87.3594 346.373 li
86.6396 345.894 li
85.6797 345.414 li
85.4395 344.693 li
85.4395 344.453 li
85.4395 343.733 li
85.6797 342.773 li
85.9199 342.533 li
86.3999 342.293 li
86.3999 342.053 li
86.6396 342.053 li
87.1196 342.053 li
87.8398 341.573 li
88.5596 340.853 li
88.5596 340.373 li
88.5596 340.133 li
88.5596 338.933 li
88.7998 337.973 li
88.7998 337.732 li
89.2793 337.012 li
89.9995 336.292 li
90.2393 336.292 li
90.2393 336.052 li
90.4795 335.572 li
90.2393 335.092 li
90.2393 334.372 li
89.9995 334.372 li
89.7593 333.892 li
89.2793 333.172 li
88.5596 332.932 li
87.1196 332.452 li
86.6396 332.211 li
86.1597 331.731 li
85.9199 331.731 li
85.6797 331.491 li
85.6797 331.252 li
85.6797 331.011 li
85.4395 330.771 li
85.1997 330.052 li
85.1997 329.811 li
85.1997 329.571 li
85.6797 328.371 li
85.6797 328.131 li
85.6797 327.651 li
85.4395 326.931 li
85.1997 326.451 li
84.9595 326.21 li
84.7197 325.971 li
84.4795 325.73 li
@
84.4795 325.73 mo
83.9995 325.49 li
83.2793 325.011 li
83.0396 324.771 li
82.5596 324.771 li
82.3198 324.29 li
82.0796 323.811 li
81.8398 323.811 li
81.8398 323.57 li
81.5996 323.33 li
81.3594 322.85 li
81.3594 322.37 li
81.3594 321.41 li
81.1196 320.689 li
80.8794 320.21 li
80.1597 319.489 li
80.1597 319.25 li
80.1597 319.01 li
79.9199 318.77 li
79.9199 318.29 li
79.6797 318.049 li
79.9199 318.049 li
79.9199 317.81 li
80.1597 317.329 li
80.6396 317.09 li
81.8398 316.609 li
82.0796 316.609 li
82.3198 316.369 li
82.7998 315.89 li
82.7998 315.409 li
82.7998 315.169 li
82.7998 314.929 li
82.7998 314.689 li
82.0796 313.248 li
81.8398 312.769 li
82.0796 312.289 li
82.0796 312.048 li
82.7998 311.328 li
83.0396 311.089 li
83.2793 310.608 li
83.5195 310.128 li
83.7593 309.168 li
83.7593 308.448 li
83.7593 308.208 li
83.5195 307.728 li
83.0396 307.488 li
82.5596 307.008 li
82.3198 307.008 li
80.8794 306.768 li
80.6396 306.768 li
80.3999 306.768 li
79.4395 306.768 li
78.7197 307.248 li
78.4795 307.248 li
78.2397 307.248 li
77.5195 307.248 li
77.2793 307.008 li
77.0396 306.768 li
76.7998 306.527 li
76.7998 306.287 li
76.7998 306.047 li
76.7998 305.808 li
76.7998 305.567 li
77.0396 305.327 li
77.5195 304.367 li
77.7593 303.887 li
77.7593 303.647 li
77.7593 303.167 li
77.2793 302.687 li
76.5596 302.207 li
75.3594 302.207 li
74.1597 302.447 li
73.9199 302.927 li
73.6797 303.647 li
73.4395 303.887 li
73.1997 304.127 li
72.9595 304.367 li
72.7197 304.367 li
72.4795 304.367 li
71.7598 304.127 li
71.7598 303.887 li
71.52 303.647 li
71.2798 303.647 li
71.2798 303.407 li
71.0396 303.167 li
71.0396 302.927 li
71.2798 302.447 li
71.52 301.487 li
71.7598 301.487 li
72.9595 300.527 li
73.4395 300.046 li
73.4395 299.807 li
73.6797 299.566 li
73.6797 299.086 li
73.4395 298.366 li
73.1997 298.126 li
72.9595 297.886 li
72.4795 297.406 li
71.7598 297.166 li
70.7998 297.166 li
69.8398 297.406 li
69.8398 297.646 li
69.1196 297.406 li
68.8794 297.166 li
68.3999 296.926 li
67.9199 296.446 li
67.9199 296.206 li
67.6797 295.486 li
67.1997 294.045 li
67.1997 292.845 li
67.1997 292.605 li
67.1997 292.125 li
67.6797 290.925 li
67.6797 290.685 li
67.9199 290.445 li
67.9199 290.205 li
68.1597 289.725 li
68.6396 288.765 li
68.8794 287.564 li
68.8794 286.604 li
68.6396 286.125 li
68.3999 285.645 li
68.3999 285.164 li
67.9199 284.924 li
67.4395 284.444 li
66.7197 284.204 li
65.2798 283.724 li
65.04 283.724 li
64.5596 283.484 li
64.3198 283.244 li
64.0796 283.004 li
63.5996 282.284 li
63.3594 281.324 li
63.1196 280.844 li
62.6396 280.124 li
62.3999 280.124 li
62.3999 279.883 li
61.9199 279.644 li
60.9595 279.163 li
60.7197 278.683 li
60.4795 278.683 li
60.4795 278.443 li
60 277.723 li
59.7598 277.003 li
59.7598 276.763 li
59.7598 276.043 li
59.7598 275.803 li
59.7598 275.563 li
60 274.603 li
60.2397 274.603 li
60 274.123 li
60 273.882 li
60 273.643 li
60 273.402 li
60 273.163 li
60 272.922 li
59.7598 272.682 li
59.7598 272.442 li
59.04 271.482 li
58.7998 271.242 li
58.7998 271.002 li
59.04 270.282 li
59.2798 270.282 li
60.4795 269.802 li
60.7197 269.802 li
61.1997 269.802 li
61.4395 269.802 li
61.9199 269.322 li
62.1597 269.082 li
62.8794 268.122 li
63.1196 267.881 li
63.1196 267.642 li
62.8794 267.162 li
62.6396 266.921 li
62.3999 266.441 li
62.3999 266.201 li
62.3999 265.961 li
62.6396 265.001 li
62.6396 264.281 li
62.3999 263.561 li
61.6797 262.841 li
61.1997 262.121 li
59.52 260.92 li
59.04 260.44 li
58.5596 259.48 li
58.3198 258.52 li
58.3198 257.08 li
58.3198 256.6 li
58.3198 255.88 li
58.0796 255.64 li
58.0796 255.16 li
57.5996 254.439 li
56.6396 253.239 li
55.1997 252.519 li
54.4795 251.799 li
54 251.319 li
53.52 250.839 li
53.2798 250.359 li
53.2798 249.879 li
53.04 249.159 li
53.04 248.679 li
53.04 248.199 li
53.04 247.718 li
53.2798 247.238 li
53.52 246.999 li
53.7598 246.518 li
54.2397 245.558 li
54.2397 245.318 li
54.2397 245.078 li
54 244.838 li
54 244.598 li
54 244.358 li
53.7598 243.878 li
53.52 242.917 li
53.52 241.717 li
53.7598 240.757 li
54 240.277 li
55.4395 238.357 li
56.8794 236.917 li
57.1196 236.197 li
57.5996 234.997 li
57.8398 234.036 li
57.5996 232.596 li
57.3594 230.916 li
57.1196 230.676 li
56.3999 229.476 li
56.1597 228.996 li
54.7197 228.516 li
54.2397 228.516 li
53.2798 228.275 li
53.04 228.275 li
52.5596 228.275 li
51.1201 228.035 li
50.8799 228.035 li
49.4395 227.555 li
48.7197 227.795 li
47.2798 227.555 li
47.04 227.315 li
47.04 227.075 li
47.04 226.595 li
47.2798 226.355 li
47.52 225.875 li
47.04 224.915 li
46.7998 224.675 li
46.3198 224.675 li
45.6001 224.435 li
45.3599 223.715 li
45.6001 223.234 li
46.7998 222.754 li
47.04 222.274 li
46.7998 221.794 li
47.04 220.834 li
47.2798 219.394 li
47.2798 217.714 li
45.3599 217.714 li
44.8799 217.474 li
44.8799 216.994 li
44.8799 216.273 li
44.8799 216.034 li
44.8799 215.553 li
45.1201 215.313 li
45.6001 215.553 li
46.0796 215.553 li
46.3198 215.313 li
46.3198 215.073 li
46.5596 214.833 li
46.3198 214.833 li
46.0796 214.593 li
45.8398 214.593 li
45.3599 214.113 li
45.3599 213.873 li
45.3599 213.633 li
45.6001 213.393 li
45.6001 213.153 li
45.3599 212.913 li
44.8799 212.673 li
44.8799 212.433 li
44.8799 212.193 li
44.8799 211.953 li
44.6401 210.513 li
44.3999 210.272 li
44.1597 209.313 li
43.9199 209.072 li
43.6797 208.833 li
43.1997 208.592 li
42.9595 208.833 li
42.4795 209.072 li
42.2397 209.553 li
42 209.553 li
41.7598 209.553 li
41.7598 209.313 li
41.52 209.072 li
41.52 208.833 li
41.52 208.592 li
41.52 208.353 li
41.7598 208.353 li
42 208.112 li
42.4795 208.112 li
42.7197 208.112 li
42.9595 207.872 li
43.1997 207.632 li
43.4395 207.152 li
43.4395 206.912 li
43.4395 206.672 li
43.1997 206.432 li
42.2397 204.752 li
41.7598 204.512 li
41.52 204.271 li
41.2798 204.271 li
41.2798 204.032 li
41.04 203.792 li
41.04 203.552 li
40.7998 203.552 li
41.04 203.312 li
41.04 202.832 li
41.04 202.352 li
40.5596 201.631 li
40.3198 201.391 li
40.0796 201.391 li
38.8799 201.871 li
38.6401 201.871 li
38.6401 201.151 li
38.8799 201.151 li
39.1201 200.911 li
38.6401 200.191 li
37.9199 199.231 li
37.6797 199.231 li
37.4399 199.471 li
37.4399 199.711 li
37.4399 199.951 li
37.1997 199.951 li
36.7197 199.951 li
36.4795 199.711 li
36.9595 199.231 li
36.9595 198.991 li
36.9595 198.751 li
36.9595 198.271 li
36.9595 198.031 li
35.7598 197.311 li
35.04 197.311 li
34.5596 197.071 li
34.7998 196.831 li
34.5596 196.11 li
34.3198 195.871 li
34.0796 195.63 li
34.0796 195.871 li
33.6001 196.11 li
33.1201 196.11 li
32.8799 196.11 li
32.8799 195.871 li
32.8799 195.63 li
32.6401 195.63 li
32.1597 195.39 li
30.96 194.43 li
30.96 193.95 li
31.2002 193.71 li
31.6797 193.23 li
31.6797 191.31 li
31.4399 191.31 li
30.7202 191.55 li
30.2397 189.87 li
30 189.87 li
30 189.629 li
30.2397 189.149 li
30.48 188.909 li
30.96 188.429 li
31.2002 187.709 li
31.6797 187.229 li
32.1597 187.229 li
32.3999 186.989 li
32.3999 186.509 li
32.1597 186.509 li
31.9199 186.509 li
31.4399 186.509 li
30.96 185.789 li
30.96 184.829 li
30.96 184.589 li
31.2002 184.589 li
31.4399 184.349 li
31.6797 184.108 li
32.1597 183.148 li
32.6401 182.428 li
32.8799 182.428 li
33.1201 182.428 li
34.0796 182.668 li
34.3198 182.668 li
34.5596 181.948 li
35.2798 181.228 li
35.7598 180.028 li
35.7598 179.548 li
35.7598 179.308 li
36 178.828 li
35.7598 178.588 li
35.2798 178.588 li
35.2798 177.868 li
35.52 177.868 li
36 177.868 li
36.4795 177.388 li
36.7197 177.388 li
36.9595 176.907 li
37.4399 175.947 li
36.9595 174.987 li
37.1997 174.507 li
38.1597 174.507 li
38.6401 175.467 li
38.8799 175.707 li
39.1201 175.467 li
39.1201 174.747 li
39.3599 174.507 li
39.3599 174.267 li
39.6001 174.267 li
39.8398 174.507 li
39.8398 174.747 li
40.0796 174.747 li
40.3198 174.747 li
40.5596 174.747 li
40.5596 174.507 li
40.7998 174.507 li
40.7998 174.267 li
40.5596 174.267 li
40.3198 174.027 li
40.0796 173.787 li
40.0796 173.307 li
40.3198 173.067 li
40.5596 173.067 li
41.2798 172.827 li
41.2798 172.587 li
41.7598 171.626 li
41.7598 171.387 li
41.52 171.387 li
41.2798 171.626 li
41.04 171.626 li
40.7998 170.667 li
40.7998 169.707 li
41.04 169.226 li
41.2798 168.986 li
41.52 168.986 li
42.2397 168.506 li
42.2397 167.306 li
42 166.826 li
42.7197 166.586 li
43.4395 166.586 li
43.6797 166.346 li
43.4395 166.106 li
43.1997 165.625 li
42.4795 165.146 li
42.2397 165.146 li
41.7598 164.666 li
41.7598 164.425 li
42.2397 164.425 li
42.4795 164.425 li
42.4795 163.706 li
42.4795 163.465 li
42.2397 162.265 li
42 162.025 li
42 161.785 li
42 161.305 li
43.9199 159.865 li
44.1597 159.865 li
44.3999 159.865 li
44.3999 160.345 li
44.6401 160.345 li
44.8799 160.345 li
44.8799 160.105 li
44.8799 159.865 li
44.3999 159.385 li
44.6401 159.145 li
45.1201 158.665 li
45.6001 158.425 li
45.8398 158.425 li
45.8398 157.944 li
46.3198 156.984 li
46.7998 156.264 li
46.5596 154.824 li
46.3198 154.584 li
46.3198 154.344 li
45.8398 154.344 li
45.1201 154.104 li
44.6401 153.384 li
44.6401 152.904 li
45.1201 152.904 li
45.6001 152.184 li
45.6001 151.704 li
45.6001 151.224 li
45.8398 150.743 li
46.3198 150.503 li
46.7998 150.503 li
47.04 150.503 li
47.2798 150.263 li
47.52 150.263 li
47.7598 149.783 li
48 149.303 li
48 149.063 li
48 148.583 li
47.7598 147.863 li
47.7598 147.623 li
47.2798 147.143 li
47.04 147.143 li
46.7998 147.143 li
46.0796 146.423 li
46.0796 146.183 li
45.8398 146.183 li
45.8398 145.942 li
45.8398 145.703 li
45.8398 145.462 li
46.0796 145.223 li
46.3198 144.502 li
46.3198 144.262 li
46.0796 144.022 li
45.8398 144.022 li
45.6001 144.022 li
45.3599 143.782 li
45.3599 143.542 li
46.3198 142.342 li
46.7998 142.582 li
47.04 142.582 li
48.4795 142.342 li
48.7197 142.342 li
48.7197 141.862 li
48.9595 141.622 li
49.9199 140.662 li
50.3999 140.422 li
50.8799 140.662 li
51.6001 140.662 li
51.8398 140.422 li
52.0796 139.942 li
52.5596 138.981 li
52.5596 138.742 li
52.5596 137.542 li
52.5596 137.301 li
52.5596 137.062 li
52.5596 136.821 li
51.8398 136.581 li
51.8398 136.341 li
51.6001 136.341 li
51.8398 136.341 li
52.0796 135.861 li
53.04 134.901 li
53.52 134.421 li
54.4795 132.98 li
54.7197 131.78 li
54.4795 131.78 li
54.2397 131.541 li
54.2397 131.3 li
54.2397 130.58 li
54 129.86 li
53.2798 128.66 li
52.7998 128.18 li
52.3198 128.42 li
51.8398 127.7 li
51.6001 127.22 li
51.6001 125.779 li
51.6001 125.299 li
51.6001 124.579 li
51.8398 124.099 li
51.8398 123.619 li
51.8398 123.139 li
51.8398 122.659 li
52.0796 122.419 li
51.8398 122.419 li
51.8398 122.179 li
51.6001 121.939 li
51.1201 121.939 li
51.1201 121.219 li
51.1201 119.779 li
51.3599 118.818 li
51.3599 118.579 li
51.3599 118.338 li
51.1201 117.138 li
50.8799 116.418 li
49.9199 115.938 li
48.9595 115.938 li
48.7197 115.938 li
48.2397 116.418 li
48 116.418 li
47.2798 116.658 li
46.7998 116.658 li
46.0796 116.898 li
45.8398 116.658 li
45.8398 116.418 li
45.3599 115.698 li
44.3999 115.218 li
43.9199 115.458 li
43.1997 115.458 li
42.9595 115.218 li
42.2397 115.218 li
42 115.458 li
42 115.698 li
41.7598 115.698 li
41.52 115.698 li
40.5596 114.498 li
40.5596 114.258 li
40.5596 113.538 li
40.3198 113.297 li
41.04 112.578 li
41.7598 112.578 li
42.4795 112.097 li
42.7197 111.617 li
42.4795 110.657 li
42.4795 110.417 li
42.2397 110.177 li
@
grestore
gsave
6.72021 604.894 mo
6.72021 9.12109 li
786.236 9.12109 li
786.236 604.894 li
6.72021 604.894 li
cp
clp
grestore
gsave
791.996 0 mo
791.996 612 li
0 612 li
0 0 li
791.996 0 li
cp
clp
grestore
314.153 441.599 mo
347.492 421.422 li
353.924 432.826 359.776 442.475 373.811 442.475 cv
387.263 442.475 395.744 437.213 395.744 416.743 cv
395.744 277.54 li
436.685 277.54 li
436.685 417.325 li
436.685 459.729 411.829 479.031 375.565 479.031 cv
342.814 479.031 323.804 462.069 314.153 441.599 cv
false sop
.69 .625 .629 .579 cmyk
f
458.913 437.213 mo
492.249 417.911 li
501.025 432.241 512.43 442.77 532.606 442.77 cv
549.57 442.77 560.389 434.287 560.389 422.59 cv
560.389 408.553 549.276 403.581 530.56 395.395 cv
520.326 391.006 li
490.788 378.433 471.194 362.641 471.194 329.303 cv
471.194 298.597 494.59 275.201 531.146 275.201 cv
557.173 275.201 575.889 284.267 589.34 307.955 cv
557.463 328.425 li
550.444 315.852 542.843 310.879 531.146 310.879 cv
519.155 310.879 511.552 318.483 511.552 328.425 cv
511.552 340.708 519.155 345.68 536.7 353.284 cv
546.935 357.67 li
581.735 372.585 601.33 387.791 601.33 422.004 cv
601.33 458.854 572.379 479.031 533.484 479.031 cv
495.467 479.031 470.902 460.9 458.913 437.213 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Nathan Smith) ()%%Title: (iowajs.eps)%%CreationDate: 10/18/11 4:46 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&q-G#NncsJJ_!bYHLW*Zq^-GeZ_*HWrCk76VE.@pHfOiEsh]MUGDj@bsH?4G$1G^uc@*H+1>"YVhWDk/Y$>Zc)k5A6M@BK4[%KtLh5H.145\n9W@hmRQZ_Ud1UUD$C%Z8!5E6:._`q2Prac&rP#f3<G@YDm/gYhcm+F?7t'9<6lOaB/DC2tMCh#C'.m?T)4s>5u^J%^!uMBF+qcFI8bK=C"->Rf6S7=/85CT`m*5Xe'%^ha6RT;]oY/n(LcoiA9lm[]HCGV:>tU&h93ieit*t_gi'sEisn7lDoh[:7^ia7%J=>[uam.aENa+k8g&L<;j2Su8Vq\@uT3BM.1T\Z@lg;+:IYQH3pobXNM]WFWqR,kip/:?;#^%-1"1l9\n;X8r-B](?UB,9-7c$'E%6:6B:'[X#Qa&D"_$UCr.Ve3EgH)-E`I(H*6WjKAc:]C[ef.BYEkU1e!r:/3KT/N=Q:fRT@T>%ng\o558LqI)AWB[WL5R,%P:%5RI%IV<hsk?BS]8;Mu4a%Ls^fWG2,BN%f<!=*P&k1A0%WU[Xg3dKQ2/8SGFY^iEh_h2k;.DgXkQ7kk\q'XE*1W!sQrm9VX6g218p=$oX%F2>5FnUURO^M^KPmXoD"NP%bG82El0o],Nb>$krh\(bT%q?*?ipO[cLXgE:=$i'Q(XOjO<!SsCXcqdgdqQd=0%+8CaGO#5jY34oU%)ZS'crRjVge)6j4ihthpVsiYY[E;@q`8@GK:JDLpRO3GdX5Vh*/]Y\,Ne;gA%]47d9]\7A)UHn,0obX3)B\t;gV/`JHll;G2uLTn%eLIGr<q4FL'q\I+R&3p%VmVuRi7kXX5-NN#41*#7^9g)27/@VTjNgOV=27U*Kl+\&9SI?C/Z$dt7JM^RYXS>DmH0Y+mp_dU'E>ob%i@!bUksTU4(?$XL)h0)iD8J%W2/2lR$JU9,R&3nON;!k6SC3d&O\uKMl'o'A[.^lpZu36mX?#_oSq?sZ<7jD4`11KOdT4h0[)_Yp%VS`&s*i;o1mpc1`'E>r#dJh0^>'!+$'2r?:n<<PijUt0e>!A7nGlVX*q1n\^XWOB#VP81mFJ1:a[E"`bHI6bIcFgo*$N:Rb@-]db%@dEN#g1pHugP;DgMXi^7O4&]qMk?@@>F-jZcK8Vl;N@&.\XW1Ek7u9Z=EDV6PSa,)i-e5^:2<A!:<TJU_j^0<iGG?4a&K]nRQGqi%5,\Eoc0<<Fge@U8dY?m\,QB1l#,@a'P:Q.M)N64BVh"LjGB:J/p^c6lG_hFQTU.[(K7:TSED#6F!B#+-H$stK1gg*VY&!)?rh`Rj%BE&Bm4pc\eIlN/@^Yh'LQRg]H7=sFhTBjq?KAZ<nkL%%-O-f7=J!C@h')\X,f%0'B_/K0'='/h-8FW,JgXr0K#J]Lf:&LdW*;^41%Btr*2q-WbQ[*PtVQ<d^u+[$K'rCX1mEN?L)LHe%6r7f,\_1.8oI]ltYqR;JJj&Oq#3r=K;aZ#:YCrH>JeJeAThoZJBc2Xf^r(d)s%ce7'<BYL/q2ondn?I3T<Sr*V%JH$?'=>JWLpr%@)DghTXk\k_#lgmh0;RTi2C'Aq@cq%qsh^&-8gHAI4m;KTOQgpLTm9=5j>UR2H%b"+b35p73:c(W:7SuMR>f/B9b)>Y`W_oC>Z5C_)8)pk=%0mXI9ch`"(5%At(?k.UNNW"NIWfg]J,P7Tj9!Z-9XZ2R>Ybsrc[JtB1%@5$0`=RuKs2"0T4GV3&?o?dM@16LIhP`"tf".b&;:8R^[q+&Rbq1k!$a?9)ZQ;"%m@ij%k\2=!<o(cYc2O=X)5A2YeVJMUEX.Zs$%>=M3Q[sb,(:`8e!R7d`;S*4t@VR:Y/pQ)!C+?rkn%33s%*olK,-.dI0NGI.'4K?o'J"U&ir\i'35-E4'TD_E*LSRd:X:?<93G"`Z%CWDh=[RVndcpgOHa1mi#,:pI8Y2P8UTku$?U?YR&527R^le\L[[`u1tIrUOGQL0fsBT[F=VNp[9ArL=#5oZ7fG*A_)rLYDOLF_+(%]Sbb>+%#S6i,-&?Za/nds6(Lsr9`+_!Y-e>P4b8n8WRHX@I7<pG4U2rO(Bf1c6``u=o>=I/Ap3]S9ld&DT;^.k%)M#qXNS%jNks&%Cl`.`ZDf1OOngf>*]+e(=#>-'ikQ*#*M47B]2`(559O1]M7tl]fr4<6[(X0LG'"t99!h=;aV>69f%!['s4fJ92dF8ND"uC#V.BXD%_EHXdfiV^CnaQDT8l(0&*jcSaBghjQf&9c^E8?2=c<.N5WtK7oX'L$NCOajM8BZ+O=$3RBiRU-,;r1:JNVQRfDb7QAJ%8PNCBgqq%lu6lO5NN6`#!Fj%\ql;A:[jti0?6O6;q3VBSlH(e\nkVO?sI^>l[O;WgsFM$e>"$oHn7kL"[6U8>Tu&ILiR/n%9Re=8ji6YW-H4@%P3fL$E31uI#t]VJ.9?%F1&ne"pc%G353EA5^,M5PmB7@:;SS'6MY'k]Uu<_AD#i1Bk*?p&@;gR*GeF:X&%-a:$RnQH._qC5dUR%@%QTZ'b9W#J#qH$;.\Co%`.)n*)d?X+*QIRIQCnnnn@kmQkN]E0-X9['^0&)5h`;FbH8,NeXZ?AN,]b0qiL1o2r4-*AQF4Y`!nK,99%/*mhP1]42l=NjGC-$+KrC:XM6?"8:]6##plYFqYs(Oq#t'=J*&60t;&SQY7bAjJXp%D;';6h;in]O,[_H*3l+Uj(Ar&,%qK4d]le%'e\><)3RpFp/oZdYq%=DHN]qD7=-RdY434B/ukPnnkkC0pb``bWS"@@a,/RbOg9hO!64U7j.Xt.mD!m?,gio,gUaei@6,LMs'"1`%`K:4E76<oqbPRXpLF0-PU-BBPeimu9&B_oEc*1qGeiBMX7@#sIa#h*4F;DeUL!$8V\Mhhu[!k!Bh]LoqOG[JgTCaAZC8bo:H]6Od%+)eM;niSHZ!r:.8"U.?nRN"3S<lHP)NR_!oCG)OWi1(_WK6)u,F/s'demn3o?*atq_hRuql;g?UA'/DkY(Zbs#,HMZ[5,+.am3lB%W@@-=o^h",0W#^9[&3a5_-J6PL_#msoX')C27ic6]"]i^9_NDGlC62X'n<P%>,?8,F+g[%qF15kA[EUps$K=fi(MQ7aXfs)`;fHk%efD/F9LUXE#=73i*L;T([01p+_HG5>dk/JjV1Z11X46W$7So#i38UZ>'t&k!PQoMUa;RK+a=:5>MAC];%^@o;^!CIl):?TYE`=X1%dRJ'DfRn1MPJjG"_U-s`UGY-(f.&[!Irr(1Oa+7h0&!?`NMU]qSVHZ]2;Cip:Z82q7d.i'<"&YtN2*ebeo8m#Zo`f$M+Ae%X0<&3%Dm+G#K@RG#X],C_dAT8bl:-eLP?eXP[4<0=4Z8(gCn-,34j&8]!+r/CM=E9i:jgcS1`'Ycc85DkLQj_ADc9eQB=F+9j7DV@mbmr1%Uhs!*B=+T:_gI>"=T(&&Iq2Lt;3+_Ff*+\nWe6:=*ZOq0e_%@qM@St?9-.@1`tI:1Yu,^nr0CspaR;r.i?++M,=U0HAGpGneT3S<%;2KC*nX8]C:IqD%ho'scUgFpV-Ui3Y5?J`OP&73@$CVY-YV[8@MW(L:IacqKr5O3/.rNQG1^/(td6qaa_&8$LEtXUe0V,c547TJW%OHaJLZ:(:fe+hY67e7[^CS9RbX]IVoUVdU_3,H'1=qC7npeIEN1qFcIoO&$spW\-p;Em&/TSVAeH/dX"^3m_kc$&F5D7fVEQ(+r3%[r*/\YAHD4iurnkqn$k"S]OY`+S^-Nn^ME?l;)=SW>X5mlKq'45(o9ETDWp%\(;S6>4'r"Fc(&ns(K'PhP=rk;K(FTcg0u-hH:r7%e=6,ST&:gUh5<Kq8KDIYj;hVG19GaBo4p"=k']b\8cMc]UKI!_:@@VIO*5uSrR#o7Ir2T"7(2A*OZS1%MWt-YAK6jLRKlPZTP-nJ%6+E^_]DIX>"]?_7!"]+O\QA)M02E,GqV1&Z?!ICbcUCFt=[.l<kNd!Njf.hin<8MFf%]#Y]9gOZT:Kl[2(^b_`il<&4YS&l3^IUe%YA\Zi;uYj_rmi3;FrtKFjb_(*^&c%uMn]#_FID@A-[8$VpWo0q-Wf/=[f4`$J)hE=EQo8\UV'r`D<0l#jccUo2eWAAWoXb3r,A=l%*']f]b?t/RIscf#^B+1,hTG<KYJ+fJHU'6E8\0iW>a\3U`E^+cJe*=NPao5\%#&ICbL_^#fAI"_qSu8'H^6^Sif=7'Fu!,g:T+]d%*9bY?CO5^C@K!#'A"HZZn2?VT8etI,PDbs%Fa067>SDh\]_^TY?-#bf>GM]R_'!QoC\/2Z;jbi0_dLP6"=@[)lH2oiU,p:gRK!`0%M17\E+Z8QP5O%&AHb90WqaTqi`Vf@X?XK8kGTJ,Iqs!gLgOP-"%[0rImJ?i0M\5#'V7M#$HF[rQRP^"d05gr(`)HTtre\JsT2'lN%G&I;X[l]L%5#*5Ed%HW!J(.ghGZr$I$0dm4[V.EsPE,4c^Q^c%^)@jpo?t3sDVSlu$r8nXpU9D]M&\.HB4r5<#H6b]U_1;p-`8"_%pCBh%4d?YJgAb-eI;*5#r1:UuD]7gIIq0VcR.P=ZBPcP]8#P*frHfjD?cRp0SN<c&39S*hbK>ipq7(sdr.D$?s+aJ*q=UA0n8/"]%%ti0Ne(qcE(-=Q>5AntXP+2:"G^=VY19a0h^K:EG^0^C#:uWP`qTmW=pG#=I=Mhh^<V5).*_lKLVD7ji2h`:oh4lEKAnfD[Is4hA%ajsXtP\/^Z\tB;p2L]f50ud@"'n,6e0]s*XGLH>$h_iK#i.(X"%o^s7?%pm"[seiKd'334LTJP74Yo-0i@ZQ6R/h'XZs!3iD*MBG%GAg^Yp3loM%h?qOq--]+*eDQLl<=0'4\334cF<,1DPKAp8)p`[YM@]9lHMEaNlD;0]V=S7dJ9\8$dVM%bSt*cQ^[][#qOQW7lUH5%[i7kDClM(!XS#npo9_`heTgpT@XuT+a-Y76Cr8$@jG"S7H_Z]\D4<2K9hhV-_+45/.[jZW6cusoXuAF\F^Tp85G89Wp\E+`s"uR_%,3YJe]dPb@B3N\B?0REfG,*N"s3\o;D>^l4hme1$eo.0eT"9E/cJuR2kCjY0Cnp*9lck3GqElKWfQuR@3.83d\:=@"Q,nT4dF77,%*O%)-j1*lZK(2Bs](o`n*u=i.VtL#C;i+A:+jeqdM!\O7S`^P`IsL=4Ls^K`Z*@e"]^ObCp\/-M<OVLaO)@U06$+OMq7$2>eA(VI%qXIGo3($L.(6uma,=/0^W)oXsJ+0<?PJB#a+_uA:6k:QgC]"Rs>TeH=l1Z(h)LE)&'%SC,+r8$Fl^47m.a7dg>&XC;n!q>(>*0[V%SmS(XNI7YYDE[TJXB4C6E*ebdjcjsB:N&KQ>b1j1)#42')t(Jf)fM7K>CSK`DeS-A021\4$0WPSeE=ttmGm;^2ta9"mQgd@1nONm%C&+RpZ;pA1]0NSiH[EFNOYS*ADX4J)K$5gEPnSPaV'_MN*s"I[[G(A7qe1]Sjo&4]H*#0tfk^fpa?MNg%9jjY@?`NNV."-"JaZNl%VG)K&[Ye?jAR0F0GEj,'-^p9[V",Co@+OBF7[XNqlHOMNrX$OImUt":+XDURWD-aR7K1.U6@=V\\F</)8YG6*%SsCYJ0n#<68\'1%)[.V[OHF6GP@Z'V:#7P2kZbaBeV!ZcQK:B$/\aH]5*per)u$IA^Ig/P!RG:Nghj`9:>68EW>ST4Fe$^IM93jC0l!gH,Smf5OB/B(%L=C7Gq6Z=?`fEjs`5rqsfhnXcq41m;DX%/^Xo5:HKOe>n[n[7+#;CWtE'lrQ(`k)^RugV/[7JI?^6RF>&:Y9uN_B0Z:7743Y13Z+%f2^stP]V#A9$X\ihsQ^oeHVHHl;P'V82<C+F?7Mihn>?Ne9(H]kAt[[;SlK/Z-c;ipfk?u%FZbR!GUudL24^o'M^"n7U//4Q#%2(%?>o`Ca`3rfrA24F#2Q*r<VaN##HO3D_0Qot8TH#c,-cg>6pr22PteI:n(+UE[qLLLmF!MtSQ<#hIAtbG.&Bt9V>3J^L;g(UJA0Cg%H1al*7nV#tU:6K$5>rD`Uq(8adRX^Z]!+_e<d=.tW.Wk#4jjmUeK`=ERnM8@.T6AFF@g;;cGqMTPo26b?5e;M?;a6iVf_fh;dZQs%CGm7!JHDGl8t0+lop_-,77Vo5k>dQ2GSIWJp%q4jd7KHrDcAb$Z:QG]+gIsso92QiBK)nG\Fk$slB.a'dWCZ1rhH(hAa&gZ!DJ4?%8+S?s5Tm&lbpHd=#.e4g<A,d01-ORDl-n'P.=^3a"\#]Q"lX_iI<'dUGWh8j_apsCR2T8DT(pYfieml'^[]5O6Ah71>2HBJQNkk,%'`BqQJ#E1\-PWkri"K'#@cD/SIF(JehKc_'b.TVf=6f0:F69ja`#H:S2!7$\Xb2cdfINfF")Zpf:FU"/Y+7Q8d^6:iQnil;!n_4_%l,.W:$mghY'^*C27d'$0=c_:J_?ifchD.H=>)jl%`58M<lCH\-mV=sSk$V)U-B"1G'0'(nhHFVS0;]HLk?GUQ14<&:[;jGkmnl1m%qun;:Z.8h<eT_g(7@*4Z?3sd<eF9=6em$m:ku'>@1>=;DDNF<TVe7c8K&4`B%WkkJW@Rh[ACua>*uNG96<:M1po;*F!-r>Y8st)u%ZF8iCfLtm&45Fbe*UI]#ZRK'W.Qh]70\6HY5/+fC=eHrcP?83CQB^[8=P<=KMoSUmA5iSp5TtSI&Z*>%HV%(j0NI<3km`A:1M(6-%Z8SX^m7mbaf?RDJ2jJ",g\DddgQJRho3@iU_:26Yd^hjplhE*/>nQ@!/^^L1FI&0RV#Eko&*Bgg\!KQQD<,05)Zq0heL;6VU<]c@%#_/-j,;(4^)O6NOp9nV;2ir?QCN8&,kn[@GDTc4o\5t5a4EaHsAlt[d(/48V8:2Wm(<r,Jh6lo_roWh'`:6`RrKh]</=md!V.8\.%CrY76)OiBU*Tmc>`T?:/@l+#>r3<fQ-[>:T=)"c2Z#DHV[s,)@2QuKc>']@QRM9\$<G.>nNmZO4b,mm4.gJ;*br*i>S8Z^=\'OY1%CG#;9eF%seg=AunRObc"b=f=0\[VMjX#kcCg"Z@N?E1EI=_A]@lYkMR\(]rqg/;MH:7nYu9id-3GuUljcQ5H!]1u7FBnK%?Y!34,%M^7$D[+gM0Y>E<q[T9h3BJY7/FhCoPbkTS3rhSA"dRhOc6+61L>3@^&m<o\82oe+EL6I'hIkI!JhPTDJ0E-\j2dbM1bB:5>lh:(d%l_F5A2r,SL_Y0$gCnX'?pNL\4:pE<[cI:'N+hl=LA(0h*?>.@qHDk1Tj2SrP:h[!C'\f%EgRCtee:*pj:L.kV(M[5^BJjXM0=K6t%g:`\#9Y/8#qf-K'C1#<='+/k/$AU!o8lD?I[EXPHVa7$'(9,s2q:2J3gX8MAJZjRT*EMC_e5V7:k$n)HSeMOEGe9[Ckp:<>GN6k1%(-<2se^B_jZr\hGTiN\\8j>Mk&du*S%`Z+HT`HOi@dED'T*f3;L">[^k*0Aq(>>a82j4U)!fFCg/mIj_rB*:"R;tO"isKXQr6u*1%djnMWisO=Orl/tT.$UJ"lK$&iHSN62lghYgqn@1mgX>UqB<gr25!+TO1fr$^k<ASQg?M@*2',d/&m@=sDKjqI-aD%O#^MJGZRbJ/%fH(al^?#^\[dL_BQ`SQWq<:_LcH5MG)(fsjqRNK1o\6CSHaR;&'q-Xp`jaedmdnAZ6])<h\i8Am8h>)Wq5.=e..h7D4'?6=8>4+7%+Th,V?glc/k.7gOT%pCu-5O1B^%GqgY#(A\el>^3S%A)u#s>p`nT",=HgeohHFBl`&dpkY/8r7a6?@jJ[dIgADrte$Tdqp35L+aZ%@LG>+\Xe^1'P&s7HZN-MSgP*Eg=!\WI%?*IFT::XpVm!lg"8X+G=tH%:n1meD1+PuI_&'"[&2Y!]ml%qoO)g=I9#N26\RiUUtC[a%o1f@<]reR2I;P;d=s*3NWe4o[rGd9t@A1Z]TK/BASGD^FH39r5rmOb,gt&+(a-3UOB7DfrdsTU;p2*^+0ss-WV&!6LG94Il@%m0X%Thl(0&A+dDlNsHnKs#SCU@>bUdm@-52s*Hf*NR["VJ)[\]*hs[o$3a@(Uo^E5UfNG3@YA3om(cUdr-YAp(8parNn>t$=,V@W@cpe%>q:=!9F<XY:3UnRTi_Y=lblfD^:cSG6F@)Mp\dnJ(Ytj'.+F&DkB>sqH!2bdTAuQHGp&;(:Ns"W`'44"O+#TfYD_4iVc1cb]lQ.F%pCqqH2E+Z=Rp="3E=umL[ct<08KFEnfOfNsnVp=UEDN'@pYbq7*I92]J#h>so]:"/r7ftu``<Vq2i\NBFr,A2^J&b/TC-CMF+rFZ%dJc[]mbI04/q6P@4PfgU\DWt'a$01i^Zg+m2<J?r[]<,[^7:6JFZuAIY;V[[Spm7pX+!6>%6YF?gKg:3T56`o-+poKG>iXu?H5:d%X42SOc'U<W:\ToY7fM5SfdJ10^\IbBG03:ke(=?Fr,]c6IsUqhcoJ8Tds#:Mp3lX,E-LsAS+e]k%qD3^08uat3Ob;BZ,Xb3XZM!Y%Lk#;gpAK!rp\&jue&(q.rRphqr^ttpG'iK9-s&*(O/AiFGq&UF=PH#!>'n5d&L#Z,gq7gM^/(lO55k8e0KiY84SFt$NDL%T0?q_D%T$Pu?\!Pua5/2phh]!/*bPp)RD^)m%Xe1AKYr$O^Q=f^1@Vg4#;'2935<^0Y48T'Eb+&:3A(+L8+8G47f:UTuq4/JOKeAs&qV(L<%lPXGYZ:`7I8hTRXbpcbT?@7jR%Tt+VqCIMp-pK<>c@CX.^&cEJZ77ffj2TTsiB1?29Xa"2G^7.onc.^9/p;+[O.YNZ?S9ou\P=c!%]_5i!Yu%R2jr>W\l:euCWG+!A"N;jE?N*JEFE>Z$/p)0@I45L\;7hpIosQ4(SW@PmkiRdqi9t][f#a^]hP8V2WR1N<T-f.VTp3N_%e,>rl&:otuhVnpN/h`Cr*NqV>b,A9t-#89h6=D_XCPUZ?6L0J^U,K`b/L7ciBI&FgU-<Ud7,GJI:o[g"D;G1*l;`6BF:D,1q8PI)%s5Q:A\q>i/B^@+B*'[ODbE/n*EV!FsU]n208B[W4<^K.ihO^2hY-g=fPl'ED(%o=Y65WI#1#b,&Ne,2sF6mC*PKYu(5(r5oC[P:G%:PYQ-4AK0^=hX.ACJ`E4f(.SfrR\:(#`;t>5;q(#pb<p!QjoIoR'd1aF1&0sY5PM3,*QUNLqVp3NIpd'Otk=mR3>3qI/)rs-Xk77%[L9%>p;JWua9OJQZHuu:3tNuG0.u.N>7pr_\o4/]_OmH>k5(GkjcT(r>cCJs;P>S*T-b?9a9SOh[F^LF!`jljYSN_1m!eRR3r(b$%fAn[R>L@Y<j4]hMa=SYZoo&LQ*Xqnk>WM\mf;nr6p)(R&H3edIg-Vb*ibUZ\ZM38=8JBh+(U6jn4%j2Z>Tj3]#K5&>9tanEjfF!9%"N=osC?bE5WNEl_T1&Eo^r\rBrjJ"cpKSWA6DEX`Xr/!<)qWV!\H($'<V5>Z4aZ50L;*2kZRN16isE6+o8+o-Z(l@"qOj<]+!TJ&%nDd,!\jgABJLfrT33f#:.VBB`AkjuHm.SsdFV^aJ^7OO_l;)L1,um?Ke8J*7<lmJ$Zte_:BiVe_]psFJVhlH(8rt_GfBX_O_MDX!%n@@+0/:CE=Fh+!-2m;*F=bJq`0Z*`kR/WC.9-4J;R?KV@R$(U[FHn#UpoIlQ.5oi?>GDoSGP1L^pC-(7IFJj(Y1H(9KYEu2R%kb)%YOlEh>MP\-ESZJ?P1lW)_5&2.@`Rt-I=+gdjGi_?X1/kD(ZFG/pOntQn&F'?s%@_akLQM?['4M9.!nP/ce_m)9Ao3dG,hXg.XF!M%+$6!m,tq"GF@Ls#ml+7G.SWRH6D+5Rm!\N04iNJ1W;Q$b3jGo;jdoKCa&D-CTKX5m3[jH:,,n28D!Yg%_*jQK$/(f/WDoEql+p[U%?2"85MlFk[S30JWpJ^aEoQoU+=YoBOmRXCFZ6rC&9B,dH)]<=3,G:DRBnrLO.ae*i(pe$57PiUJ0'Cc=lP9tqNW-?GTWZ5YO7h`i%pQ-AX65qSu*ju^3lWbU-@)qR?>N(kB&>Sf)bP;(A[aW8`RI93,Ha:7]#\_+Vir)e'qm$`G_fX'-FZ'b;Z^MI=g9TK?KL4+3aj<ar%9>"(iW2:85Q!R?291?_/jZkZe2=,TWp_k#,WL;BfC@1$#l>KBl[kreq>O`m4\Ni'pO(Hf6oQn!]!YUG1gN83pZOcSg0L0"`2P+$I%>bS>n%4D2ZO%D_,p\'CG!4;2n^[(j:p8okcmA6"/Q]^Lth*>&_AC"(/H.gb]I.'2_UL>VhOI)-@J^,q5[a([+q<r1fQTfkdJNn4h%HZ6ZfFbhCtHe9eSM.I2`X>a9mr*8NA"usa[rQ@]c<HiBId[0G':U6(Xfb-PGSkQ=^UAc4=OI24>BIN)P.*c4`r=\>_S<Nh/P<]o4%=j7m6q;Wir09Kso!;"4r(Tl)150jrVC_Bkio]7<MN@ri#8nUoqmoEK+,a*kGEmsHs#*NN#!U:r`CK+&pjJHC#:fV4O:"E9DH7,dd%X2N=!1+:VQ%i10P#,E9ka(TmapS<+L_@#\eG1:6Q<7bT-9nWmE,8`'qiAkiW5$p8f,>[QQje11<F60c:AnY!nS^VdLPMSP+i,&]k%$-d[H&LQ=9R#=^^$+_Zca6ddd'"TXEa4.)+B"Fr;Da:?U:=@0gqP[=Q)2.M+q\*XjT+A=iZ7DBo?A4f4Z]#^CA*N\fbY/sV-<H$D%>Q#D%=%TTl9R5&-?giBlKk):5$22;/5!tArP08"#AhV9eIe)`EhNQOf0q#"&KRHRhb5NNOO\_G),pd#qg0l-$aIroQ@)EB'2/1Me%H&jUMM7E>LOd)%*R4H4Xc\4cVNKInPrCaLC$OMcO&P0:SF*P/T]*9@@=n8F#T.;_c+CSm%n=!5iQ3\ku_iF]E3/KQ/fK\b1U;be<%83Xpa[+!Fh]omb\'"?.e[79nt9\:_ZB\>FC3c%Yd>X9lEL[dE_cn/C#VI0G;4<&>+b3Jb`_<:+C/9)i(I7kWm1JZ!u$[dG5(,G2G%aHEg#-tY-iqY,FE&*@4tmoHSF["<l^#K:KlVIr)$7BWiJ5[/Is6b>UF>[fS,kg"P$I$-upU.QK=Rm8ape*<8X(X=biKfU0E&#8#4%9R?Y4k/-(XI(7&Y0nBWkepB<.bd&cA'B_\nAHA2.D0)[C%lG\hT>f+Q2eg7V@ctYmpI[&S/f\UA4-.kZj)W6VHKLE*2GB_N\V-rC%mhs$eL7u-h?,GcV\WE'hnU2:r*=5r"&N:L1F/A4c't@Ztl2jec+,S0<Kp6+IVHYTjZ-Yk5bb43@R1,Kp)NYgn?-(1VAQ;9d[49.a%KrdF/V.JYDkT]%H:YS$dTn)jAcLZ=5Pje!7(Tp[6+JkTu@<dJQVGbXFFI>*?-/+Or-`5Wnas&FRF"M[NIi7sV:EjA)_$)@Z[>X5?%[8Btk[jkq]*hHQ2Id(YB"uGRWB&]Brb@47Bg)3_6&ij*7^J2s(6,fdgaskWF^_,e(b'9YNTi,T:iKV/)An5KU$5<^0'HU2EHoB1?%nYA6)p\=Ug,NEsfk.US[\-TZN@5K]\kn/$"LnOiZkgC^>kj!<c(qT>F]!Q.eIU_Nh,O!Wj_80XFdNdsrL!dicV+8mdU'1d^ThCH>%b8!J[6^Ji[8%^oQ&4;eUN^Q*k+GML3Jkibk%22*q*^Rj=Z/.3WW^CfIK\9S"[[l[cT,\0EqVG;=Ot=;%TA$su\!M!11W2pX>2PF5%[>1B#G_B\<oE(Qnqsbt.hW$\f9(k+-Mb_YJS#E7<CrTke@Kn'7]#U/#g"asA,8tCeaLU[)/+jf6R>E!=birE0jN,@_B!@LL7764a%3ne5n>W,`+3@>8O`ODb[!3/4f60QrsEX)?E0q,d9l8on'9[mFu;H7r"Fji/!:%a2+cS3H'QXMJc4P267gEsR*l5AqHO=Q,:/V,T)%qmu@H[-'1IZP(XoFPcIB1XuX:euY?0FiU?p>*Hup5%^$^p$mr^(C+[%Ro@TdN-&_b1!$`*&5s@bQSjH$pY*=s\!J]2@q!hhDo6!<%C*pLKN!gaHCrbho9+L<LMZP-;$Aib1=5@t@U7XEZoV2dLqq9eD-@-NP5$*<_.QK>&\\%DYTh6c6FIWLU.[B?&0=ic7s7qklI,OmX%j(kNa2)*EJ*+.$ZQt0f*@X)$f-dC%X<j;1X*1>5NB'QHQ,fQp5XBPIp=RoK`hi2.ZD,?+hL0qD1EHLIuG=)/YJ.%0gXe#QPCoA`8%/Q:Zj_U9VWK0\??7Qu:Okspf^h-HGmY_^D4=mSRN].&ZOKJOg2[EJ)9_dn=,=L"nBH1`*JF951t:q6UR.(V3t]]McqEU,d]H]o\"%M_W0DM8YM$<Tll31sKS^rQ#Xlg.=1cdeM\0/ZF'WG-@iH)DRHplbarqRf/U*,"j5b.A[6i`CQQ\Lo@g)(e>a$.M]7X/VH<R8>klt%f&<&=AiH"@;5pX=$LcuQ/ANLs19j*JaLK/<L#S4LS?4H&9M1SorarFB#eOmgR9nb7)1pjGWY@Y/@n$FG$!Cf_8cPp5RP'LeAjtSp%+5TZX9*U<5f]2;&Cj>n6N($4LCI$dF)STo?(7DtM,C:82rt_#iBL2ZH:^:F>Y9FRXK>m$HA!'?eo-7[iH.lm>c2lWYR5d3rQc//Z%,g^qtBWS]#GSXldD.aP;M(>KM]#R(%Ka+s%m>T&`6^eeR3NLHH=i/OOB)6_7$dC>C4.0=iHA7K7>SiQt"ae5=p#jL8l_1nReR'sm%XtH+%;BpmB4,B!V]&Z5YA5:G4WWshG9SM9Q!LljYaJ'>RY35VPUPO]#r\-LZi^:c(%<DGMs7('u?I5I-LE"B'201lb%hI2&`PW:U%4S/pG'b;+-,&!^#i1TUZ@;dR.rAWGT\<q>-0s_J4_dteR?j-"=;SU:*I3Xc-MckraD!R`?A^Cmt:qTm^SUiQn7#$^=:=_#'pd@Ta%,R,4bVo+;AUCbT3$/%,,1sb+(41pqVB^skRD1k)Bnej@*T&pYk2okg2pQfKjW<TW3^G?i+WP^E%.h>#"dK=KR5q$XNM3%9I8OV&o%2`JB9cSIXU*]XOI/9)ME>[IsP:)_R#J_hUgL6lg'3=VA:P;WiUX^4R_6OZ=B(DqfmSomEl8`!7(5><ZUbo/B:O-o0S)Od0rjKqBm%@52<16EI(7S[P2W,#Z`W&WqD<5/N+TaD>r1WRpS`Le-(:m869If#ROIdW<MGOUCmm,r_ZFYtV'QoW1dRnu:N&eEk4@b=gi>^HOD<%;@ZFgf?":oe6/01M[[LWkoLk-c*##Pi=b8)842?4+7&1=UGd.C:q3<M)/UeW:j1%+TlBt4.gHN;$_9S*e,E!,iF8nr,7fK$ZB&R%%T>CGn721F#:JM4D;B7%Z3tXZXO'Re45W&s0j6#CoZNi9'O>/Qa+S$[tR+mXIaDcWu$YhME[8bGYKp1N-J5Lb-)kC5+L>_2jPqmB5%A0$Yt*gd,pLu'$dbKaAc,8Xn%^TN$rlecGi-`c@sg?qH-a3r5\fC`c>=/`9e^RVK'1qoK]Y7sdH0"$-D*Vd'g#Uu[O[>XA)]eQoW%^.rf;@d]NJa_*?EDYkr)//AHVOI\c\lo&j,Gpo/cPRt(\L$I3";R"nE@al:Pbbq@,fTBsW'+/k/n5AZB8\o:-,4+11j?iB?mDM?]%;XK78=KEAt_CcPhG%_gmTkXiM\S>:^)@gr.$Sl(P,4)D!PR+nk>.p/&W)h[KI$d_YhT&^%p=Fd@"hWTd"hRJiab=UR9md<UNSMQU%3-a/X-P^rt6Jh[3Zc#0rNbrU&f$n#sU^%\)DsTBoO4g@MVK?EM$`0WY-(Im13P/,0OCN:(e_LM.:2'6q'im_T<ROjjKN_+A\aSd'%)qJDJXS.Ua8$nl(_'rT%cVit+NF=I<8j>p1icCAiWG2rndW@\aZ$IGD9lb7JaMjaM1=T$=I9PSRLRnqp%GAl=Zl\CdX+#JrQcSjh%lPn4tEf'0V\G%SMYAVZ9ot5&_1XS"g;CZ=Y%=We3p@6SrF^BNe]5+h_k^$BXqi@Tne.0r71gSlt+L&_B.[htBQ7i/aQsl`RibX3$%j(6;F]!tkR+X/$*fZ$\YZl_8r/ju"ED"WUYl/K#6GsY'Zd<'AdqJ7s.5LFRmq_Z`+3ML2u\6->hcH$9cl/M%\lFCl/Lo-*:[0Nba%;+8s1S9$R)BY(]U3n8Fr'[_#BP;_\(O[dg=<@N=$naOqJEW)4SoVJ-kLo-*r^K>EQTq^eG=nTF+G^sJ=ADM9jd<'e6CuB!<BNBAD%g8Le2#,PFOd<'@YXPCmll/FH@Z.1(YVMiV?2tCXn\D<=(&,af%FE+R-iRR8`d<'BeA*V@\.&,tc@d1c$bOEo$EPt[kb8Nr/?%tnQ%&Ob*e`R:U<a#EntE+O@/9br8Qqo'V&W#-BS`5Y,cO1C`)>MrFlBgK.b;;YFk=/Am`@\EV`;RMF!FR".XXhplc9&Vc"m0nk@2ATE`%"p#'f;:"ctMH20i.*-MB>[RCC=!d.fZ(3&04tE2`*%B;]9F@=/=\#Y.aec.r@eQC#^Sk'tN14sIAPS]5OtXE4,A&P,RQL24X)'82%s4?$P9:.@Mp4ot\F-dN]PqA(Me!].YrlON$]-/-cjT?nhCiE%%C[SK1'Yj9ih+sb61$,.A/?qgtZto)Slru]'^kl)8F60bg&_H0Z%cFJ8U)-NKKb/.#Qi7Hg<9$jr!l(MU4hKC[M@K:lbhpM3a\fTH<o]FI?k0H8D5e<Q$^U[#ML<311=ejE,0[<4ZaEA1jIpl*tEl/ZT%OjSEJ_q2h`0)f[cV#;>C="=`!TgIBNl=>"n:a`%1L-!H?%FrA$q=$9-i9M!N3&C2-#g"C_3:L1H^O-6Tns!,ea_06<89,$Ym\ED4%hO\!uZeg8@.6"Jd")Gjf`R;i<s0S"S94pI(&2UA1qpOtsFahQYaQ+3kc!?1%r8!_LOYXh&Y:3'HC25V6%r/nsQSeA;M'r-rTD#+m%VqdLqZ5X3lXrLT_k#j2hOJ/;Ohg*Lhd89;Qa2Q_?eVS&5Pi@7;X%>MR`H*B]@hh"uGgKKFmn)m;,+d-]8Io@qF,(QSYLuGh_pj%Z%aHVY$E2X`DK)!L`473:kL63GC#/@XYT,[2rZuL-,h'aHhf8Clb.Bge]aa@%D8E,eqm^VSp<O#&@8)f];>Vt..%<ju'H_$)KY^52G%Qh==!FA`uJ?l*n987&uA&$2moht2_Yc".EeXcMAZRLCr&6C#X4&HpZk^W/dPpNt1#c)4oa<nnQ)OO"16CG?Xnk`idsl^^iB\T"ii%NH?LX@MmR>?h*M<,Pk-j(&^-K+#=<YL:1khpV%pq/>K-E)1n5ng7bp?3fEY>@u<[-AQuT9rK=[0^DPZB9,a'3REX/`Js^H0TsadU%lUhTXbSnDFmM(Zg/thE2Z=*)n0r,D\V6"*!R2!PRBg/=0@O]i*O1?O2@X+<>(_XTAIUcX7/fk[%C5>$ZSt=<#(_P>/=d4'LL/KRM%8)o+(ABZOS3&ud)'CjuD\[dfJ\)?c-4l1A'Pa<ia\[Ou=9Kcf6'_Rt3iu3k_X^&K+O"69HR5M#3p531L+aRKsgrir2rEJ[[lh\)M%p1e0^q>-r!<k>>4f?-2=`d.-p-_A25>!6J'$JiUCqY"qE(Cui_?uXh"b!gME$\pJf.IhAr`Ogbu+?]O@[d\RD--KgV?n482Y;9Ls%0..O8e\81,`>+gld!OF+.'[`b5LZdGS+iaGeL7\GB;*t?C_u&gm];>eh8P'"^[^R,d'WMe:H^TA%k'mQr-@g4\oTJ<L)7F,:Mo>r%>3+SAU"EbjZ%&mZ?P<hG[+fi<:F`^`="(iXc.bIo80kFJZ%'0L:oLk">[A7"oS=22c,^Q/BX.u,D_)08+k$8XknXr]0je^&p@W=#%*3GVrRZ:++]2"=5aTl_Nj!Aa?;lZC52/]iqF.4`/e)`p*R!i^\ocHhrS$1DnI0CjJKd8Z(krigIBEU^qV>>4d8IB9#3Ar)5WiPe\%a"#UDS&(803#-U&bKtBO2mZbkpZG_F&c`\2H#iDQZsFfBbRZTF5IEi%3N-lBH9X$O]rIm6B$>MA9_@[X>/[#&((-FF-gl&gV"eZ+%deZ@[@o[MKC.1%a0B]/.1?0UiZAGV()d0X';f&]!gpiK:)Rk:25GDhe*ucHWjaj:7%rWQeYq^iO)kkU<[]K?gf6T^*EnGSX@ha^F%@LQYqGd3j@(<e>_9.PpK/EAX.CUCrUZh<kEoJU?I0Xo'BW7K$-beY0V_6l\'3P(]Ajn_#l=F8/F?,`5u#fY5pPp%MB-k6BL]h_o>%lQ_6:nb^Rqag&TG19]I0cBQP(A3[ro*!Et0GDoNTj\<#"ng[)g?`',-M<>jhd)P/s7JrC)#R+2hI;C<Eka\^7:r&e$:PlEF=ur,p%))IeJ6M(1QR?]SX99$)KafO[e^\q!1kP[Tt)ek7o@cf'fAgM%)#oAV:LV\3Q,RQ5@$t.__H[l+$$qjBFW^]l%4i<:9`;jB9%itlk%m_>P75flB9J1/5*(ll\OfRQhL+]_0>@7L3'PBpo0)tbVu#)r[`\g/R+0G7l\8<.+re<AJ)"%3/:=%TfbK_?p1I3Pd#Bhs.ab1G7)%C]e%eVr!a4='`rbB2ofIV0ospA/iLaHut?12&\M%?HPc]')T9ADh(LViiI*o^Q^DEIcQVsb*Vf#arrD!;lg=.WEngNTi),nR6lN>%DY4sffhcpshaes%7Wp]>E;04.9a_1a%H)(BH`pef<@B36C7oqP6<kD>eSig@Tu-R#V-AWd=5nYbl^,sclrLlsZ_@6/f.Rdb%t1Wg%\n?h0\Jja>^C660,Il?d7WKfCF2e&4jLp$,9oIk83S;#ol*pKuF9>(X]mf2TMYBs7s'EImDG!.DI"6SBdQPkgc@T)rP;W7d1&+;f%qM)T507BQ>]0%=Jf.[)'^HPGd9"`b/IAr^o"l8pdIW8[m_6&/Rho@[-R.otAqPE@AH@H(lqPA,/806SSh<UCK3#`Nn3mbQhnJ`tU%<km#K$j5DQ(Nk@oDtW.>8csjHY^?>sKip#bG7Al%?gKt9:a,$PC&!&RdN,L@Lt'90oi'kZ,.ID;cFFk_?GCR`nf-8:^"4o[XIUO_%O5aK\o\JIimc,8G'G'k#^>\)nic"MU5FNhr?GH+aiacu^rpKGPfApYiqsa@VV;LPsR]*T"rY`8`B^YOdhes!O&I`uh?i$mR6eo`6%LQb3]I=+C(VB^!O)p*MU4kJ+":2bsFldsH_Hm&ePgqA0!?jl's57oV,jLp"o]jbpQ)^Ho8Il/U9a83I#029^%IY[Uq8FH-i7GM\I%Hi:7h]afCmT?&>=h<9LIldqcT<Qr.*K*T;P>Q'f`Ol]lF^13b_DY6X_jfGY4r=\0.;Ze5MfRW_mV)p_,Ce=fdl^&;,BD&!$p6_b3%l"m,8k^3:)>?;;\YFd#K,.ICXj#ngJl^,m/\Vs#7?MF;m.u%L\EQEM*dK<s2)0r`=rR,WWMp]QL]%8T0$)0K)..6cOWl#6hYFjO4%iEQ7YUMKb:f.VPmkRke%q-Li.aan.u\5c[h9Fna98sSYR&G>f(SL\8HqTi_6mn9N`ZAY,1SC8MIeZd#S*4+dfe_Q]jb-7LePtbRQ%0T-<)8=0AfJb!>]GM%NR,JqHtY@]u<k0$\M-$.\1jGA%AmC(EAN6OPnO37'JKhpk,SmAUl@cqaCh"msFD)FG*G3*K0g\BEEG@mpS%4"cS$rbrW":X1?=$d[(]h5SESgO-0^SF!uI\Bjo]&$+#@pE+St-bd?F^%HhtU;-*n3dEi6H9'e4msU_^CsG`3gf01f^G#!3#Hrp%%`F!Q&Dl_];iFI87h)6Y$``nF'\Y)Y\0$\k!]fRb@`P(NtpW;#m*;bHPHFpkrE&]cQI<0>N=?CaV0&Ba3>"r4(enSR<CYIo=CL>gY%fRI_HT2t+/+-4TDSZ00u>AX'OMmQ`<h^C+&qcDDr@jLD8gGj7mg7=!P'0%HP)R0@#oa?U0?1)gd^XXgG[AD$o?#Trm]gm$VmJT#9%=>.7.np!2%H?+A?l0OJ%n*^tNg.GTGnZt&4ql+OS39`$/X;)4@2SVra4P=&Hr(hZ7;$;Y@2dL@G]=X\a"'ZITSakG-r)ij\4)cqZ%E#upHEmRk-;cOl&579-%D&(S-AoCr_RMO+21*'ENW>mTebHNnMfA=hSbMCkEU2SkRf/ASi<P\=BXSt9Z\mO-2IdS##HYK>=:EJCp%^OM[(+tY\'/rLZj=Hd$Ujj!C2r&.hcT.><=VRO"Coo1%$T6#_O;n]8Bk;5-cT&4suI.9=;ghbfmC$#3g4O3J\kRfP1Do77=e9X#S%:<-!Q>;"YXVT<4;/)/V`q%G0bg4DO*MW@QRC=D]7!37B;.EJbK8%tCTT0N@Wh99-kBYT"t5--C)NjYS;4*!dQ[,t0S?rh_Q/_l3g%kW(1W3n<]<UQYQ5@Hj,'TLf[V-at2nKDc\9;LNV1]IpE48Xq<XjI8A+GN.#_PgALHJqdBq9aUO-L&jrNqNeI'i1C4uqt<NGjF("'%8T*F-4Jh(O?CG4JJQ\l?I[HlC9m#Pt0qT\M*#l*=D&n^&=giP3Y&psCdE7f`@X7G'fn?81kK$S3``Wj`q-)dSBJYjDB"XWJ2Wjq*%+01=RfqciT4<0Qf0LMnmd&Ibb/Vc++N@%k(b#U/kF?UL:(Yd7+WO6)Q^Y_i9[Fgp&oBg(IEUr4V;0d$GFt,T:k<B&<1M/i=T/dM/%kCTimf!grA-Tn;SDQJ?Bf'*0:^H8[A2rNciQW&O1+'1\JYW"IPl8S(!nR,iB2U17DgFD@\X[Jm`N11Vc`05C`5)re&5A)SOhgI:k%*]&6thZ"@PXQ%7Q`>5oD<j^tX4Qk]t.RiSS]bMfD,NM-5E5ZVq(HE(Y@p>SagZL5jjj)TfOZMeMotuDaJJ5VuQgm8Z][Oh29F<SO%_&t\O&1LK;M9asDI*@k[c_oaJlOH*1Mrn>%%r,=@-J*R,)`ZePGF$C?qY5n9GMa`e4n[*H+(PfemRA5Z)e]jsD)s3dL[Je)XFHcn%>f@Uk5S@?YXqVt"`M_$V4dJrcbfD!In"PeeV^SSC*@eH+F^2'^GrL_cS^2()j3=#VpVUi=nn6W=gT(7#Y2"Z4qR/kH1!Z&R$T$Eq%HfVJDTT2O17Gg4up7QmW%T&820d63t+cl#W=J'6d#dc$4/-Tga[>;eR)uR(iZ(OMXRG@RG_rs8OU98R5`0aL%B-&bqK54)Om^sQS%2C-pWGIf$)3/hBVc#/iKXi`.m:R51jZ5Q5Xp@CD];jc?"D+shnAtW7f_Z7[`CQn'HMn;cI/Cqs#$^-'I]@bU8&jaE.YBZ<aEogU@%f9OOW3/S2MjeoYCjW^::_6L=jNa9*::C#-R+E3uhpNH\@J@4(!\X'TM4@XlM:3bV!]lr,%@#ELXl+X5je373K,-te_qTA0iq.uV#%.eLphXCh)+Al*Mf%.Sd$h1K?`"G$$9A"hr!\J_=\N+6]WeM@>?!fC9B[E9H\TSW<qjV=I&.<PE0o(\Zl^0-ra1F0DXl>M7[5@brT%%nBlOSG=Lq+EWL]ZhMI2YY&eAQ;@/JabaDj"!V-$Sg@b0[>W6(*[FijG]%O7bSJ^_Z&<u#JdAGSG$5+7&t'"3,Zs>PhZ"E#8<>?\%=e2ThJd<fQ!;_#.1%s>FNZc0hpX8j*;bhqmHlO6t'jm_b1WAUgTI6sAHkn8chi6m=$nsF_6PeaUgqi<,B+U1m4pN/ACk!Y2%PTB]%RmCnl6]_okUuH0p6(:.Un3-)&H9Wj:dtR@C9Z8d^Z)Wop:lZ!L"\u>O_<=W9gJma!7lRRfB!Q"\T7Pmj*DXK0ihRDqLEqo$'dAmp%/^F%56EW[$K2[1^e=CEYP^B2)GsBBe]R%sg3K"ts(8_Gh6+/0$P,g^hf[/g<W`gA_EeV`$*j"dOP!s#2F).m+%L\`=C7FZi]$7YW%)4%H!>;+-s2HfqC5NS-Aj0Lmo/?MpFb=PT%iN]J;JOO67K-W0cXq52DclU(Udbf"tokp-_fVm$LN314PErX$WiN]N\RPn,$@!/V"%n6"6R^U8)uoVb-(\ZC\t[]FB2oWpY)UJ[[C;l/%'p7YS^X95)WPA7q>GglP"W_a_/Pe0M2I]*j.2nr<a-RI'ZWIjH]W=C1rM"qn=%R]p>R\(R]ZPkUAU^%gsRl!B]@pe#G-.4boe@MS[E\:"'</7im=+UModAt/$[UTh>onia^m?(,41ALO$!\Nlp3S'!c.Q^%1V24T4%%H\IC;C5K]+/(Z\<4V+jSP3lF,S_fHCP.$#[Y/1=L;j8Bj(56aD7lG66X4OZTi2uhuQ(lG+Z*efJK\VnGG9Hd9j_fQCIdg_O!u7tP%@BkIEJQbcePTrQ`'5<;=?Pmeh*6EKD&4"qjZ/m_0iW<=Bbj>uaM`##ujG9QdZ`(!B,MA*!p;YK/act$H';$Y.Yl`8HUIGGtB&5k_%q'lurQs!Qt`)7B@qP`G^QdWcfjm_]imeY6&fSQu$k!&4`fI34H@qMe8H,+gg>`Nuo6nW7upMdF#.r9\7jul[=4slm[^>0m*NUj+k%n>c$Wj2WW*#%.?`3@fNcAGb#:/(ij/Sf,Y1W[J5"bPVbmp^VT,I`GIJ\^#%Sk@@epL#5Soc(\?W/A@k7r>WrMk)OQS2dnuMVMT6&%C*,6\4:1nP.96$'qXYsg"$Q[mBj:@MOj1!O/[T>Y5>eaH.q#R&7ajY5QJ%L]WMPe]2Mco'M(p"%cl+]pT5W5Yr>J^8aELk;KW/p!%K*S#ec-i?UQuZ\bri/MDYSaA2/1-L<AD@j5&2knbD[d-ApcogG>JiVQ,Nd[th4(eBZ8IUL>`bW-dgO$i[(JYm0s,Bl\A'4f`c41<%LH&^i<7KL6Hu<Y[\5j4Tm5o4D]hn<#a@_Jn@612L*@db*PdGCN[2>:7fOhp2NS)*[aAr;s2ei6*b;n1_be3,,I`]m%O$?qhm=Y,]%_c&?UQWq\!/).Xag:V@Sg5X,(`dbVdXh0YG7^JRkaHnD)ea75"?>nW,mMgFlE/=JA'asXXlZ'@IB.!$.d4qs+bMR^(RQ+WRYQ*$'%QR/h6@O.<q\!D!2%gM?%EV]G%fZa=RIr+QC#p0'C<>mB:/=_[Dm9QfSc"hY1[2C:XFd[$:krIXkf5I;EJ(@fk\Z+Bi:Pi?a(Ji4I%\!=M5r@b35IV7?gqKuVL[D#dV)sus0)EE&-Cm'oP,.ahelR-RVdK[sFYJDoE(Atl`RlgMP!L5ma(n7,#O(8($i5aj0I)S4$<e's#%2Y6RH4>u(Z\fNBYQ$bD\'Vt+rif;aVY'OWa'R]L>feBC$^0Xb8qpa%?[AMuE318%Rq>A<N^MGlI#t$J..PuOhW1$^V'cCP'CdPpK%1`:rmnY0Pb%W&4WN!'P1$ktHjJd5hMN'CEu;M%EYeB727IjC'j=ctE+C=4f!MVhY]2XhTpA/I0L0pI:>PKS]s'9Eq7GR@CLk&-Rn%X3C_U,uP>pl"_+74>eg2)"%"!cS@J](,<oN;^r9dk6(>Ua"//ZLV"jq#R\**^n8Xc)Qn5X\ApfeBXTU$RO'j*:6oMeB%&[&8LUF8%0CjDLTYsGG4MTPD1%VIBkgU*n?G$S?@S(=`S@Y`Kbebu3_.N`/EB,Yd>[d+A:GlicSh;To/#T!TIo[ZIS[Zbn9(SR3-=cFXp'5Ol%h*8K_&C\p+1RLMjrk7-Y'-1+dL?.*!WXRknD_q#iIJf$p`OTBB!?o&Jc.kYOr?\\rkABdLFm\RK9u[Ri7A!@KON"(,^#kIP\Tu9.%1/5O6-`]nA2UD&(-gVVS5@"j?^X!E+T8^M;X=Y7BK]I*G3_;Wo^e7qV/>S1AO>&(r_I<_&k;5f[0.8ai;:]QCc-<>;N=dt1@51,0%*onj%#dLqY3I5/#O8+ntQDjdHcW+ju3`*B+gcL3;GJ'[_'=VngB'?o+C[.Jg#p5Kc]$G4eXc@gB]oNe<NZ<.13iDmtd4J39ltL@2%8G6<4ai05mEINFK,Co5LYn)5$b'(:\h&0A4Yd(dP<9.'9@63f2.C"#G"toV18?W4q8$d,X<amn*L[6(E\IoTshEp!r]<8@MZ!!Wm%(gV)sDO5%/BAj--="?;iEeQC?^/99!k[)XdfdgMn7<Y^IhC0AH<lW*Rd91.\#j4gT1F$NepTtOTU0*skTjE-R4%8koq"XF&B&[E$%Y0\&ieI"SX>%?>?LU+G"337oeSu*f8-,R5mdDZ%=\6b[a5:p4+5i_Mt@`DiCAePm@`Np1G^NXQh1,!Y`\EPK-LK/l3Fi)FErgpid%,7!$?K3\nk/rnW(^if2AKO#"lKcf!e+F=s96C(o9jib3s0QnD@`O&cY6s/oJ#U3Ns7/48Q&4?dElX#fHE7Hjb3=1MdJ<:sUR&PPH%s1sOgRTG;1Nq\DY![khNUdTg"l?c1\aI-@QF-HE-jq?Z]QZYZVDD6gRoZG.3>C$U'0Jd!6\&6j\l@!K)c--n!hGFYfEAQ@!(2=&m%\FDi\-0p@p[pAZ6LZ#\PR:5h*R:gTrYg*t=2PWB.*GDsG2Cqekko!$]5=o#%c"%[IBk)L-2HL_RMr>u+gg!/]=ZKrOZ4o7A-Y9"$%+e1tM6[,!"8(5prgV:ICTOonm;dfk29*rL`^KKb<8/[?p1A8Ug(d&1=+rFXWn]dW)P--ndUr3'Q%RZReLigU04I4QuEYbWA2h)IH%QlhL;b9`"c"rm*obRBZu>#Nq+D2'<YEeV>u@J!P)mTcDq@J1aZ>Lq4D/F,kJg<6q(A71(e:,!o*V1^STIiUj3Z8!n/)5T<QLs3qS%]jYGKDM[3XM61/T2RKQ5)6*dAp;-<L[6q'lA=9:*A^f1FfJ.a&DV;C]Y[dC*h6OSn:Nal&[9GP.Ef=N%W84b99TD)EO4l1Tfe#RO%g"G/dq-#i)Ip2NdcKaVa3QG67ls(]Qa8YCpZ#PtY]4:k`cIereR6,S8B5D)0c![^^XAugGcs@GhX%<$)?Y$>IXAre[q2=T>7:E<m%E\+!!Wq66Ck8&+BgdJa,B\poO8@_%fOHW0.isc[S2f"D.VrhmqcUL!okNRI*ro9pBkB4\c)n$3*fSJtPk,(`(]KVP:Kn[TB\^KoK%5M^IS>0VBjchmi2(ONclg["Zh4AC/)Bc$Bi:`Jd+;T#7IgpO_E)W'P^Hj+sOrf_]TBrl"Co2#/A$[haZd!tUeIP63D?-D,8b2]"#%q^'/,N4`kM,tE$Xr+giYQ;o\Gcd2(BFNsGMY3D>DTQkfB-HFrtA*uJ2KE;[)>"LLZe+3,"`RAY\K.ihbpo]V_r%n$DF3a8,aObY-%Sn43]"6fGN0Ui'2B4<mj[t,F<OBHU0#*ILcB(uc:\`FIJ.%)Eu+A]oE$)X%Og\8UQ@q[p>>fSZ<B"B7Y?*ZTA;W"lT^(\Ij".D[%%eMWM^K!DmH,sr&M?:d(L4,c1''SH+)C)M#Y&#?MJ&G1e%8-N;Y,\$[O6.$N?.b$$&<WXH`@$Q7@6AY+,[Yi`a6RU[IQ%7UOL06E-%-Xi#W:?Ri]RpdL*QZoL[:7$0kKR&MG2XmSTqI.V;/0g,,L.FhH"u+X@knp:a%*R)LGBI:"L@P,nB$%;/?>%E([KZ<1e2l>BFG-c.%B*5VIY$.n/c*2HcC_s\u0Z15V0P27JSYrf<,qLYh_d$lDXfE;#*\*sp4uA7-5%?<;")a0/VIR4HUJ(lZUPX'oK2E@UB40I62*V3.%D#5[d4K_+-f5Phc#(ZN0@k'<X5RM3L*Q++`Zp/)[GHY6U#S%O$fs+2]j!`]a5a:L6E\'^$*&>OQVrJ&f/B"@eS7FU,E8uHO`-+Nu%*0?0cP[e83`&8TB79i>W"2rY.:IP]8e`F)aOID1ZR:XV#[.]&//sh<WB2ji;<I1!)>WEgki$q3O&n''6oNdH5#o>?T>Utc$Nb^>m%dd^VY*)37#I"FWt*ENuZ0$YdrD]@dK(M=E5;;1/!2d0N)Z91(!6&0cVHB_?6(YD)$Sr<0c1Xn?\re4mtMZV\?'LJc9-'X<Cd;p/%%>:a%_o2&2.lBEN'Hm$8;SjqQo24(R)@(&GF2)Q4-/g5UmkoO@!TRNa]#VTU_(R)4-_Y=[^EA"!I)FU0#.d!N&?n.NMN9mV;6S(o0%e$McV)9#!m!qSBM"dnEBXq^hHg4Yl.rBP?Jl"hsaTZ]KZV=Ss1!XrV5VA#CjQlWDhA't4)?Q!.B'/Z-f(ej!<0GiK@X-e\%`)JG:%_80PO/86;4q7]-3f/I@u?k"5E#]m4s9bh`SHD,F7D<T,-YVZ`u^lfjHa&G*N/;q/Tl!toi0InPO?pkX.&.3SV`IR\6T?p]W7":s]%7quKmW6QfIe1(Zj3i?lr)*uM,jKYd_a!>-1Z>]eg+\]7K_Q;t%*[_2mU)``Gc]]NAE)HsMr>n3b%cIscBc%tGrKQ;<)[YWn!WRBO%j<,IFSX;+<*%P^1^hb"aL5NN-R0)tK>rgt<";;V),Zq<N/6f8/g;FRYo^i^53(6(Rk^'h/Q%oIWF$l%&'8NZ&?<5Ee!T\s@%gX*s%QEMDb/jUK+f//IFg;bA=@^]kOfaH":\T(1'/0JO_KH-U@;SmB0Gd`L?O]N"Y9_Ks*4Q.*8&^O<.'D+^PPg7c<D']VP&h@!jW&o?l%MMV?F@(9t4kmWX(cSdbV,g=)KeT;9N31d*YG!HgoJOn@e=JT3BM^cQ).Dl[0`A&0!EYp%&8`,60Jkn'FTW,^hA55e6J71lJEXW)_%k-HfGk$WWB;3!buPj8<JZ2RQRkdOALS5VRV`I,$V=:1qkS-BTqqC$qu7/`2iPES8K:t5h[#3p*"@R7FYZ:LAHU&[!k85Pdf)H!f-%1!MSHBO+:j>%bXFAIri"L-.L1"IKok!m:ctLXX(ScOEn#MBS7Enha;\gPs$Y8-PGT,X2M]P7Y2_0r/i/p2rak7S*Rgc3AlR=jS+j%_Xrj=#pFlqSB:lpiL7th+e0B9g%j(k':9(pK[Vr?7jSF@7TV/VoH77N.mqb8E#?*6(h85^YisGV2::@q(2^1Sld9`q,LTgua47&f%Le*l2;611d).l^J^ee*OSM2DE-86DETe[$@-9m>f*&@cY$;p7q)IjNhP+'BFU&hgI1<q0QO)(e`#s?PF9jg9U8s$!.^rS30ZU:R\%=%0tgS[D.!7\g<a*/.`G*Nh_(9PuiW]"1#W]<9.h-Xf%h6GcR<%);-"5oO.&+<FT[>So&O<<<HHXm:W_TSWN?Vb)#@b+(uo'i0O&%7Hd,n1a"6/>N1VTO;HE*A"_Bi[Nd<J+P7MaaTrj)!]"`13kbZ`6,`n]f8D*H*`8#h&EX*1P;(Ad!eZs;+j?1L-87Sd#0pa?CP.;F%d3W36Gm,N#a&b)7YJZ_n5WAs^m/fiARE6$#QiKID_Gq/2F^BT#HjIhj\5m;CG=,@qM<$W'j@3m<(0o]9[NtK]>ebqH&.F")o7D/7%7BG\9UAb21a<*Yo+.k;6WkfjKC)slRAh.R+7PPiE&uGmkP;#:<Nd2Nj&RXaKT$Ai!5ULt:J1Nki!m'M`$6ZdX,hWqY9WEi#EC'k3%^j;Rga9a28,YUl=Lp9^*<KH7Q$tE`OptTq))+#agZ:Bg^]&PQ%%IY,>Q76,CZ=)Xj@"Hi@1"ra\Q.>JR.N2-(>H@t"&KNR]+Qd(X%a)r$c.L:IKEt!ecnIer`A]W;UWS/RD;!]01KD'[F.ps64=Y(GW'nMWS_$l6(\KspOiB<g<3C'#JK&F+(D#+/X9`ICj2U(V29?-9*%j2j5r1Q33?XijEB^!q7>1-mn8/C1aA7`Rjt`caBW9[h(CLkNSImtbFe8(aKL3](,=4gD7*cknIcZ!=]I$3o0f"Odg<P/Ug=;oRtq%QSC*Q5TIVM,lH_-C]FG>l"PW/N)[$SdOa)\']mE-B_d3?1Q3%lp9m)h&]<%2)VGqu23#kG_>Y<]XB;aRL):rO1<.:sfQd$GMcD(U%H1a$IXb30L`9?CkG(tFi@7/edi?#s3LLK1J.,QeM0P5%XGB(:%FBg\"0e.K[N)(fT!W%OZ0oV'/$Y>#_`Z`N_UbXbaQ&0i4+r/?E%'jk(f.ePK8Dhg]El2YOaTsVt\I3Y:]KQaGR6:Q0`ShO#@0[*r&Noj#;I^;eFj%RF*KlP"*2d-0eaoRQ=!b8W*_&tGS4/g&!R\sPl%q0SR6n04qP>XNQIT#HrtoHM3:n1emg<8i"*QU"OfVYN1g%@GML-t_I&'Oi[6Zj*J/3l>o,)I!60KA.B%1#3Kch.Mhg#QS&&Wsak!%!&[8'%kAJna,XV`)o?]!,3]0(AY<I,pO!^.OeR2gMSZ6q?!khe3lm:iVXK91e$+cbjL?h?!+eu'Y^ljN(pilh#6!btQ:sGl1mcLR%!eQif'WJ&'!:Fu'3boDp'ZgdeUJE8f!/&CP9e.jH;-[@LZ[,.Rme\CDbUPN?nQ[Q;&[P`sOVu<\9b3^fH&NIMdnGma@3BB6gBqH!%D7a6#e6+i)b!<m%f/?S:Af<Iq%V2DS.mq*@qh33@;1X:iD;':QdsX-,M#<>R/O,3I3h'.%E(!AUfkeY_Qo](GMJ96/BRZVD5r3<l%"+n-^bk*JE3uF?0BRk]n+:p=FR2cf[>`25n+p^OQiFKl79R0=qiIpHi@E9bJq8BcLirUsQA<WEQ7=tt/Z"j`+EXQ9D8XrV1>]i?'%L<e]oV7_TDOZ9a>(_/%EA/OD:=EaSMWQVUm@YQ=D8(q3MZ3.F$0O$Kk0P7g=*@2fq'&"NM.g*ke)lB&6LS)@aI_`M.3jU<'6NqcA%USLCIS^$^=(_0h=QY/Ju%=b8CWYifXhiQto1i<;?o4aH5<%_k>3\W2&4=V=UZn.Y^p(A3QbD7\l=Foe,b:pdL!)]"&&]tk!%XL$W%q2?oP`+]SfQ!]2$2[&)9esm:^qr,b<8n,o0D(-M.#'?W-@qo$]1]:.T$:G&kK*$_>l8."7E$hCFFH+S5LcI(^(LWm`fOR`HN",m(%/6?4;]GJR9]??Se=Ad$c.loYtZ?"XX?,=nK`86Kk7",>?nj41)f`[6hXDZAk'.nLD02`,#[DN7j?okWA&Z_S`PKqaIkm3N(P&2qt%U-+287Dj<d7%$fiW%ek@e/\1Z_e9P%9T(3<(k$8nC*MAjYHqf>$VMSjA*MVa*%&.XX8+Zk?rhIWAiXtWl#c`Y&?+h=RA$kmK8SS!%-,hg1eH7PkJV4SG-6(d"=>GL`%]irD[NG[r0NmSnk^5d7+c+eu9[4!beih0f(9arAL<V2!5tkKZZK$fBXI3nNo,5QJ/7BU'Z@Yrf%#0`l,.)*N1-l\^l=?<)'4hsaNnKp;X;"K9WlE&.lhntWIRE%e3*P.7TDCu%o7b$(k2Q%85-k>c#oM$[N?j5[kMi2L/!?aZD+.Rkl%e2,L]pn.`5EeqI_@^H7U_a2-n=K'Vkd0*&qi$+5Y@obDij1LBK;FD\u/S8<UaOXHKcGtGQN^pZ"^QL<f!CM2Bo6IUVgKG<?*2;F:%`i9(X)`4,1QMQE*e<YcT"]L>;FY`0]&u8`R[+fDj%k7bpPSf&bUGR][DMVi)@3>q?QAgk*,cjGT8q;J7A.t#_fq(`)#<ZB:T..e#%&,Ml2Nls-1O6F^H3&\Zf59bFk7#aZp1+6PAa3l^(*M`eefeF@6$&\(]&MHOKSf.'K/PV-?X?[G3A-)B]WOW6g65EZ^K&5E?LlqoY%hpmN,X^Do%pIH,T4>lLK7`Qob[`1!b7LbT^@15T'D(+l45^+'")oU*D(PIH12^j9TTe(3#(eQs7$=fMJ0Z#BNBuX3:S-$2bD-<R$%TG4&FC/ACH6O?*-!=p)JG9qU<=CW&i%TQ+AY*>XdV[i/Zl41&<-((e@N/fA*F-o>s9JZf@7iG,C*c\2MN6W8jJQbg9`SjE-:-/YQ%k;$WM9\2rQ!obq-$p%@L!K!#26WGn^j\:B(*]']R>QKJfdq-N4QVZa'X#kF7Fh.E9/\r);.g*h\@5Ek-+^l/P86cgDeBHom3JAB0%5udrPc+uFN5H;9r6n+2>PJ`PDX=$le10?SmM-C^i]cgn0XGiP2Z2>k@[mW:")7UGP=/$61aXH;VhF2S=A+--37F"/Pg(ESJ85I$o%H7m,!P`'-%Md\#<O]6"L13>i\NsSNc5$.l\'NHkKr,?_HR?0N`>]FJr9Lu[L,0Z"h1e6.8`^gHcO[2Z3_#$eDU']!U(mTIeMAs,J%n4ZS,'K7S6`CYdC7Lqkp(4cmL/fS=p1Gi;g!Sm``^$!Kp6-QdSktk4(nIf4XW2NT5]F/a_',Y-d`,nd2</`fS.9&SAl=_m:&a"/]%dc8IAFLZ+4#d[N]`UP?F'(>']Fd\GpdO^r8!\0R,>souZ3lDf[dTMfI@kk8B_#'4tX@#\Y//ar)&0l(ALf#noO<#8@&QV:.-7VO)%*9pa](n9SQ(^^Ih1a*oK#Vh%[nLWrp";l#jd+Xo;D1c;.5TrUEHk=c+/9@`p(P0q3!U9$7h+EPZBoX$MG<h*YF2qd^-59s3Ot`49%L%m$7N/V8%mMuoI?uQ7M,m\*\.ii)`GQQ;NNNEN7s$ioP47k+;9]349FTSj+&;%J4J@&tnUuKsFM%b_;0d\[sQe<;`a93T:Ra+2G%^!KE.=>1R_-8>YFOAJ5Ta'g+X(DlhEM/EG=djuO!K'/L@,Vt<F[UpD5;Zrdu#UC#o6&Sng!Q;f^]-38sfFUSVMX1]U+JZ1Mne'qt%[-JG<G:_Pe:nu$&!`FarS'jSp!SVEb9$NEIW92`U"Ea:'PboCqA6$Lo(BZ_Ji2M;nm4a=t0_.8.R!D;!3X;;2+aT;7H7MZ8eB0@%%"JU^Y_?F@T'AZLhF_[5,g28/4=]P[4HqX)Yj\OYP[<YBAPG@$,D-@,KkqKtK:-/G)IpssrCUtZ#72F(p@6C$03P+HD5gqT-%MGaK%UZ5"/O>8q9S3hK@UdEU$b6J8X2@=9McQXLS5uWhpcs&u<+;AIcMW*8b2a!q&(5aQ$EN3IFTcF5=]&BSU[nrhW7JBVM@A-4I%(4D8%N79`O&;Z'K_i0*ah0gFM;'ALnA.1V#-+"-b.;;:UBYZN"[=^#p;nB.j*>]9u'2"'i8e:ST*nG,lTe)$*[Ur#pgPnd=R^sO@2/;uP%l>@e=BT>\['+(Ge&^[7A3/MZ&%b2[J(&K<fABbO6L/`F^ekFS-1c#3%VPZjKc1AU[#fE9<hdd:R^Es.B*WG72n+])51N^oo7B:"q%7KbP7nd$#:(kf$:"9?$_/>n(829`%m@JM&T7#)@GLoZLHjR?8*'f6@a>Y,J4:&qT>^uXnePnY@kg#]\OQrA2W!4dOcTY]_<T.49+%%-(;\W`5LA5W\U++;k0h1[D;<C2E9h+ENL,k'gEUZf!`5o71tmDX`m,WJ:uJ%Q+`q+S1QocskN.q#tWB3CmlfR)-dq`XKs!%Te_A%>[mss"?A2i`WbF5Sl!-sm<n+dcYA(D<EISR9c]p(JR`g'9$elCc^*5o&rE$)"9q9"%6&r+*h)+;7=ZH!6<P&IFJsIU`n50/!'/iT%8\pdXPD"M.@+HhGA$O2aAm'<<>o!Yb:`pO[d,W1TA$4cM.L?fJF<l#XZW-bEki%&0CE!>M@NC_A)UaW!3G#W%N.lmW(lSl_)V9@K%P<mDL*(.\emY<)s)@u*+M&/8'ch@<f<"d4KYf)F97ct(Pe:h<`7a=)(9XIm<Uirst/9G:J<=C1(l%_"U_'I`Cj#4;Tg0r392CO.8%1/KdWp&YHEeFn48cQ4r;q95XpR&.'0bk,ej6I2s9NQe<7WsWAK/jP45'7g^_pMAWqG3F+Nc]iIg%#`](0,JJ-6GgTk0#$"&"(I!T%bu-<o;'R6%Z(!"#Mk?Sl$W:H"Z9;.]9mOsQMAR]@>I]D110bB#qnd^uX?s:nL@D\CQoPj894Q)2b$q+J3V2k%lZ!lpO$5?WH#.q"%bjojn#%3u-oWen>jC]L1@$I2F\F*1W'K8Tk>a4VP/"ak*U_)!;Aj`:^HQ/`!/a>=WZK3'80SZOBO\H*)N)i`nB_>o[j].Gc@*[_O%oshgmKMdnAGaHG,AO]B?S\`MBcumWE(bq2rc#q^bW.O8"rIF?2L6:SqK!CkN`,on!A=H+5N/eW0Dc4n6aI]Z.MG_eP&0hS.#.e:D%%:Oqccj$.?B&TUs`,oT6jOS#airCX$>II[1_N:W14`8o\nSA2;^3$km_"_^-mcJK)J5g'tF1>TXMOD[d-Y'a(atPjE.2ZhPWeJqP%a,Ts57n>RR*TgOdLuhL'Tu/c#&S"RU@]Mc1R+IIPYn<$o,<FZ-jnfmN)'1Y$o'IV?WT-o=+5`5JN4GkFjr!J,$*ua#4UL/D5fG.<%Ta-<>S&Y4$65VH#.%&*_("CPbJoV%73E3sc4#ghm%TP5U.LGZtk45O>*[b=A1t)o6`uG_?PO3UJ0\3kO>X%OpPOg$=s"L$"3Bs7%%[n_.^:$..>j%^+@SW[In897Mn\;1tHT38Hng?#3RRqj]A1YHjc!![?k#T&i@-C>D?eE7e)XL=d9ldT`cC:pt^7`>rp[*,Bnpc-(a%-9Pb?mISSK=uQbnWT0%E473Ri[)([!#`^cS%d&cS+cKDr_-#eEbiC#c-&?Ob+cOl9PLkLU"64J0e"_n3533rHF[JDeh<1:R@:%:k%S<g`'LsS^W/XAJNKJ6jY7Ei3.K8:A7cq,kO3::$\UH?4^4V`(IZ%\Re%/g22duj*=N,g*0lFPJl+i&WA?0Xok@)1XCW%DMR]b4qe%e8DFqbrFI4@:6_&Dh`;DMG_KR;U215-f&7=#:[]@AVD4$''>S@?%JD-EsSLX4Z</oRf]=9!meU/W@^9K>e)<c1MnM(%e=c,U-iS0%3u@s9\1AZP%R:lb2G;)<RVYV-o&I"gKV@WlFr8\F]("^n=W!*9\2O*]U20g-M)i'QT.h3i"K7#RpmB_WJK3/0<"(6Pk?@:sL61gZ%VbM`YYd3L[KY*TpB"<$2_;3%GF<t<9RbZF$cP^+SW^mnIZ*?%WPW<62:,>.agEpPU1+#<FJ0=$&9,iTuLK\3jhD:68:!UqH.-Q8#%;Pd]4%P'I6N:S7gfL;D]k+AWZ\/#tBi^%mUHWc%V8gkS;o<aC[.Ou@:1.ZKBjR--7TQ4&Be2*2Q%5(d4YM`hQN)ThT$!1.ND:/#^%BDG,djjF<jOPN/0m`K;6K`YWd[@o(;B$ph_F8<+="=d/SLi@iFK=R9mVGZ(u3egKI^s8]U<\`4!N1^C&?qS9jmEu/m_&UC1*/$MV%#BOLcnJiL;C?sY.$o*`F8.hV<#.inp"0(c)6]AX3#3du'gaY#5Fje7@Zjb2HkLNHjOS?1eK]WQL<A=SkW)kZYK?r'2f$)nQ"3_</%T44*Vl]f;/%?V-hU%tB;1j!"[j`Ga?M<?R@L8@72[sUiOZ\<anbgVN7fg<H!C>8=hVWh9o;Pt9l#r;\84[pn/\#MSP$ZT)'JLe;Z%b$^T;En0$NE4;5qZcSS/UDALIiDQ4M'G\if#9!`q__jE[hf6t/$eNYQb/G5-+l/n,$"ldk=iR<343kta7W^Ce1ThrGAo!Fd7Z"%r%^b!^M..%EXURcrTrle)rbCLq_AG/9k'-X7#6gKD1_6\<pM]:9*&E>B\11nsZ8KjuCe!YV=^gJpl#JVG%W2GoJ<tH0p#jKRIa@2t[%>Lf=\E7Eq,5Sc0S)9`OY_3i99Ks!<j?r@8K`,'`fTb-dN)32t,2O$c=Ba1&[I4EHK63kB6m$OaQ1!O,?0%94WJ0RehY1qnq8Bf&6%X*+d5bTP'+-'5IK.]`oQ'&g)f#.*0+r;oc%ir3sRAi&h5W>l23QC(k[VDEiL=$nMDa0NZ=63(8jCXh2h6+dX-_VO_b"A<s^1../H%b`iaYIJ/7bJ1>89\lr5uVX:h]isROX@Oq^]`bZFZ-tCU[[YhniMOplK@(Ks)dM]p^0;ou:e!B6s(sLIQ+rR`sKpG8"8Y?C15jj;C%Tu4EQE/\fN\rnk)5HZ3iq-LMKrSFMQ5\EMt=61LuGZL3Nb]s5D_MCs]11hBI+'r>'TaX?t7Ef>/d%FX.*kJI_-l&[@1Vc7/o]U*A%b.oT9Ad-Uce@UFs#%l`NC86Ifk#a_`'g-/HcpW$Ye(AE-`DYW>D;7",`MH]#m`Z%";(d[h*XaT/2BY-]NI-Lr-Hf,7W8*LiK.]pg%1c^n*BNP\,!jV5BkuA=(V-n\V:bg+O1<(]'TF;F,(W%R$'SqW)1r/S\7ETe`im9M.Qs%7!hHq0K\d5CGcm3,t1`ZtHQ8'F'NgN;\%.2(e5*YX+^$H>gQYjg:"C/4:]/j06A=DTB,h1c:p$QZ%B3Q:UB_D?kM3ho*cdutM;O22ING?LX?E`oUp5EZ%%9kVS8c]j,<!&eVZ%^e?krPJ55\"J/o<66>s%%i0Igo=Ar@a),Qu4YX_SA]:R*ER/2#=UPrXPGi1:pZ97j&j7"X.Use_$qQaQ&!g*IRkch>-uYm/:4l>J%2TG4p'c)/]Z(lFmN91Ra9R@#0)V\1/L,t=^.`YjtW2l:,-PYrae2LL^WZW_X)7(/[).TgX$E!X#H;*t*"imLFX:dp5>7+696iFf\%@aq#NJ]O3X0TUYh@>5guk>G?BC4])]C(^dpS!$Tc(1<m4I/:XtZ;+2lnG)X,e!EYD><P/ui3Ym(#6?L;*(9b0!j\Tjele=G9W+=T%#U=,D&B9+OY\U5NLD?!<Z?D%G)Y[nQ0XN@7n66bd9j=U&k&YH!$1kY_>L6V;BukE29&\X8.pBqH8#?:(:^C/Qj5HlCDsLh*e&1E$%FA9*YQu1Q3=p>B:T,i'jHOY1`WI76NL;=n_,cZCWbSZb/+$;$'RW3q!#4"C5i`rG/R7>3k&61G7BN0rUl*tHPJpq!;"&^fkgOp.2%+=CgjP'K]PR%`>&7rFO=c=M((P)<*hJG?4J5cjjZ8he/pgjoF.XuG+KD9:5<Sm]=N^.AV`S=281\25X=_Ap`a)4<Q:PpBp7Aeehk%P^%Q;(ZQIj>\i4:mJlXnRaH=(7\`SQ0?+4dL/Si9<&XS8!ZRVSk[=LP''+jhr)oZB1G`a,YK4FYXP*#Ef*b`,Df%G:rq4qgQaf[\%+1lV?`FL&"2tZea#%;&4L1>"'@^i[SCi^]IOm1MZ^XY>"oE^]1)7/c`*LM\gDZ\rdHMX4hNIHG[,^`gWZhc)WT!*9MGA]/GlG3&M%'ip1-K3(ONE9I?ZRP.(2^XN#<jB51,]NmnNJ?X^@=gPnc9m#N5VrnXoe)?LXXh3a#s'iQM)[f=9cm'g;NO@lU^,Wpcii0c:'"/<f%^9Gc`2!KK5+Pi[f@n"qS';NQk.#@>Cec;,C&rG:JBhY?J0b5"37&FVWB0Xr\`),+jY)2<^*F>/0Al\IbIQL<M=?>@0eaXO0P4sUE%\d4dZZ$ZCJd8_NEpE[>Jl?mIN4.DBe=U$WkD>ek2.=)5_=:uul`gNR[B[fJ4%s6Z:Jb["o:K<t+mr0?6HMi5Z*`:H,*6rTqj:dUs%![H/-P^P/(1qVWA_]dRZ20#I]R%K!o%m)@e4_R=%'C&Y@SG<*GcLBh-][7<=:@4<!A(oFQpdr1/NYCW2MTO%uQm:LXieCJN&)Vh?%E447;,r*)I[%TFalh>K_(6Mo*SD=gA+;P.CV"C+.)`qB^ioR-'`O]+?Mu9'T.0Sq"-+W\Dk4c'V>@Y1g<F)845Q8-C<:Cc%d=O?`%$Z;:B+:g!W07q30BDRVPKsBiLLCuJX$f/1W!A!a3$c]U_9Y2LSinr2h\9.V-9K0+n.D;ed]Kn2s5^P4lX956\aqp9/2m\s&$E$+)%^;+i5K=6ER%-H,@/$PlE<$)lp+2ctO[:l&QRP-A+X%]V9"A[1\O0cs1#.bVFjY:E>ClQi+.i@;o_:a[Aj60MKZ3_8</5)SsiDP8e%*#Mu<^=_UeRs*jE&L2m/h%u9L3'+;QQn@LbCuP[X9P*ha)d0!fj<2o*(W'Tp0NZ/K%;$2KojkAT^f['N^_*,BB6:j"d*[p#hn![/%?YY*NO3ne/()Xt,06DAn`0PR@?rMGD-Y@t1^m\?Jf_(BPHrh[Brc3X=BH544q-s!n*SI\%,nma8j4L.K$&g+rl%!mT4.=X5F^4j^%L\R0p$1&9.O`;'?hlM^QnApX/r]2"E'KqV!Hm#L,ds_b-BdZAnI$``I<?6g^4[gffEG.h[fER0IR=6g/g*ZNrRJO9dm#:6hP&[&G%)4^f!f3+'Nbc^rF^O"[bZ#`BZZ"$Y#f_fQ91:=^rCS1!CoVqUi*\,1WCKbpo_oij`Q-WS,HilIH%MER6)9-@H)jpn&#R@&5=0^Y!%H?TL(h_TGq:X=:p$*oXp(fZ'7eDn,gHo$ht6b`e:rFW-\Pe!F]B"?.afQ4gU*QPpuI$_!^O\H-3O]Z:DRW8'HA`rdhZ[@bg&sOWH%,DBU_N31Dgk4%pZlX.@Bg0*+50lDd-5),)M`(o6T`2_s^(u$>j#6'GF(e_U65^^NGR?%73XR4=h\+Nnd<kkF\?ddcAjuTR?ZYmg4%nBJ\S<Fl`.`4iTE]fsKV0nJB]Dli6u!\6IlN*YuU&fIc2hqu$`'^3Ngp5+3HY=^L;aK@,p9[)3?0SW:/Es;t1E$5jkIbUP&N"%F\%@$ZMO-Lkd_X2dXr6C44c,?sbLkHuF*06Z>9--#^R@<6AQB!r$)>Sb_g&qqeT.A/?1dKOf>%a)f<dch(WJmUrG[9ek#)r6=iecOiH%+<KFJ!Wd!=$q]reKW=h"#feX3SfajIOYm?m95Jn0"1*:X`a/pe11*7+iiW+],YLhc4L2im"]cMncHjsa:mL#dF?GUPeE'l!dCDST%FDane2=W@5dEP/O9*:P]5T,e:or#Hh5`Wbif_kt?/f#_:+ueY'*GRO(U-s0-mHlCRNZIA`7:;HEJVVu`4idEThM`Hjf]5;SN8adL%CYJ,u_lT>i%3mq=A5(#OX$n4[0t(FsN!u*k,=mP^ELk@ha89sA2Gh$"fb)g=\Ni;9<@8:jA^o`gC*sTcSMi;ur0!F<Et[J[9T7u*%^kU>nAP9F^:q32_D(I4`V?[?&4[riBQ_qP0)IQ]\*$_[>$5"Y/.$tH_;i#DTMAV3CO&T*X#g@B^&u4?[`5K>%d#$-V1rWuSZ+]LF%Ab2glXJf'q3d$X;J&5Yg7]e3-e>]bXL.,QM<X/_0@f<<9U/p4bjc!a%s/F'4$k8)U>iOYR%\52>8]*pJ.0a=*FDZWuN"3'C2J>oU%WlLSJmYe6R</8aidqhWi/q0s;FT\[Jh.]"T%CUP2$\cWrk$3]0/<C5m2O1PDY/16mT&k6;85,L:Z7U6p'cM(iR9d?2m&Y'V`pTmL%17@csh<YW]fIZsWbrOiWARHme/XSEQ`GU=?cW5m5=s6Yb@M@rD#OdR>ZL,5cAgY1q6PC?]SH3nd)B@B9<XZ=H0ocTH?iuGI<rVJc%27SaeZPeZm1mgrR]]P%I^/2I\bVT>t2-DY=@k]aUG=L,rd!C7W/*"ODNmo#1l.5+QMr))@YS^@:aG<M[.9uMRg+kGf8KZoZad.a7%MMjoq0s609-N,Zl3H")W5;4pj.rClhmUoq),8u#G\thM=?&(9OcP0h%'=HMD9]%aUm^]KdSh"5Q^0VF'Q"$L1QtZgR7QkC&-u>pC%6bnV3h+`8+Gf.k)Si6a-V<5^r4R\!m@5T#N1K0GHA\lN%jcfPPJp"$42eL4chJ85_%XQamY/d9(N&oqj=<?r,AhjsI_<>^C*ljXP%oZiB)Qgc$8FjUktAiFl\R7&`2DuAJO,_DLTISQ#@`VWH)MR1<M1Jt+F>[9SO9C.!&h?%Qsi;9/$,PYRM7t;5,*pa$#a"=JdI&P!I%ES#OCDZ%]!Et(W2EIeai=^$LI/bLD0b$l,-olre,K:flt38HV&i7rm'\g+!1i:'t7I';<0DNp;$I1ps116Z;*NEj+;3/TLu]@@]m%)o^^BO)V&VMXqdZ*LY##EoS(1D,BL<9:&@U?8Ie)*)?RddS3r3CUfsP\uNq;rZ0Ca\1dhgR@+0Q`W9]n_f@UmH#V52!W95;3AF%4%Y?`nfCAejPKn[E>-QZAIeSC5iY\`b,Al]@NcgeYS4Z69DVR!KmB_,IXQ(93'Cu:TI]4VG%`R^uSma#N!%[LD/B7k?sA!ImjdDBf,%U)DH>X#J3A(bNnqnQ52o+,4E0^!l3RN1h"Rh57d6[r)S.Cc4,ck'cVUg\ib8rLQ4,=*q8Sn*t!HTQ:=H;>$30)sIN<L4D0?+QTjk%ZjgDF]us#rj>MkOIW"fA$upi5C$E*hBc_/.l0[iWS)1#[puuA89^3C]N`.kJ[07c9_*ocKirXu(eQk[Wc\LthMtgH)^fK!Vr2`o3%1iFibAqG;F-sg:^?"_44p*k$7J`nFBlW7P[;P`1[D&/M,9DSG2k3EqCV=pVY_N\?+gH118H'TGtoaJT@#_KsgS3p)V=8!iUj+8Zi%f&InNUq>.i3A@N[]tG;#VaDNp$R*P]CB?JO&/ER1BX7$M;MW7@8rW;!!lN7Ng@Wf^&EATo?H?VkCo's8X9M^;VHXt*ah%Z3mR?Zk%RhSYuinMqo"7ao0H-VhI[jNM"UB5`o$).I`=[5;67rAB]TbD9%YHD*egSHKuj/)-)_h,d<$&k2IptekH6.PZlEfYtkd%Am#,K&+/%d!E-mKU/o8jB:.+J4OmlldEfhJB`,\bG"eYnBXD/Z=dLDg,&csOdAU,=qF+d]:sm7dH'm7a@r$F1@'q_=tLYB5(J*u[]Jbb6H9Rc%1id'lN=3(>AH4e>]\pJs*mZjE,g44njT:9h)3Zoc9YARD:D%iV=u'dlKV=cRTXE36l62m70PO>hq'V)p6Q#nq7).,"M[+i\jl)1Y%P>r*r[Wo?4NKAqklUYjdSNljR4R8Fr>B:I@(u:&DDqu."@/%"3m/,&kmNaOW:(r`"M=GE<)2k[UmPi2<9LMRf='hf[k>#KEnl08a%_^BiXr;VFtc(@f\ZajT:hJfquhXUbDpb!Sr17KM(S5td:W/>k"Xr*99/ma[r>.;I8=Y9I@dag:*<V>Rtm%2nie59"Cosg"84d)e@%KKDL\,IY]S1>oT;>4sq=!cq.@M7&9+L0StT(Tt]`ViDE?e/B)7f/<-nbkm`n(r;$IHkCLd\N-^up'F92d](^#HK*>BA5+*$Gr&/S%TTirb1H;D!UMaUpJlViB\OfGQ0%NAZ2PZ&%(,A&bD2to03'H,/oVq#]Ke8lRZE.L&NmAXt,h"YH8Cm)5hkD<cC4*9Z"mI"4mYMG?%]Odls_40cI\NQVnno!J7L7DYJfl(GiN3%@*"D6I,(u$k-;7&V&PMP78N:BYY/)'KLa]+,WJkmb.$j=!br^UgQ4*`RF2><_EEW2(D%Dk?mlnX[\.%nu]Rcl[CG^R<]k>*nr<GoBA8?4-!)<jd/:oA`XVD<fCh","eNEi7g+F323)!r$Fj)$fT2Z6&\N1F1MIAZ^@J!?->Y%Yc:"J5W6g*QQdRK+:V#XEe[qE)rT!Gk/#?R%ZLT2$9+PB+;^\C+^=Fp$75ifY!!RO7WB]@22\Z:'d_F+XV=mR*ND!tj]0,aC1?h2%$76.3HX';3fdCBDE4B`KjEnLP]P0%A/fL(f<lu;4QWW_2LCFU$X`&F8d+j2g7C=[eOnJ8D/c8hfIqp*@6b_^9f#OP4`N>C\:U!Rh%]f!KMe.)(.cb#lV2PQqLfRCYPDlpZ=6T;2HP4%S=2>&o&A)P9dL$"h@E&;B"%ZZILC1*6WDsa:;[[_!iDfs0HZ*W6(hmQa4=?'0l%pqWQG=)b72)#Z)mB)\;6dq71-0DLY>AMG:V2H/F3[8"g%jk<0)Zo4PBhmln66ZukiFiSs;8\r&f&,+5dfGT*F>FYcJ9'Qo!'5A5C%>EL^'lV1p@6SNN/<mfcC?fHW:D3]pWpu)Mf/*(NGiF-"iApq!GB%k.SqfCL*h+bItS\IFLP'Yr@_025&V_df.JXLHNODA;\?!o?U%M8#5lRX^RO>77qCH#Is%2")IG0'R3V!h5FUgDJ"*`X:M7;;*'/*t'<&;ue"d&"=9.li$t+r7ZO\d=ZpX]<%FlGYVi`_(ma""A!@:%Q)@*f_JJ=D*a"(u2=>T&T>9&(%qFO5(IH2A!jBd!eB9N88`n3pa%E:qP/n26!K8$:(r_[SUnLgQUjuQ/29r1.Yg#+_9#5*F%T+_u%>XB-]^i4LCVmElI[IOV]KY"+IO#>r7UE*5laH/P2nr`IT&dY7Me72I.U$1Gq!pePaKfomA-q`]5Wc)]MC@A]"HuWjpAYPhRq<DCj%l-Vl2-SgnbK!#faqiqe0Yeep'B,73e0ubt?N'U5PZW>\`1oOC7,"#Lj%ih/L&q(NKYguImeml;dO?GL[<]h8R8'Cb[6_S>p*_s_a%IV:\%_\n'W>iNOQZ*Nse_IM>RP2Li4L!_6.#KH;ZLeNTe0e+b,Fa.GN>?k]d7X?dl(tu3KVe@f['BLhk<m4Cng6u@)ZG!E0kA`&o%H>W1d)&QC(R<XiKJl#od^V>Qs;3(@A0@iuqA1Oqh1og5s0!i>`M(Kc/'cluHRVHVHP\Qm3H$&E(JgfE3BQ27?m!LRWb2D&=-3_D"%?1;<fY!)!F/JN&Q;%?bXfnpLr>rt*OVELL&dFO8K$cm?W(tV_D`]3mN3j*l.*Q>Il+To$]gJ:0U8X:F?apSuQf%o@oH*\O_Dg?;Z%Cku"jDfH;h'pqGJ$GX"D?/?#3k:;e9!eP]e+&i*+g\b1?2`?2Fl$s*W`:uu8)MY=/ar"'_S#]$Rg;O64,G!?uXo'j\M3_9&j54kD%Gj5VjQ__7&efOrUH,)5u!T"Ha1R5aP:19I/J8mlEDmo)B;u)HgLGn%KN_&I*%=WbAZ0H(tC@jK7-ER$=WB;G4?l!<,r78aTH(0+6%^VC\4,aH]m"4irnaq.g^h@r58j7l&lHQ6+]a#u1d4]-sk6rp%-*6"LPE)YC+!Zfj]d`+!pFmDnCMAm.'Z/"pDG>m96JiVDOil3^2%3jPbE`Jl#RAA'F0r"XR]09](57K*%4;2c@/:"GeC7'Lftl/h"WZhTen!p6jX1A*b!An$s>TX.3s)@=fX7UfS,R;8BerC5;s<:X!2%Z$lb+egZqN"4)C3-:"JC"R>>*!_+)N^^-cC4HF"kfI^.D@.tO8MtX\JA3KMYWJQI7Nr@>aZe"/Kng"Q9HcBR-HEUp-lU#2=:En8M%j7-XF9nE"7K16`L1634\;<''2>n"\YN".qdD_73UO7kHL(bLba%um%q]gO,h%/83EQC:<'Z@KUHV]*af*quV3mCq)K`ER8%q3%&a%*kI8'Hge4Fc'[PB$TV2LpjRCegd`S3#;Xfb@q(D/*8!&?pl9Gp=<:p0#I\"C:s!5oJn%Qipg"R9KUC3\iZ6[H;:g_mgCVFEXIfdN%c^7aPPo(nG\YI8[Sa\2a51q@(H95!5CQl)s'/`-R@aVahR7iS=rpAk_c*noLeUX2\-TP*>m&Akh4,XC")=7'/(;N$e#!1@j=Je?%%JDnlj=:Fk!"H1$t"\$b>dNc$$o):^%HHfPV1$\#k(B&I>oYbE]Eb;p3*M(iWAD+I@'q3J:<\HK$kn'7Z't^IUV/n&RE"bh9GY88V%YY._[(Bp.E@)5u`=hnZ.`ShW0L%?9L7DJ&\i!HJlA<a?Lm7!nS+.;g_NoWW(8fS_:S6;4]Pplj59(0e9rKJog?M)$V1WIidY5.m"%g"T0:FQJ0[rs@!npTdaD<2pI>?Ujge#t=QOiH<-Ar"#=6@D>ufO:?1&%j5W>QV@p^(INT:T5[Xo%JI*R]kSWIf..kZCEb2$4E-!k%4]VhihssNreKUp.im<%P,ci&jgk(V5Lk<8U/MlW;a9+gr5-Z`F)ZuS0d%4>YTBUM<MbHSF7#0d&4Z#`$7r+M/P@i.U2+El$Z?a=k%)ri_[@*A^gauS@E9i\"-XKApGdO-B1oEhX.T9H9@7I<.6\\tFdn%ZgTm:&+n5.kNaL],#+B]8D=Hfk&m3dUK)]A(H:BLIEW#F>l^%H^EF-AD+aSqD*6fcf<>AjR-UNdL#VH=46Vj$+;Lairq68irq5eYAkG3<`rr.)HPf*A?#RN6@mHGr:P>u:^@[a.S3]?KCJ9Hq>k`l%cWH[P.*?ch[R=2dK$[sIE=Xms/<-k9CnId^qlMU,'SPp<8%ZTZf!=W9PA?lBCT2$$eUFPKrc=@eb4,l59[$+`AI,0rQ_bn"OTgOl%?^W';^GJ\U+O@_WO]tO9MB2l9el^?_e8(N"N4[XfPPH6Pc%uHQVd`=H``H34/m'@u2DJ@\?sgG#^TF^cODa#o)ZI,Ok9C-6!QeJI%;I(K'$`p@*7q+:\.?!bR(R%-%)7>*'hiiVZMINMk<YT$fSHoKKJ9)2rlreZBF-Z8"'un47;gL>6p+5oWrfSa&@*a_^Ek85.*G#[#%!SCkKDWhAA);`dZ$gD1nNo00VZ\`Z)HtW/d^b"BGUEVDKs(9<CYbac=bf&JXmFa-n-G::bd(9@C.DC&9R]sStR2!'$.*!&cb*?*Y%p_K)F`MU$o?N)=Z-S*[)T)KJ+.H_->eT9d7`m?*;9Tg2/XUT*8k*9]aErlhB/,XHFT6G%NKOjh/ZDB[0-+<PRhEMHC-=gZ<4GfWg%:,Q',nf/q;h(kZ)8uPWsr;,".:SFB+d6c]5]X0A.mrog8#in&8Pm1B'12%o]!=s)rp$QP"7&H.Tp7RtkV'']nn%d.'Gub(FqI!O!%[fUpA.$#KYrI?U3=JD_0n!rQ"p/J8^b28qI1[/g#CE8#JhF/58=VETT'apn9nd+/h/H!t>c7)Dqe@ruT?'o<n>.CrG$Nnj`!=Eq6%7n2<3?pZ>YXDK@GR5*EnJB<X&B0it7<hu4X/8^fs+ZKBY0ZugBd*+Ii!n.VS(X2Hs,J[@rb%JI`AS/Xqp,I7KhptnOc<pu0:F?'F%kT<k)<qFC+7N'E[B<?)A;^ajm_4.,\UBFWI'M8m8OkA:&0BI_JM6mRO+OrEO(b4d:%@0[LJ%o\?6RtSLZ;AI4G/)]q]BLKD+#%;j%ip39R_9_SI#>R:47]'5h`#eC@>Gdmo:*Pk#KBVIgUuH$$6rrWn=LQ0#h@!q-0D94Rnf/<lRi(blcK9!r0t>#uYO=a^ZF9/foDh@c%FRX)XTd;E02h>;62E''fQSDW#16_+l([UQqn(P(YA1"A#0:;Mj9'A'hBCW\b\ZdWh]m'FWX@s./Pu8.+hnnAtRaa]*QX;F9*VF2/%Zo[ZBg]K1QC<ouZNEs&,nGopRA_V=6eNtft)jjV-g[L$,?.YoR@u3@ZQh]%JfE0*OnNGTq4gfXAU:+'&4L!MFhudfaO]pkcSh>8M%ZQ:*YbuGGY7HX7eBAS0<m1u_n!:8Mpd,Z4urhbC7Ig#YP-k8_DG@2rKF17E)+tIj]XBf3Jf.7a_:Wb[!@g(Z8K&7Gu"t0,'X]IRM%^6Xe)/@G-X4bB5@Nm+_Cc'<dje^uD5OVgST@$Cs<^YJQgDmm:V<q<qB(kp5aIaBg_K07Wa3p3S^iHHW!r=p8O*j.+6)1jT)EkSFJ%FaT,=n`cd&caob9G4O19_VgZ]Z2U._42p)TNs_u_V9^,o/Qg@p'aK8G9pNpAHZgTqmKSDODp:4VoeRV@?&.t[1FI6uNR-%XDM`d7%a1>!OZ4iAt_RmY@iB:Zo>4+3kr<V4Y5)#u'ImLi6NlX=g@V7V%gO8h?Y[+rk4_kEId`r6BJgMrFOQi7NEE4`Qf>1u?6>NsLMqLOa%0eg#)ZNbt-l"0+TiQ<iY2.tC^Bq-bWQ$ol22dr;uL'?68;j/\@on!A#HF).\8Vb-'+AH<-h02omh+c)e0H0BE_oYtZba?E'ZWJ$X%&QULlYk"[]:h71oC8/&t4uk/7^GfO#Php0k/AF4*F`t[lHfRU<+W5J);(XGMlYIU8\*jW"nnba>ahWa,=&V*(':U.P9li?NcU&FC%psQe8euFLq"cMYWN7D/iVmB<:7]^n1A^brPf$j(+.rIf6M=nhA_^",GAK_E?<SEqi;D5:<9"OmB]LBBRphBJW'C_`\QHG>XX;B5d%^#W(m(BC\Ib0&t?XP0.,75F,5Zk$,:b=VEBs1!OWcTgn+ndK"VeittQkPb#Kq*4eeJ,[(C?iTdHbU.f<b>4($9UC8/jZ@tBG"m7e%3f\G@$JF1)$LDJB'dUuTBanZ\l)sto12UFf54&8#dfq_rMg%tomBc,;:H"-eAS"0KN+I8M_!B5\be3eAdAAG!eTd^m4MJ(5Cp!D#%[IAL@6gGQT1=83goEu"oEWCP5<WSTmR;bt+Acm(i`(^K9bg+FC&kBt=<r/C/k@6Ytm>+FHCeu'fFh_'^Xh7diQ;5$R@F(pfA9P#q%>km]m@@)/8nj+M-[<-s]&Wp8?Aa]NkqBTRClY7FVZ5m[4k,W==[VL(EA%bu*=]mNWQB(;lPdI%.mI2O.HI$E.Fe%:Z:9^eiam/*c%]F-%2bL.84m@=_+Wnf?(]`N8`SQStA[DZYpGA75i'H$XtH(pd6,O\MjSb,E_g:]3O$;M.om,k]N7rq!PkRmEgNBB3Fe)_7WkHC"L%J#J3iTp$E/'(-'\V8@m*f\XWhV!FM9&R)sf_9Oo=-DesKk4K_;f#T@_A@dsjKiHsI.IDI:[VPZ?Y.-3WY2G_i<#StXo1YO0#`Eoc%4Y\Woak7?b$0uh=3]UZnWg7^4^5:ZVC>EEJ^e0"D5,i[W<IA"heCK#PVaHfZSr?Y$H+t7.VV5OFr6(qVDkV,P^fO/<Q'jHCZpBV`%Ko1-9)hSJG?Q^q]aE/UlGEd"6/m='^WR9NjMmLLm`?FX11QCP8W"#;b:(aG8dXnUJLIYf1Ukh\r]gDUaThf,SV0OfmT!>,Eb*dRT%#lSB73_lX',3dU$#eGC8VH[4fBBn\=Z0oM@d/B[7UHWZuH#0+j^LrM^g_6G1ON>p3\.?]ml+I!`Be>Kadjn:)oXp^H\_k-L;(^'@%!o0^rLIM=#[l>30U02$=)&aX&k.)Bl.re&NU*!O3=/Np;^Ba.1&SM^6)BoKq,-&,\YG:)';mc<KS2&?q!:S_kAjKm,pV>MG:R<sE%NhVD+UkjQt)+cKuIWm'B))@=4FOJ.sIRN5VgC0ni&A7s@QALNn7;>ApMq=oGVWVZ0>?M]ccsXj1Do7oQ33q'q.:F?QN&X]D/VZfQ%W(9=DN3#d3g?5r6GFG<"rk(1kPI;.@_oCibY"L6m@d7M/^R"S=A'M`bkggnb3ucNQ]oq$0L_GWiO.X93\alZR4Q2:g.&TR90*teP%@Vjf7L+(n+`ooRBf`Z8kO`8*n31GP1/iH[:N(+PM7eB9RHa=QYU@A1l+8Lri-'/!NO6pe\m$Q\Cfe%pi-^M.W\+aB5_m1+hKV6C]%\8o$WZHYp'M%)1m33f`lPOCJ?VXrQ\:3<AO(mHX-7c0*iR"(WP"BHd_eVghVr!969'*Q=J<KS<n[TBnKBX7hR?0"]>Z6`O8S#(S5%DB5?\WUmI?FahG"6N=aGP+BBkqpGV,Tc+SSCph3q1t?Rtp*r\,?eC^B3dt%8h]%MeQIqP$)N5`,fOkkf5T49s#1b'JB,J-4c*BdZ%f[a)H"uk+]A]4)uOmOk&N)b]?Rb6O8%>]!u';P5#?na8`d^b4>T`Y+]]#Q^>^46#_>8U=ejEm5SlH["uEE61ZjuGmc%qQZt1U/Rp%?S?#61H$Q'An(Y\pHi(5X#=p6WJ:hh%$lE1eWcU<cqN'$fbnNa0a:TOb^28k.u?!Lj$bjY01oV"(i*UB,E$V&HN-s=bU,0\I#V"<%_e+DJaeX$0h3pc?9-U;][WR`o>Ln%F4Fo*hLPd=r^s2'Gj)p"[H7KpFF6>Q1YDa=lrP]mE8ne31.qNC>actUKJe@mj'p!VqQ6P9=%2?a%7Lp7pson#3PEq/Y5c2hXlf^OIrAj'O\1#O:WU",+XT6\pjLNI!q?%I^l2.d;q2]B>:E%i-G*0el3](KPFEPsi"ptq35G+Onp%;^eAaWERb?F%!XrLuq4,1bsEf&h\j0WGfdin;/a#[p3Co\?5[(f_gc0cHh<J(lGQJ%_3eT-GAQ<P:*Th9,<o&[5'Jt'nLm?o[er:%q*J)2l)<hlE7D9nNj(L(,[1O*'I,;K87t-Yf(*s8Mb[Zg.BI*OJ4Hc;(]hWf#EN:lnutOpO(P"XbfJC5C-U2E$[Ss)lN>PBQSXt3%Y+m"q^2YUf3i]2(k$<s,0Ru4:?&gmh*?t]GeS!9:lb(lQ,KNPVj+s.+JZU-u7H^$HH>Qq<SniRd9VuTZ9=Y]d&ih6lPJXNJ@?/Ed%m=k%oIUr;89_@cqK-TBpA6Rh"NIY?mN6_@&WX.*6,agM0+uP5_MfmNudH82OI-F1\IK]fmE0b^GNp%M_%!O=q4m[D45HKl'F*/-X%rX$C.d\L"_\,=3Ur^Wh9#M_g&ffaQ>"FutUM'01N@l^iC/lYo9C+O@UJ/,8E/a;!#`;&*<3Y*r=8%4WXBT%ibhp9**XhD(.UJZPe%*18ETp@,RFH=I46YPZbug0\mpV3_:6);``G3E+\iZkKKmb^Oo>-dos.DB=7bq9F).1rr@VT#c"8n[J=BM1Z$Uq?`.[[?":7qDSQ?%nB4_OpMo[CV5/.I-'f]gF]2rB>#i3Sh:a($Z#KD:mZDh4eP>g<38Ph(*-Yg=aumj@$>^V7qpOj<kDRM#94p:D5'C1Da-l8jpfMX/%+s4/$8P%LN[IqmMn5u,K]5'0Q>oT!42#*O=@'sppF`PpA9%>sUd\t.&kd>eTSip?uCRp7MR5DJ*H.P,BKjO>QR6@\$58jF$41h+8%dVV\KE:(*LSs^e]Q3/YaeD0kHVB)%+h=L;&<D#r@?LQLs,GQbn-J%WE1PJS>4kCQo1uK<[;p"=`\uY-fVp<mf#<"9g\P.2,3MSi^%QtM,/6o?TiWIYu=H(oeC(`:/!fRSSQ1IGm/:^"D1V'CW7<,Z\EIHn`femk7plnP4eG$q2fSQOc49nAs8*`t_DM>PPrnfGN#dFe/^%op`Q#Vdn)bGP5jD%&oC,[J9]IDCH-a=W&J3`X(OEB!W&9ff"AObq[j>?r]2piJX7h*"4=j,r^qm_9b<:gDBf$JX+C&XNJrkqi'3f%a_67cl?\[kCgD`haO;$LUu`ETj&'Otbj8O,;8U9Gk14K=[Q=]*RsbFA1YEfq7Ph!]b-Z9=Hu;7cnhB[9ONpP/_Y9Xa]CX=:(gS?!%Qo$r/Fe.DGAgV9$o>/$*WqX^GHMSrSRDBq_?hBj&D#*dMR`7!(=fgDlN59\rcH(q[_9TPEe&Hf`G@4Mq[RB66[5fc\ip=[(p^QAM%N\Ha%nNo(M$m.98c$`HtoUVDDB4A4P9s!ba[L(&BLfdHD5M[=5"$<3P40DD7=Kd`6l("0<l99)b0Q[m"AfBukl18@>g`sEk'JkrH%33]eG?XDS&K?/narPn2N71OSr-:@JC9Esj'^i`,^V=E%J43IS[a99+(q)VEiEjW(F:!lhB+l:6]Q'`UWLS7!ZK.\nk"pTG8I1NbH%iq>2U)f/ljADT8KV86>]hn4TZ2LJiCP<HPSM"]j*QKr<?/)TGtJXa[8gP&N9[p'*#_;ls8)\/.Z^i>S4>q.qn:#ktfni6']Gje5=%D-GkZ7q[ATib9Qa:(IEo045SZ#Xl,.aGJ$KG5hZVkRQ]<%X-OZm`phsd?/f'm!?"Zk4W1ah0If3_EM]eLVYJQJ(h<,bYc9\>f>F4%_ld5E!bsbVh-%[63pGFr`'2K'O[EYJr;QqE'`5i<36W@Flp`F-@QLsB#KCWq0*1a(a`JLISBX"t-Mp3>5sHQ@bp(o2/_iI:1:l>p%D/3"m7E=i/l3I&)?jQ<94G-$icQg'nU*%%?J4U]L#FF7h>.CJsh/s4;8!q*9_b=P36j"bLhS%S.Y4K[Sjm3W]$gHHgcL*`kgd09S%'LN'p5.gFU%S&mFS@_SdU[q]W_&P&Fh/uW3ol<+qX5/&dRW(A?ih"sp4qH79cadHr8[Go/V8SgYHNJht[bf)9NZt@X7Ab,?IXKn>%R;45N/LL<:_ZTGmd:8GCc+RWkB"kegUT^kL@SFTM(L3!-&mGA)e#g;UJlP(]WF"T"Y_&BeQc@D/kH,IFG)'XUkb/\`\1##Y'2S20%\HHPXHg"loZG@:??5fkl%uNd54H2)?_.:SG%RfDD47nVhD5T)DjC!Nff.e$J#VLQo&i8_V'5U5'P^R!`T;o_YOIRJL*l)['EY(-O%1WQXN?D$r@ouI$QJM@\Z[Gt?tN-PQWfTEZWMld4$o=[!5rLVesDbNAU\fu=kBmC\i#*TMiUq=ADPN=\Yl&Eb4<X,U_h[>Aqp:t3L%\0&H'ke1n%!UB<[HhlDd0+]?1#O5a^A4ce)H\sc(ABTZDWf^_,78k4r\DtM:0.r^6E6aQPBP'$uh!s?0]"#=u`/RF>)9hMt&WBH\%Ce%r<p5FF&L(IcNA$Y[9G=O>F'p]f9CYDbQ(c%e6I3?+c9^F61O#]H7i48<Y=H[Z?5i:h1:s"*)AhGaSDp;Q7fGPN6pUWt/?2S;f%<WS[+do"t<:-,L?LT75d=O2M@4=SGt+`((sW?dt5Fc.SS@[F$LL?9K8RAl:=1&I6(CK$l^A;>C3O_!7pJlgI8A=4M%`Q$7BMSU*E%@-5LP05be`L4pe\JDH+g_Vf$Lmn6;dmV'G^KF0>M2`qrLPO>B#*->F-Q\/lrj(]Xjm-`-K*"I:QM"e^;:4Z,V'Q`[MG33d`!k_q]%!PA?h.2Y_scd7)G]G!X3jqc&ZFNZZM-6LeLj;eNqSdm(4"D,,tHfSi4WPZ/W"rGJojMD.Hh$U]=5tgE40F5uO(>M#BBRZ]eP^[UB%e.:W^13g5knE_R`4O"LJM`C+tJnG5iCa+:T+=9IJ0;p]#"_C5qG@?8Cis9c3\bGLlh=YuHoH\mY%%-W7m3rLm%s`o]rda.a4Mu/g%8P-\\Yt4"B4i8EEcO?GsIRE_KT&J=j;O\.NYj_R+:NuaYIu[HQRkKRDY.ZVH0D6:?,*iX[mhgMUID@2'W"5-_M:^.X.=!7qhHmCf%.$SH,55>_Rn`e?r,Lffq%iZLp^L3!mO<MLX*-bKf%s)]W%!Xn)9!%RcAPr+C#nNPr"WgA]64;,$+lbQ#N&87<?lk0A9Be_n6E@s%%Y^_5k/gE<d#8oPX,:eI<1'rBkTj/dp+Loo3Gff9pa[d1=O"1m%"R1H7P`BPk@$d<Da@"[7WoF/#O&nY!;tm?=.n&aul]WBG-UUAi%acN3E11Ufd:j*@!'UmM2+D&WE8YP6RJNl;o/Gg.qq5Q)M6K*'i<Ldd+q>kBFmLRBX:_>n??_hTP>(ES+rB1eD=_D9kJeNgGb6KT%%o`u$A`h%H'nE=!m1A"V%V<o)*pg+i(GIjKV?l@P$hhAG)A?dm*j=EYYZc?E;dp1Cr*iS7#MmsP2b3+Z[bZ!7qAN>$%RJSX^-@j-i%4.E_'.1[I9p3r&X(JZ"m[dHC@p-<asKL6VT2sPsR`Iq;)EO'oK.?OegHOpA&+\ppG14Gq:aMtFtf@,,sK\BYkHm,j>O;q=FfbR")%*8jp7NH2NfYLs29fI6GJG&7[?(mkJ8oIN+T@q'S:GUP>]<]RGsOblrW.52,_R2Be-'4Y^u`+TDB/b##K)R,$t,%KELcif2rNq@"R%3).S&iR'[ae;Zi"QuqA1/q`O-N99&L+XXW'f/@1q+W>'&\*@B*AcY^%d:.UJ(P8J17Qi<7;1sJ$JKYq>)fK?]%4p"]Gut(#^p!mi%rFXPeZ?dW1/jfah`h9lf4LhPDc\(]k[a^;Vh@urA[>X8tH4M`^E?iA+9;n@X!(8aX5\JtA`8Nl?3Hk!j%T]$_=KdX=CA_<fjRUQ>%"u(?Y8PB10"!-&#i[3-$"tl]A/;92/W].=6:'K)Ni5PACc?/RVc?9ZB8?-EeT7N":%BNi/`Zn-4,]39q7%rHO2(e7b+Yknl44.N1%g\q,jUcCT6\qq\?(Y'h-!9?c#-6>/dm*m+X\Djk"d]@L<#sl$plLeUa]Zd0rO\IE"aFhXoZ$7a;Hnf>5R!2j6/VTWB?."$O!4W>,%@s'/+7MEDIHji+IG-7Hon`;Y3/I.KeR$l/5Lc7c/lhNYu?=qXX$*dX;)r+$aqdO4-H'i^f*J</^&?9gj+kg/4<O0l@6nIDgL`M>+%>3(i6(C&N!;r)<S_LPZtisf92-DEt:mEP(94K=FT`)p4`$UlPC_L:&Kb!YQhC->*l+u:3d6j08_S37T47]iH(39+F),#6;I*<V9"%^$N;.UNO#dq=I5cN9Y,%*0]dsX=Z#1?oeZNP>MMn%#NVHmsZp5`%m0LD(%&E/"Wq!*MJm(4d8qeTp\JN"gkqR>*QV*q7LHbHL[qq%\1:oK?AuSPiE>U@Gh)<iq]CitWoF[`hRC.H=)-]9]_#$BHJBR3l;gnigpLkfe_`=U27dSRl5#Ddb3dD=dAfBgbN-uc0L"N=l[q)g%H`Pa_0U=UO=cP2/-X4^4Yqpf]#Fg/-A%e*YTIu*dZ#luUi,pHZKj_&\*3>##0?1jT`khm[[E1!*RjWc+Ud$7&gCtPcdK@*G.n-$"%(LoCK>M`RS;II]F6/1t=M>21UKG$(PO;Btk;R##W+C^Q+;@eP[>gf=k?U[oPk/.s:V4c`!ZQ8G09L^13FiAE3@*e>6U.=/.);Z'B%7qVE'XA"bGhgCCKLm9+>7JBO<JesW9(TX(E_qQP6)VY0njes\FH8rZKUY9XGeP1`?;=!Jn^TWB&Tn)S^EJPOcN(#I%-+75icZc9l%3c5l)^]9sDC\Os/K4cq*Sa!*%e.J';^SbinK&>qBhi&V%9fEI"pgnX!s,pf@=@=>h2P%&^'`jGYRZ:O+2oOENAl%AsY>qtdTR0UO%e(?IY\m.X&`=.\8SkVq\6^<0?R]>WV56KD4h7"6bFkE9`):LXK4R73p3e5MG6sqM7=h\f\k2Gi<MaZ.:?KpaugZJc?cmA$7k+@k@%3ocZ_c<]X-;*XZL>t\_>4SV_PmM#TM<NfjQWdC"uDVged*f7-C\,'8%,qYEYQbn=T??E`C!<`otCd2R!l*o@Z%"7o?h[?MWS7c3U%T*A3letTVY`&e^MC1:80>64E43nD9G)$Zg-Y_Dr9@$_.0GG3Y+ShQId?>Te]_BDfThkr0UVqa<?[Dk:?k%6WPiS<DI7\Vo1Z5D4?%@afa7:h(`$Y.dG$9n<^HogM%"AK%bln.^$"D^>p=9<R`*cR."[(@WM@>uo^G0,ulp!7C0Q]$AeKFB2'Ge@'g^X9K1XQL73JRo^XI%oGMF<#;7H?n;tP0@!C?WQFYs_PNlf7bRM_e,4O?@a5;X;]85tYX00dhVJ:@j?EuG&;o&hL@j2)"rI3ncBR#-+L0J1o9GtNg\A*rh%0sN37%_R%rQrBr]l@ob7Bb>dX5QbJk/K9dj2`!n$VaJ#2b`hm9H>irOf1<K<E,kJcbrS@k1GY0>J//--f5r&.'rr#]l9PaC&l3\Z%Y.t(!lFlFZ#u($K,%IE,>Go8S$6>[CLuD@TfQn>9`7_F$FAqD%94l*=oeM8)&!'#9o"[TJPf0LifV!^=<g:%eK6?]gBIc:a,7^`"%/J'0*m1[P9Hu<Uc5h!p\@o,NSnA4FQ2LlkDi#IT"IsTrR\g\rU^$8a5T:s+QGYWjoV*^<9*]i5B8X8K`lTDKC*!0*/D7IT'8g3kD%dK\iS;g'&Zp\.=6O9'&9S>_I>Tn-U9on=`(QN='0T,6KI?ab.@_Y,X*n#"n'm$V<>N/Xje#Vr]`B6n1978'/Q-?`bhQ*-JmTU2i)%jQXbP7Z>cal\7jOdRb*WVCea8km^h[=&C<>$2Wc5!n;99S::..b4)\d5_G39<`R=u"0k<5T//#fZAD&j@'5&hKdu>#$8s=SomF#j%gc[Hp$6nMPp)Fj7m'`2bhLR*o\nMN/+G6?28'd>-??DV_PD'5cLs%tpN,aU&^]I9d<*tR'.LeGcbZ%;D_!XXL'+0KP'2DQJY0*po%,jS397;aYq0fLPiTj^kd[##,S27'@%FL0%^#%M2TJTr5J\+a@[!"$cq#-!Pb/]t<82<;?3Kl^^'qs2["2f%^`3K:PZ2bWPZe7oui%&fF>M97+ma_%WSZJHfIl,%FbK=&4KOV84SX\`*85TJ\;VQF1rVI5.$*/(.45[r?Z[\Mrot7#iTG8C^K<(rL0n77F3\_gp$Y)6<8e%.DOCn!Ja^_K2bn`%B@r^2BDgB]AD5!7!fCo>AiY?;G,\_0WF6&[T('NXqMU';Br4d/I60K\#I<W7^ueDllJi2k%f!t_6F=V;Djtm%K8Hdu=F(4-R_D\=E2L0YnqGJ1<iJ_28idpS%GJ*kKAn&BL9$G6?S&HtZZo`$+kDe..1r-,<fd_OS.GHD'.)CdcC@REaZj+5h!]>`%L-d9pm^FAfE7C]jA$m@ie^s0j2e\&hZ^,JNfY4B<]Ir#(YUt\k_8dbn+ApGTB#inZZce<`Eq4L\F2rM[._;<hA\ES289;'XQL7X.%2eN[[cmC\,$2EUN^:(&O"h%CJc)V6H6Z]&h_LqTiRZWT^!b>C9=rqp5akluFZg3(<CX?-uDq8\W3KIecD#1on?GeS*#]2mcMJBPQ%<d@Hc*6:0ji'0J;4$Lu^Heu)dl_5Rb9k6:R1R!M>1HDAn-(C49PCfLH`8CqmeB3h>hQq,(7-T&NG'B4[S(sc;.^kilh6do*pP2(3%)BUK&R\qgY#4[FH^!fq=3^NleRsF4+!T"LNLiT"jT@G_RBooO>^/h>gmTJ-L=a=q&2m<5RfcldX:eDhAF<nh9*t:1$p)O?GA=SBa%CKk8WZXdln+4HA:fT3et3AU44Pg^MVmk#QIM6Ut#j6M$fSqrATJZL,EE0%@%BXs_<Ff9\*1(NTbo\^HbM8=gG7^d:"!]-8u7'45Q%q;UI<9NB,=6dL9:O1nc'^iW:mk%gmX&QmN@PF/Jak6Crq\mu`f9Dd'\,YX<-jgDf^^e73[02'q][/%Qk'@<ORL4FAqnrFO9fhRK@%i1V:-#?h4?`_%LgH_iH^Nl4%ZS.V0\NM$/O:Com)(Utf`a*"n,P+#BJqY9H&5%Ei)a&d1m?qVOU!p_%H(<5e4;ajcU"<NupZ`<U+%$LDS$_IOP*N4&?M9rC)p9EInX3#ZFeL8.T^ks!I>S-@oQ:HVX"*l#U<XR#ER@<t=A(NDFXaZE<aIL(m+:JgbqE7!rtmgk1Q:Y3P"%C1;W%p,q]Kh"@<X#u@L,dIHT#RsW57Vt!7FS2doXqN5JjbMaiE2E4I)0Ih6"-]F(5Di/I:@6Ar7D8Fn',F-4>VU:.TaKFFL(Kj.P%%<-J`TRp8[fU1*P%W:WXMMmgrVAJQ%`EDbMk.;2':R:(m4.5!@RVn,D3`gHTWr4p=##`9M5Xc(?a=au.ids:oCqg5o>Ft(<VAI7H%K,pE2F?+HlN!?B)F"eHc/hl[MaGPIC)rT032_s4!_PQn1(@VOAkSER)Gd.a;mOV^=[bo;Dr[Br1Z2"IMeI<u>+u>Tj=099(hG\i)%^o%Tj>L^l6/o/2:kef0\+qlpj)aDUp[i-Z*M!>3hEa,ulkh[&Uc83&j!QEK,FK8KrKSiQk-1CNr1VlNjN.,_Qm.7\\47\[k'#E,d%Mb-bcSH&o=Q?..+E=NqbZ8qlCXO9=ROD1(hiNP/+s5Cm#ZO!LU10J9u_9ESMLn:e+3o:5,.*^pnh)<n=[7Zt0P)LIj$t>/33]f`=%9=lOT.?:5<1I5#Kc)YFBqFG6/XV2?q\j8M:Nk++r0ffDtm$NTlM(b*5$rr>k`f]t:5W\occ0=+HIfJA/I*9M4G)=ek380%(<lKuA%AB0XYSW.9>Elg;$&_;kS^BW8r'-fRKc0rTN%`?NYHAWLULLrp_G`Z$il1\YgD.;t&WMB@/cFA<J):t:Id2C;VS]+.Dm-:eNWuM$S%4(j3_4(bpXc-HSB;nG,qp=\k(abmjpTjf!QVfcW1]R595q2BIB2m<qr+gL1#@>m+ZO_OH@E"G(M(Al@RG=Q'74_&.&oUNs`a:!iY%5o&$B4g*P[2tQ5poNP_SDoVWDRJR;:QHS'EOnUB^nHSp6GNl+Dfp##@M1rC9D0J3BG()(ubLbAuOZF[J;CL,@f_Wg%%POHZroJL#%SWsX'j*!u]A*>mClpOcDXD/f5Z!@E@1m#e="m%6F"APDYl.EbrgAWXE>G#JEoh2me-/G\=Y-Y](lZS3ohs=!?<CV.'lq8;IlZ6k^%]/Ztn`i=J@Yi>9!fHi0nOho!-rOn\_JmOCQT@i?$W^NeBm+V$V`2p'B@k=H1B:s2G^ER+O[iLpQf^L'iAm#sd'!s!jHMfZHFNM'U%Z8Fji?AlJg@OKf,@LUs)2YXXtAt'@WAJ*0:TrGnk!r<N\?!s#^TPP#gSXrY/,$%*3lfG(Ld>_hT/Khb3ipg;)&<Kr.O@5=*W/BVp%E"'YMq=0[]=_!]0`0T"<0WShom"N5%oC\:lhTAWYZGa,p,:i[u@$T.-r&frD<@M6@`uR`>?*70FSL[Z/k6;Yu'=T1uh/"@O1k8^4%PX2iXJ'**Ej@HA&h-V;c@R1&GEaoU2Tm"m`8n=:=hQBcD(mggt"Eqm#Gdsm+F0+9dc.HHU9b*E/(_\U.VTj!;bdn\[0X>1g`cSkt%>'Rn#A,?GLE05u3XCSgTf@g(K]MI-h(q&\!*H=f8$e/["Fn.4`7QoV'FqULuBg]eV08YNB-R$dU`$d5FCe,RF[T"1OKcB=@`aVAG%H>il7@i9H=BaP9B!L@lJYmfB]&9.c/K%U,_Ka;=oLlkg>84DX$^eC(?0fi6*9RJGnS\Ud];s]kagWMc^2LkSFML'TK;`>RR/M+nP%e@NLlSN9t_D'XjJFYLBQeupQHCDC_bc:E-WT6^pod%H3D,u2ePd+OSM1d$G^@T?H!f-^:<kS;8BL'CYRH<e,A^?@%>Fm+c@c)-0V%iocb22mB=4S^p0T@%6>g:j>*;c?8?r!kIf0;]/g)5:eMP=e6Fb`3ebRgL<i[Tb2L;fp01bcJ""im(Q(>P=ZkLc0g,>c,/r*S3sGY%#'OJ3Jm%\Nlo+V=D3[Yh'nXIW2M&#NE623-gTDK0B$tJ!5*<\:)0Im:_1A-_[SX"Dj/C<.2W,Tnjkig5K*tgES$CU;K?8e_CQA2^%$cW"_9G7t;P81tm#"'&OB2m[pXV[A51-St.8A,V'DOmrDke2lbMj:]2N6$+*_Ja@n/Mg=eoF[[_Cl'R=pg*M0j%>\HdN8R[j-EI:%"%-"udcROpIKjCFU>`#I9Bq_hF]_$$9Hc;K;4A$9oPMM/T'L.U\Ite$lQsAF.>I_NR>,Zie8t><_PSfC"hZ89h8B>F2uILWN\`@f%C/1kQo3V25<l7ci1F;9^(9Dma5,k_9=GM3MA#>d`]b];ZTQe*;HH_>iW"WKu3V&b[-55>SN#l*enWp^Sn%=J&$/]/r(HjKfG%5`Z%8H^R;`pYKS,5?':k7kI-]`/\G3,?_s'8:bYeb/OI`3./L/`8Me^Ak`,K(!jO%OeUH_+l8%h"$m:NCo.IGeJmjgV8\0f5Qrg^F4Z$%V+(19;?t+5/8!j<O*ah[3:CVkhQ<OQ*Zl634#2*q%_m_CpW@@27Oa2A@Bl.F1Ki;baMmIrUH!n9>CGJP;4M%k#_s>$Gf9.*OdXE;%2m2](#,U1]FP2o?2)Eq,nH<e_h6^b(L-NhXX1IZXh[plgqr7X@R5p@I*:WGP/6?>F#<+d\^fa<m'6@^]g*O)%ek[Gn=?,Yhidk*.%^%TMUbNA52B%8U/*7*s$@m^E8.Otm[2U@Xdfi^)Gp3l2>H^5dVClNc*rd=G!@+f+<2HUdY<f,3@/c9c7`'JgXHF(hHdA!]`-O*B:%@<ctG4.X+$(k3^YD5sdflaC3BAjZZ:hUd4_h=$N]n*-Tq[5Vmo*cFLM3bRq.<F:$]O^;F-#\[]M69`R[gAogU]<'LPDNj;Ok=1NX%&1jcGQ@9d@k2F=GhTg#Ol##^?T3g[(Ui)=Z3->=#>9Hfb>_H!9/n"H\h0!9%I/'kULn@*FCfT<5cW\jlo;:MU-J7+.iWWrEF`q#/%T-?32Li0N)IO.H47JcDuAqB?[PckU7^97!/C*/ltm+\AJ]lT!rB?:`kcg]\Ca>b`n3V3G!AhPpp0So:-4^Q$%\m*FC"2daZgRHT`%3og<S&TWi;-@j\R;#sCMG21q*F_L9=`#.P`0[0Ht9eTcT0qN(<Kfl4:>RL/CC1(Ub\u!63]K>$Q?PMtA8b&T+%R7Wg&9LX2kFB*-%HX[U[.\Psf+<#3j"XK=Rj<d-.3mi-BlFKR$?.r1;?J<+L/3%I3^hD#Smi=8#<,LM;pNU?PrFoOq12O''X_7N&BITE=SqSa,#_,pf%/q%O:fIZd0*4hmHru>Q"Hfh0)4nJ+`H&4ra"]=?e.k4X79g3KHbbPOhZefr0eY;Ts"6^P;bGsDJFR3sE,:CLf\1kOq#-`0c$SEIb%EMmkMZ@!'[/s(m`0j1iu`8usX'[[bu-'JNuCl0YH=t:Vh*[5n7P6Q`&J$LI`PS'0KoGbKLGTaLt*o7/d=lo-fMjHN]#^MdNO2Q5!%q/am$Z`]_&2;]R6dDq(Cf):d8G!?AX^>Fl5:_FG.2$'-6(sgbr[.mhbc?+HY6l=I$j`S]dnKbOk:N^90IDYa&.8\+;S.(*,Ru\ob%%JSuF/O/0]n'Z2+ZT5>2Bbd%rWgH<<M@j"MiYC.KF^+d-eWN-MD-_3l<KE`qm[5Y%*Hcj3O"[Kg,FM_-paD@_@[il4"252?AWM$a%0R'^c=M'r<aFu"Ok"8<ol?K0mX^Mf]>pFjF>_76X&YW=N(K"8%S$Q:6T-uQESU)K\-V2KRf$k)!2q*F]8i_VeKD.tul:*Z[=S;-N%n$L$sG:aMI1ScF6+l`YJkU6gn-fduk7seQHf]$$Yb8TM,qRl>b12Z')AA+RR3%E@U`YZ6dONu88mchO4>=N?@]XdI$gCpS0ml#&m%a9bn9rDo6+aK"u1@+L<gYrtGq72n'<ffaf#(^.7TU(*`^9U.RipiM\=5[[fJK%.fLP8BEhF/O=!k8tT4k2*9_LMCZ&^gumCrDC&t%S%1keF_Q>mqn^57]!.b3<dU`.5@2pfVX>T_0_hn)GP\FgS.)JAR]iTPESqlhlVYDY6W3kff#m.sTY\)?Wu;Z^A@$*".0?5Rd_O@4%BD?&I!Uac3*pfE_d."iEE8qf=EWN0SZ3;VO?nrk`mrPaC'M!aXUDS>];$-7:8q@_)UhU!.?5;7m-:[a0@'U?R)qMs!I:?dm0?f_W%^:0")U%Y5IU;<jFV499MNqL,7fV">\qK@(Bf,Y_+<m)['=Wd+i_Wgaj\)t[gjD41$I6>*Agfc/u"P]0u>LU3Rh,%I"`uE`D,?4Ms%m2'%'f#fL"FRpt.l(/Ah;h$$<$Vmd%BWg"mn&&2ei6BoS"u[q*eh0R2bBYH6<gSa]43L@rD7aA7KkKM*%h-$s"`MS@d4'-Ek2\NW%D.[)MJog0Q(3</d1Y)G*gS>7\YAFt=C\)99SX[URAd=&rGO.8X'[5>+@*`):S^@\N`@6nNV!cbpTgf'n'fiV,hF(s=";<_2($uHS%0HO?H<f*c4+.g9P6I(l8*nDWKei0(.VEHL*7(5>,IAbiNq$Y\#WRm[XCmR/'3cisqQoTO)\L&ZP"U8J$kZ`n;q+"#i[=EUhpP*nd%oA2e$VqtGsYXusJNIf;aXMEX2V<sE8YqRAV$Ljb`YXpR\mP"(\YK[k$h>/M-bF1GPk@>oJ/JDWaJAbJmH"n$EbZ6piJOPr+j'H@a%$[b\>fET'5+g/IKi;`3QrMqTg:ccA0;jf;A*`et8asTRS"Yb+<?kcdJ4GR,9]E2QEf/V6._)>XI.`Ir%N^U!sL'[l.!lL#[S^'Q(%eB3Qs&/Cs@52hH1U39)dcpRMkdmqDV9HXbj;3.[W#,k&_#cqg"'_XajV'rg6WP5W'=ha&+TuNodQ0EqHjBIGJV?\%0T#aV%$Q<!/%q,b_D_$8djS67\4`#/1n0uc^TbZ\;qd\(99M[U=M5'qN0aSAuO^fiBO>7^bn6hXV;>4H-:+5Q6eO,@s#nAmD7+Fqa95-c?Gbp@6:%'.Z-d00BY<-jfmN>U++VGRPV]N6$*c*`LP9;MRbC\FE#-a/'T9je<3"GR>EH3W\b+@`8b@Xf^jL/_fTkGoh0^XOe4`Q[rTDP)0tm%K+0+bpA92=2<DXBq-nL.7(+:Dm%[`;m4sT^Ph=t]<7+S>YGnrGEN'^GQUf(;/r1^TL^*$Ya*oG3W=7)>@q]7Decd]rl.Ubrg-U?,%(o=!]nuc*Bd^>hPCYI6o*?EH#\UZ547!q]t@lVDFW8f)Chbfa[)_rP:]DXRnO_!]RYIn8*C#(p_Q8dPQ$C>D(aG.3>obR9=>_-%^%Y4,X'p#Y#f+i-KJ/9[Diq(^7"\]p0UIq&T%Qk$'66&`Q8V@h!dU#[pS]=D[0Y?bBU4=FArJ^"_3k\5kg4p`9cO/K,lIS%+tC],F-%P@m$g*XaST\l]7IjV2<P%%&$Aq.Ar14-f8ZJS=Z"kanRk2ra#0(=oW(.SPo`IDVFKR`_Dg"_If2_J_#HT=:f?r<nQ]8lGI9P$ksP%^'nuelV4YF3::28\&Y$cHJF,iee=/?9k5Q=a*m<B"ZJl3+XU[3.>&W3;J.*EV@XB6(X"B`JiACF+mrjR.>/\IW-bRk;[=7m7b4%q%aBu48;DZFj<Rf2&(kmkk11e-J>Qe7iR9jUA1(/42-=BSA,ZE%,BdPaK#!/7GY`TJ[Ca?I.lac/ge=/ihXsQpJ''gogBUs0$2"9;K%Acd(N7\DBl,%+5F#7P50`Ufb#J_ad^%!J6D[:lru7+NRn[@3I"ldu_"P\WG--VpJPZtDK0XS6IAZ7]Z7o-?(33?DqDh@t#A205#0%.J%f34>i/Ye\uq&`TY;dr77V!qIj5'9[r(Cp*dM/d<@ufa.+f2DlM-;,E(@sI]?h+lZ&ANg?qU.?+fhgQS3&um%M&4[.bWreP&)C%]r"/jNj!3,8qSs&EZd`?5UOJ^c%/$aKWe$-7Hbo-F'oBQ!L6>Z,.Qt"45`Qd5R9S[0A_XNE-8j=\IC9s_>4J(rJYFo=,A*.T0&L#%ed6i$m?<N=XLAk9]/D\H3Dnf>,o5,pOLaH)n)&Rhd<ng>;@Q`XFHSFK_4LL?ZEoA&ah_k5B!KVp@n^u]Lh1>o"rKp;JV@;=7BfVU%>#=kH.QnE&5juJ*U=Y@s'@*1EE7'/J:/?iB->0cF1=M(38sYHpZD.0]DY91QSdpkh"gY2o:caB+$0RFMR^[B8%(kS"FA\P7[hbLq%Q3BBb;b2@7L,dK[<4%Z<MPIu`77PB,fNr+BqN5Kaj%*M;Ur8CXadIj><LH0]WX=5,e5,<1j$aJp2e+BZ6D0t>Q+ajV9NOu"p7LgZ%E\C'S6<3nJp18naRS[oe).$r,^am5=*;6F%\(LaorrAeMIG**XH81*$rX$Uke8$`7goL-WF1p#\[O1!TcN@8$emjDQoe#W3==nPC%/.T@k9#;A7at3ljJuHq@d5$nlJil<JjqI%njtX*>C@6qdnX4:(Z,gHt5bKMHgd@9YFL7`e0kp@Z>@UVX0:On*YVA>j"i`[/VO[6`%fi1d?bh?g4IXP\"?_>[`p,T)j'\BL/RS/Tcq#4J[gb,JQk//^)ptZJIL2R!>ZY+`:Unb\SYe-HRMoHV_HZ7ZR@sFE49U6,MXtO9t%s#aV:6lKDj0:cKHFX8%]Qsff#3aOL=3aOMhpDTAAkaFApY@/0k5aL]=//7m7_dB#`$&'M,U69UU5R?7BX<19*rJ\,jN1u7I@nUpO%1^G\a&Ih%TajLI\_"PnHZJQRqV*Xn5F0ll[B.^`E5IhP5]p9R1=RERIkW`-_XrP2acbunq=GC4FIT\-5RU1Ncns((joh2'("S1>0%'=lY$UZaEDClKac6Z&_-ICX-117@$^h4,>/I4E6I@XMbKl%1e`D\J?-$s&/LrS%\V!pLKWVVuZuE'@/r&<NEI-.O<)\A5,5H6bs9%Og6C-GVL(hO\ocTofX1[W@3MtAOS=#dYWKn!]]B4`1FB70NT-1:i'B12l1.#@F&C)k:`g5"SSpA/Z5(Qku$$Y&V)Hfl%Y2uSDc&j%Z&h_HjS6Ek4e!9Y^isDJ$dA2/3[t3krGQlG$!UT?_K[&lh4FRSA^['1$#M4IRGs-KWsQD^R7U8VMK0]dUKj4PJo<sJ;Cl+sioPYV%Vm8&umce)pRW?^C?Tg?.D@CppHR3rgdFuCaBjS>.0J_R:[),$to6I7B8k=+YW*mcC=(6O6jo*ZDA3ratc'-d/mSji8,L8YbhCTD0%V1^<E`ij<?#o2b$*%g5ga%HeMpO;;AK:&k6?>5L4-A+33*UrQL;X^2(94U)_?mXP&>70pJ]Fi@MP@m;iYRe2(Gq6+sNq*GWediVH%J0fL[r6BS:@o!8DWVe>O30X=GZIU2Uls4]FP;P'N=g;@b.ZXSD`klLskFAi"9<EYjh1ahMY(]M1].bqp'qeT/H">DF"brkZ`nH01%P8U.G$CI>#Eu&:*`^[NGb0lTD*-1(X"1(+3"3lcL-SXA<J&*ZH4T^"BTmZRg<+b:)@AS&.nnj@_k6qR#nmpapKiV[ED`*U"A<aoD%G1QM%1m%:G'7:eB1J2%D%A`V]'o@>jr)+"aR7Ng_02d5)MP62^fjN^EoCn`o4LA!3+q$7ZEqc%4[$r*LqZ11b.D?j<&L[NpHJk#T%BOlEH5a_+[^Lat_RjB8H3XCBk:F^gZ7_H-HN+GY@mCcnTp0uA1.F0a-[tui#mqhFC&qa\aqYD6i,AZ&j:(LaJ9*`cI&R#fgE>.Pi%C1BWuH5VoH,;\#uI_kI/or]mI94kK@r.9clUP(h;GS]b;OpfG7gO%Q0b0'@\<@RUfq^q/rVb'$^Fnl2NJ5X.Z6eCpYaZ\S7XS.%\%hq3X0((WZc;moCj>OBEs[XhR=YRQXqgN?e:9:"4oH\js]N%K!r)rIF(fi,L!.r''8`<2Sm$U2B"*iW.Gm-0*<3U=NOjBP,::h3lc%Eomgu>'-H!&&@'#!_qN[m;L]aq+%[hME50VH3^kk4a1+U,dMG<_V,/_EQs)\nt_d#0F$hP/bkkk^2RQ-fQsC3mVD'Sa&3;Lcm.2b%k/[tCem/$[>>;n"*f4k^"@eg+n^`-7ok(hjD^F<<L8ig!m0Cnb430c0TQAED(4KltfO(m\jl,L!kogmR0%Z#]?cV1d+.k0#poOAG%DC8dS-k&l8)XF#`Zr?lSor,ZP?i%udeq+'r<H/D6fMou*Z"GEsl#'n]p""Ms<^5%f/p8Z#0I&Adf_@!<l^$24FKF4RgH-"X0>&7j%*SrRf@d$Q3dZ;aWj\qP(q%pD5l(6,J-$FGfYhaNL%,9;oh6XQZ+mlq(/EiGK4.3f#*#J>.NZCdt,'6D7]U2u()$<fQ3bo;jQX5tQ%)QjLT?un6NaMunbXk<s6F<9RiCtP#$0K$3m<\N*jXZ'J/Quj2C$.;YidsYk/hqbYe&#2.g5+I!h`Ct*<4c=IA)e%j6!8DF\'LfHg%W$XQPmZYQ:nTt@M60Z'p_&f+&?=u4@_+.f7&s@5N&Cp@2\'EQ5J,>f;--p2HPmj2(F>\b64g?:'eMO0Ko.5"BKSR66DQS6+=g55=%``UJS,<Iu`B#L-n?T,$!@Qj[mZ/SdeSlf>.1HZ<,<>K$g?DY=QmIq7JUSPL4JmO\BN1Y933+4L5BrN)?aa*uYeOqO6H3""MX/qiZ%af<&-;^@PZ9D^tc[@CcWpZ$c"Z%)a3s6\/4ofrEM^OKKQs4u#ekC<GUs884UmH;7anJ"M>;_VQ@AfH5B[\;b3/g]te1<AlbBYXQ6%b85[*nR$bCV]Yr#b&Lc9Pef-X2oMRhY"k!gb4u['?hl?HrS,B]5P+Z"T"=oV+7MGio/[DCpb2XFN:*><-_3\mFW?bgO+r/_EK#gK%Y'N2R@lO=D3"7N8*0(HGo7Fs%3Cr.r(CYJ[Rt#h")#;X#?pF0pjf)Y9$hGs';_NqOmGs[:k8a>R+3'tCFI%;&GFTK%:XY<0pN,$`%MmIT0VcQ*oCsTfo5$l3gkF\Nm5G%2*OZsjVjNska"KTQM$T5m"5$i@qS*CMKrp:6/m5NhNXZCqpnL5TeL3Ml,W;k%tCiQPFi;DXq%"brQ<kjcQ]bYa+eM_<;6r(4br^pf?/F)4-9ne:I5OpEG^</-#%T7/b8oRq?>"/ip'."X7n>\_E07)I8%lOQ3&HopcFN[[*GLHK.g%K,pIh_)h4?V9V2@Xt^i&a!W>=,k/$f]JBELLGRSK,9lZ'-sB+]Cl&g#Pi3I])>V_f)0:2F(rOXFiijND5=fM6U*/1Z?2W+KiV[S'%E5QYUh#..lg@']I50E_HeA2mhGX[:Gqb^_j1+;tI$(`nkO7cKA/H\l33!"-@#Xn92IV0)c*P;7A%j>*p:*mFC+#A$Vm%*X3IlLkM%Npi<ET_N>?-ot$NE6moA*;&n$n[n;g5I_)OD1dJ`ct%Y&@B:L@a3j")FIX05fZ$0<aqnIfTPKSDR&>Om%ifH'=]lQ3P4r)!%/=1G%XnhA!qsh:JrSRALr,;SnJ,AVos50IKp94JGO5Kp(J,J?as7nnYm>q:f?iKu4++O;dJ,Ffrr:?!Ln.5Qoc[YlU5Q>*:s7uKbJ,Ah%%rUW8QmE\#sl+d/V^OSF2dH&(>h7rars7XM5&'DF#iW~>%AI9_PrivateDataEnd